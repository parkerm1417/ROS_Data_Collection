{
        "actionlib/TestAction": {
                "name": "actionlib/TestAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "actionlib/TestActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "actionlib/TestActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "actionlib/TestActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "TestActionGoal action_goal",
                        "3": "TestActionResult action_result",
                        "4": "TestActionFeedback action_feedback"
                }
        },
        "actionlib/TestActionFeedback": {
                "name": "actionlib/TestActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "actionlib/TestFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "TestFeedback feedback"
                }
        },
        "actionlib/TestActionGoal": {
                "name": "actionlib/TestActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "actionlib/TestGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "TestGoal goal"
                }
        },
        "actionlib/TestActionResult": {
                "name": "actionlib/TestActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "actionlib/TestResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "TestResult result"
                }
        },
        "actionlib/TestFeedback": {
                "name": "actionlib/TestFeedback",
                "elementType": "messageType",
                "fields": {
                        "feedback": {
                                "name": "feedback",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "int32 feedback",
                        "2": ""
                }
        },
        "actionlib/TestGoal": {
                "name": "actionlib/TestGoal",
                "elementType": "messageType",
                "fields": {
                        "goal": {
                                "name": "goal",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "int32 goal"
                }
        },
        "actionlib/TestRequestAction": {
                "name": "actionlib/TestRequestAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "actionlib/TestRequestActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "actionlib/TestRequestActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "actionlib/TestRequestActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "TestRequestActionGoal action_goal",
                        "3": "TestRequestActionResult action_result",
                        "4": "TestRequestActionFeedback action_feedback"
                }
        },
        "actionlib/TestRequestActionFeedback": {
                "name": "actionlib/TestRequestActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "actionlib/TestRequestFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "TestRequestFeedback feedback"
                }
        },
        "actionlib/TestRequestActionGoal": {
                "name": "actionlib/TestRequestActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "actionlib/TestRequestGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "TestRequestGoal goal"
                }
        },
        "actionlib/TestRequestActionResult": {
                "name": "actionlib/TestRequestActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "actionlib/TestRequestResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "TestRequestResult result"
                }
        },
        "actionlib/TestRequestFeedback": {
                "name": "actionlib/TestRequestFeedback",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": ""
                }
        },
        "actionlib/TestRequestGoal": {
                "name": "actionlib/TestRequestGoal",
                "elementType": "messageType",
                "fields": {
                        "TERMINATE_SUCCESS=0": {
                                "name": "TERMINATE_SUCCESS=0",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "TERMINATE_ABORTED=1": {
                                "name": "TERMINATE_ABORTED=1",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "TERMINATE_REJECTED=2": {
                                "name": "TERMINATE_REJECTED=2",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "TERMINATE_LOSE=3": {
                                "name": "TERMINATE_LOSE=3",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "TERMINATE_DROP=4": {
                                "name": "TERMINATE_DROP=4",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "TERMINATE_EXCEPTION=5": {
                                "name": "TERMINATE_EXCEPTION=5",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "terminate_status": {
                                "name": "terminate_status",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "ignore_cancel": {
                                "name": "ignore_cancel",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "result_text": {
                                "name": "result_text",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "the_result": {
                                "name": "the_result",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "is_simple_client": {
                                "name": "is_simple_client",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "delay_accept": {
                                "name": "delay_accept",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "delay_terminate": {
                                "name": "delay_terminate",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "pause_status": {
                                "name": "pause_status",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "int32 TERMINATE_SUCCESS = 0",
                        "2": "int32 TERMINATE_ABORTED = 1",
                        "3": "int32 TERMINATE_REJECTED = 2",
                        "4": "int32 TERMINATE_LOSE = 3",
                        "5": "int32 TERMINATE_DROP = 4",
                        "6": "int32 TERMINATE_EXCEPTION = 5",
                        "7": "int32 terminate_status",
                        "8": "bool ignore_cancel  # If true, ignores requests to cancel",
                        "9": "string result_text",
                        "10": "int32 the_result    # Desired value for the_result in the Result",
                        "11": "bool is_simple_client",
                        "12": "duration delay_accept  # Delays accepting the goal by this amount of time",
                        "13": "duration delay_terminate  # Delays terminating for this amount of time",
                        "14": "duration pause_status  # Pauses the status messages for this amount of time"
                }
        },
        "actionlib/TestRequestResult": {
                "name": "actionlib/TestRequestResult",
                "elementType": "messageType",
                "fields": {
                        "the_result": {
                                "name": "the_result",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "is_simple_server": {
                                "name": "is_simple_server",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "int32 the_result",
                        "2": "bool is_simple_server"
                }
        },
        "actionlib/TestResult": {
                "name": "actionlib/TestResult",
                "elementType": "messageType",
                "fields": {
                        "result": {
                                "name": "result",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "int32 result"
                }
        },
        "actionlib/TwoIntsAction": {
                "name": "actionlib/TwoIntsAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "actionlib/TwoIntsActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "actionlib/TwoIntsActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "actionlib/TwoIntsActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "TwoIntsActionGoal action_goal",
                        "3": "TwoIntsActionResult action_result",
                        "4": "TwoIntsActionFeedback action_feedback"
                }
        },
        "actionlib/TwoIntsActionFeedback": {
                "name": "actionlib/TwoIntsActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "actionlib/TwoIntsFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "TwoIntsFeedback feedback"
                }
        },
        "actionlib/TwoIntsActionGoal": {
                "name": "actionlib/TwoIntsActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "actionlib/TwoIntsGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "TwoIntsGoal goal"
                }
        },
        "actionlib/TwoIntsActionResult": {
                "name": "actionlib/TwoIntsActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "actionlib/TwoIntsResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "TwoIntsResult result"
                }
        },
        "actionlib/TwoIntsFeedback": {
                "name": "actionlib/TwoIntsFeedback",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": ""
                }
        },
        "actionlib/TwoIntsGoal": {
                "name": "actionlib/TwoIntsGoal",
                "elementType": "messageType",
                "fields": {
                        "a": {
                                "name": "a",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        },
                        "b": {
                                "name": "b",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "int64 a",
                        "2": "int64 b"
                }
        },
        "actionlib/TwoIntsResult": {
                "name": "actionlib/TwoIntsResult",
                "elementType": "messageType",
                "fields": {
                        "sum": {
                                "name": "sum",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "int64 sum"
                }
        },
        "actionlib_msgs/GoalID": {
                "name": "actionlib_msgs/GoalID",
                "elementType": "messageType",
                "fields": {
                        "stamp": {
                                "name": "stamp",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "id": {
                                "name": "id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# The stamp should store the time at which this goal was requested.",
                        "1": "# It is used by an action server when it tries to preempt all",
                        "2": "# goals that were requested before a certain time",
                        "3": "time stamp",
                        "4": "",
                        "5": "# The id provides a way to associate feedback and",
                        "6": "# result message with specific goal requests. The id",
                        "7": "# specified must be unique.",
                        "8": "string id",
                        "9": ""
                }
        },
        "actionlib_msgs/GoalStatus": {
                "name": "actionlib_msgs/GoalStatus",
                "elementType": "messageType",
                "fields": {
                        "PENDING=0": {
                                "name": "PENDING=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "ACTIVE=1": {
                                "name": "ACTIVE=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "PREEMPTED=2": {
                                "name": "PREEMPTED=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "SUCCEEDED=3": {
                                "name": "SUCCEEDED=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "ABORTED=4": {
                                "name": "ABORTED=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "REJECTED=5": {
                                "name": "REJECTED=5",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "PREEMPTING=6": {
                                "name": "PREEMPTING=6",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "RECALLING=7": {
                                "name": "RECALLING=7",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "RECALLED=8": {
                                "name": "RECALLED=8",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "LOST=9": {
                                "name": "LOST=9",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "text": {
                                "name": "text",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "GoalID goal_id",
                        "1": "uint8 status",
                        "2": "uint8 PENDING         = 0   # The goal has yet to be processed by the action server",
                        "3": "uint8 ACTIVE          = 1   # The goal is currently being processed by the action server",
                        "4": "uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing",
                        "5": "                            #   and has since completed its execution (Terminal State)",
                        "6": "uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)",
                        "7": "uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due",
                        "8": "                            #    to some failure (Terminal State)",
                        "9": "uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,",
                        "10": "                            #    because the goal was unattainable or invalid (Terminal State)",
                        "11": "uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing",
                        "12": "                            #    and has not yet completed execution",
                        "13": "uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,",
                        "14": "                            #    but the action server has not yet confirmed that the goal is canceled",
                        "15": "uint8 RECALLED        = 8   # The goal received a cancel request before it started executing",
                        "16": "                            #    and was successfully cancelled (Terminal State)",
                        "17": "uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be",
                        "18": "                            #    sent over the wire by an action server",
                        "19": "",
                        "20": "#Allow for the user to associate a string with GoalStatus for debugging",
                        "21": "string text",
                        "22": ""
                }
        },
        "actionlib_msgs/GoalStatusArray": {
                "name": "actionlib_msgs/GoalStatusArray",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status_list": {
                                "name": "status_list",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Stores the statuses for goals that are currently being tracked",
                        "1": "# by an action server",
                        "2": "Header header",
                        "3": "GoalStatus[] status_list",
                        "4": ""
                }
        },
        "actionlib_tutorials/AveragingAction": {
                "name": "actionlib_tutorials/AveragingAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/AveragingActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/AveragingActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/AveragingActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "AveragingActionGoal action_goal",
                        "3": "AveragingActionResult action_result",
                        "4": "AveragingActionFeedback action_feedback"
                }
        },
        "actionlib_tutorials/AveragingActionFeedback": {
                "name": "actionlib_tutorials/AveragingActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/AveragingFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "AveragingFeedback feedback"
                }
        },
        "actionlib_tutorials/AveragingActionGoal": {
                "name": "actionlib_tutorials/AveragingActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/AveragingGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "AveragingGoal goal"
                }
        },
        "actionlib_tutorials/AveragingActionResult": {
                "name": "actionlib_tutorials/AveragingActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/AveragingResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "AveragingResult result"
                }
        },
        "actionlib_tutorials/AveragingFeedback": {
                "name": "actionlib_tutorials/AveragingFeedback",
                "elementType": "messageType",
                "fields": {
                        "sample": {
                                "name": "sample",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "mean": {
                                "name": "mean",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "std_dev": {
                                "name": "std_dev",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "#feedback",
                        "2": "int32 sample",
                        "3": "float32 data",
                        "4": "float32 mean",
                        "5": "float32 std_dev",
                        "6": ""
                }
        },
        "actionlib_tutorials/AveragingGoal": {
                "name": "actionlib_tutorials/AveragingGoal",
                "elementType": "messageType",
                "fields": {
                        "samples": {
                                "name": "samples",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "#goal definition",
                        "2": "int32 samples"
                }
        },
        "actionlib_tutorials/AveragingResult": {
                "name": "actionlib_tutorials/AveragingResult",
                "elementType": "messageType",
                "fields": {
                        "mean": {
                                "name": "mean",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "std_dev": {
                                "name": "std_dev",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "#result definition",
                        "2": "float32 mean",
                        "3": "float32 std_dev"
                }
        },
        "actionlib_tutorials/FibonacciAction": {
                "name": "actionlib_tutorials/FibonacciAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/FibonacciActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/FibonacciActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/FibonacciActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "FibonacciActionGoal action_goal",
                        "3": "FibonacciActionResult action_result",
                        "4": "FibonacciActionFeedback action_feedback"
                }
        },
        "actionlib_tutorials/FibonacciActionFeedback": {
                "name": "actionlib_tutorials/FibonacciActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/FibonacciFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "FibonacciFeedback feedback"
                }
        },
        "actionlib_tutorials/FibonacciActionGoal": {
                "name": "actionlib_tutorials/FibonacciActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/FibonacciGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "FibonacciGoal goal"
                }
        },
        "actionlib_tutorials/FibonacciActionResult": {
                "name": "actionlib_tutorials/FibonacciActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "actionlib_tutorials/FibonacciResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "FibonacciResult result"
                }
        },
        "actionlib_tutorials/FibonacciFeedback": {
                "name": "actionlib_tutorials/FibonacciFeedback",
                "elementType": "messageType",
                "fields": {
                        "sequence": {
                                "name": "sequence",
                                "elementType": "dataType",
                                "storageType": "int32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "#feedback",
                        "2": "int32[] sequence",
                        "3": ""
                }
        },
        "actionlib_tutorials/FibonacciGoal": {
                "name": "actionlib_tutorials/FibonacciGoal",
                "elementType": "messageType",
                "fields": {
                        "order": {
                                "name": "order",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "#goal definition",
                        "2": "int32 order"
                }
        },
        "actionlib_tutorials/FibonacciResult": {
                "name": "actionlib_tutorials/FibonacciResult",
                "elementType": "messageType",
                "fields": {
                        "sequence": {
                                "name": "sequence",
                                "elementType": "dataType",
                                "storageType": "int32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "#result definition",
                        "2": "int32[] sequence"
                }
        },
        "bond/Constants": {
                "name": "bond/Constants",
                "elementType": "messageType",
                "fields": {
                        "DEAD_PUBLISH_PERIOD=0.05": {
                                "name": "DEAD_PUBLISH_PERIOD=0.05",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "DEFAULT_CONNECT_TIMEOUT=10.0": {
                                "name": "DEFAULT_CONNECT_TIMEOUT=10.0",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "DEFAULT_HEARTBEAT_TIMEOUT=4.0": {
                                "name": "DEFAULT_HEARTBEAT_TIMEOUT=4.0",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "DEFAULT_DISCONNECT_TIMEOUT=2.0": {
                                "name": "DEFAULT_DISCONNECT_TIMEOUT=2.0",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "DEFAULT_HEARTBEAT_PERIOD=1.0": {
                                "name": "DEFAULT_HEARTBEAT_PERIOD=1.0",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "DISABLE_HEARTBEAT_TIMEOUT_PARAM=/bond_disable_heartbeat_timeout": {
                                "name": "DISABLE_HEARTBEAT_TIMEOUT_PARAM=/bond_disable_heartbeat_timeout",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "float32 DEAD_PUBLISH_PERIOD = 0.05",
                        "1": "float32 DEFAULT_CONNECT_TIMEOUT = 10.0",
                        "2": "float32 DEFAULT_HEARTBEAT_TIMEOUT = 4.0",
                        "3": "float32 DEFAULT_DISCONNECT_TIMEOUT = 2.0",
                        "4": "float32 DEFAULT_HEARTBEAT_PERIOD = 1.0",
                        "5": "",
                        "6": "string DISABLE_HEARTBEAT_TIMEOUT_PARAM=/bond_disable_heartbeat_timeou"
                }
        },
        "bond/Status": {
                "name": "bond/Status",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "id": {
                                "name": "id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "instance_id": {
                                "name": "instance_id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "active": {
                                "name": "active",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "heartbeat_timeout": {
                                "name": "heartbeat_timeout",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "heartbeat_period": {
                                "name": "heartbeat_period",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header",
                        "1": "string id  # ID of the bond",
                        "2": "string instance_id  # Unique ID for an individual in a bond",
                        "3": "bool active",
                        "4": "",
                        "5": "# Including the timeouts for the bond makes it easier to debug mis-matches",
                        "6": "# between the two sides.",
                        "7": "float32 heartbeat_timeout",
                        "8": "float32 heartbeat_perio"
                }
        },
        "control_msgs/FollowJointTrajectoryAction": {
                "name": "control_msgs/FollowJointTrajectoryAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "control_msgs/FollowJointTrajectoryActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "control_msgs/FollowJointTrajectoryActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "control_msgs/FollowJointTrajectoryActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "FollowJointTrajectoryActionGoal action_goal",
                        "3": "FollowJointTrajectoryActionResult action_result",
                        "4": "FollowJointTrajectoryActionFeedback action_feedback"
                }
        },
        "control_msgs/FollowJointTrajectoryActionFeedback": {
                "name": "control_msgs/FollowJointTrajectoryActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "control_msgs/FollowJointTrajectoryFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "FollowJointTrajectoryFeedback feedback"
                }
        },
        "control_msgs/FollowJointTrajectoryActionGoal": {
                "name": "control_msgs/FollowJointTrajectoryActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "control_msgs/FollowJointTrajectoryGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "FollowJointTrajectoryGoal goal"
                }
        },
        "control_msgs/FollowJointTrajectoryActionResult": {
                "name": "control_msgs/FollowJointTrajectoryActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "control_msgs/FollowJointTrajectoryResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "FollowJointTrajectoryResult result"
                }
        },
        "control_msgs/FollowJointTrajectoryFeedback": {
                "name": "control_msgs/FollowJointTrajectoryFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "joint_names": {
                                "name": "joint_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "desired": {
                                "name": "desired",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/JointTrajectoryPoint",
                                "dmfDataType": "TBD"
                        },
                        "actual": {
                                "name": "actual",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/JointTrajectoryPoint",
                                "dmfDataType": "TBD"
                        },
                        "error": {
                                "name": "error",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/JointTrajectoryPoint",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "Header header",
                        "2": "string[] joint_names",
                        "3": "trajectory_msgs/JointTrajectoryPoint desired",
                        "4": "trajectory_msgs/JointTrajectoryPoint actual",
                        "5": "trajectory_msgs/JointTrajectoryPoint error",
                        "6": ""
                }
        },
        "control_msgs/FollowJointTrajectoryGoal": {
                "name": "control_msgs/FollowJointTrajectoryGoal",
                "elementType": "messageType",
                "fields": {
                        "trajectory": {
                                "name": "trajectory",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/JointTrajectory",
                                "dmfDataType": "TBD"
                        },
                        "path_tolerance": {
                                "name": "path_tolerance",
                                "elementType": "messageType",
                                "type": "control_msgs/JointTolerance[]",
                                "dmfDataType": "TBD"
                        },
                        "goal_tolerance": {
                                "name": "goal_tolerance",
                                "elementType": "messageType",
                                "type": "control_msgs/JointTolerance[]",
                                "dmfDataType": "TBD"
                        },
                        "goal_time_tolerance": {
                                "name": "goal_time_tolerance",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "# The joint trajectory to follow",
                        "2": "trajectory_msgs/JointTrajectory trajectory",
                        "3": "",
                        "4": "# Tolerances for the trajectory.  If the measured joint values fall",
                        "5": "# outside the tolerances the trajectory goal is aborted.  Any",
                        "6": "# tolerances that are not specified (by being omitted or set to 0) are",
                        "7": "# set to the defaults for the action server (often taken from the",
                        "8": "# parameter server).",
                        "9": "",
                        "10": "# Tolerances applied to the joints as the trajectory is executed.  If",
                        "11": "# violated, the goal aborts with error_code set to",
                        "12": "# PATH_TOLERANCE_VIOLATED.",
                        "13": "JointTolerance[] path_tolerance",
                        "14": "",
                        "15": "# To report success, the joints must be within goal_tolerance of the",
                        "16": "# final trajectory value.  The goal must be achieved by time the",
                        "17": "# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance",
                        "18": "# allows some leeway in time, so that the trajectory goal can still",
                        "19": "# succeed even if the joints reach the goal some time after the",
                        "20": "# precise end time of the trajectory).",
                        "21": "#",
                        "22": "# If the joints are not within goal_tolerance after \"trajectory finish",
                        "23": "# time\" + goal_time_tolerance, the goal aborts with error_code set to",
                        "24": "# GOAL_TOLERANCE_VIOLATED",
                        "25": "JointTolerance[] goal_tolerance",
                        "26": "duration goal_time_tolerance",
                        "27": ""
                }
        },
        "control_msgs/FollowJointTrajectoryResult": {
                "name": "control_msgs/FollowJointTrajectoryResult",
                "elementType": "messageType",
                "fields": {
                        "SUCCESSFUL=0": {
                                "name": "SUCCESSFUL=0",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "INVALID_GOAL=-1": {
                                "name": "INVALID_GOAL=-1",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "INVALID_JOINTS=-2": {
                                "name": "INVALID_JOINTS=-2",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "OLD_HEADER_TIMESTAMP=-3": {
                                "name": "OLD_HEADER_TIMESTAMP=-3",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "PATH_TOLERANCE_VIOLATED=-4": {
                                "name": "PATH_TOLERANCE_VIOLATED=-4",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "GOAL_TOLERANCE_VIOLATED=-5": {
                                "name": "GOAL_TOLERANCE_VIOLATED=-5",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "error_code": {
                                "name": "error_code",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "error_string": {
                                "name": "error_string",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "int32 error_code",
                        "2": "int32 SUCCESSFUL = 0",
                        "3": "int32 INVALID_GOAL = -1",
                        "4": "int32 INVALID_JOINTS = -2",
                        "5": "int32 OLD_HEADER_TIMESTAMP = -3",
                        "6": "int32 PATH_TOLERANCE_VIOLATED = -4",
                        "7": "int32 GOAL_TOLERANCE_VIOLATED = -5",
                        "8": "",
                        "9": "# Human readable description of the error code. Contains complementary",
                        "10": "# information that is especially useful when execution fails, for instance:",
                        "11": "# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested",
                        "12": "#   trajectory is in the past).",
                        "13": "# - INVALID_JOINTS: The mismatch between the expected controller joints",
                        "14": "#   and those provided in the goal.",
                        "15": "# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint",
                        "16": "#   violated which tolerance, and by how much.",
                        "17": "string error_string",
                        "18": ""
                }
        },
        "control_msgs/GripperCommand": {
                "name": "control_msgs/GripperCommand",
                "elementType": "messageType",
                "fields": {
                        "position": {
                                "name": "position",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "max_effort": {
                                "name": "max_effort",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "float64 position",
                        "1": "float64 max_effort"
                }
        },
        "control_msgs/GripperCommandAction": {
                "name": "control_msgs/GripperCommandAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "control_msgs/GripperCommandActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "control_msgs/GripperCommandActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "control_msgs/GripperCommandActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "GripperCommandActionGoal action_goal",
                        "3": "GripperCommandActionResult action_result",
                        "4": "GripperCommandActionFeedback action_feedback"
                }
        },
        "control_msgs/GripperCommandActionFeedback": {
                "name": "control_msgs/GripperCommandActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "control_msgs/GripperCommandFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "GripperCommandFeedback feedback"
                }
        },
        "control_msgs/GripperCommandActionGoal": {
                "name": "control_msgs/GripperCommandActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "control_msgs/GripperCommandGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "GripperCommandGoal goal"
                }
        },
        "control_msgs/GripperCommandActionResult": {
                "name": "control_msgs/GripperCommandActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "control_msgs/GripperCommandResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "GripperCommandResult result"
                }
        },
        "control_msgs/GripperCommandFeedback": {
                "name": "control_msgs/GripperCommandFeedback",
                "elementType": "messageType",
                "fields": {
                        "position": {
                                "name": "position",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "effort": {
                                "name": "effort",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "stalled": {
                                "name": "stalled",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "reached_goal": {
                                "name": "reached_goal",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "float64 position  # The current gripper gap size (in meters)",
                        "2": "float64 effort    # The current effort exerted (in Newtons)",
                        "3": "bool stalled      # True iff the gripper is exerting max effort and not moving",
                        "4": "bool reached_goal # True iff the gripper position has reached the commanded setpoint",
                        "5": ""
                }
        },
        "control_msgs/GripperCommandGoal": {
                "name": "control_msgs/GripperCommandGoal",
                "elementType": "messageType",
                "fields": {
                        "command": {
                                "name": "command",
                                "elementType": "messageType",
                                "type": "control_msgs/GripperCommand",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "GripperCommand command"
                }
        },
        "control_msgs/GripperCommandResult": {
                "name": "control_msgs/GripperCommandResult",
                "elementType": "messageType",
                "fields": {
                        "position": {
                                "name": "position",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "effort": {
                                "name": "effort",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "stalled": {
                                "name": "stalled",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "reached_goal": {
                                "name": "reached_goal",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "float64 position  # The current gripper gap size (in meters)",
                        "2": "float64 effort    # The current effort exerted (in Newtons)",
                        "3": "bool stalled      # True iff the gripper is exerting max effort and not moving",
                        "4": "bool reached_goal # True iff the gripper position has reached the commanded setpoint"
                }
        },
        "control_msgs/JointControllerState": {
                "name": "control_msgs/JointControllerState",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "set_point": {
                                "name": "set_point",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "process_value": {
                                "name": "process_value",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "process_value_dot": {
                                "name": "process_value_dot",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "error": {
                                "name": "error",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "time_step": {
                                "name": "time_step",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "command": {
                                "name": "command",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "p": {
                                "name": "p",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "i": {
                                "name": "i",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "d": {
                                "name": "d",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "i_clamp": {
                                "name": "i_clamp",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "antiwindup": {
                                "name": "antiwindup",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message presents current controller state of one joint.",
                        "1": "",
                        "2": "# Header timestamp should be update time of controller state",
                        "3": "Header header",
                        "4": "",
                        "5": "# The set point, that is, desired state.",
                        "6": "float64 set_point",
                        "7": "",
                        "8": "# Current value of the process (ie: latest sensor measurement on the controlled value).",
                        "9": "float64 process_value",
                        "10": "",
                        "11": "# First time-derivative of the process value.",
                        "12": "float64 process_value_dot",
                        "13": "",
                        "14": "# The error of the controlled value, essentially process_value - set_point (for a regular PID implementation).",
                        "15": "float64 error",
                        "16": "",
                        "17": "# Time between two consecutive updates/execution of the control law.",
                        "18": "float64 time_step",
                        "19": "",
                        "20": "# Current output of the controller.",
                        "21": "float64 command",
                        "22": "",
                        "23": "# Current PID parameters of the controller.",
                        "24": "float64 p",
                        "25": "float64 i",
                        "26": "float64 d",
                        "27": "float64 i_clamp",
                        "28": "bool antiwindup"
                }
        },
        "control_msgs/JointJog": {
                "name": "control_msgs/JointJog",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "joint_names": {
                                "name": "joint_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "displacements": {
                                "name": "displacements",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "velocities": {
                                "name": "velocities",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "duration": {
                                "name": "duration",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Used in time-stamping the message.",
                        "1": "Header header",
                        "2": "",
                        "3": "# Name list of the joints. You don't need to specify all joints of the",
                        "4": "# robot. Joint names are case-sensitive.",
                        "5": "string[] joint_names",
                        "6": "",
                        "7": "# A position command to the joints listed in joint_names.",
                        "8": "# The order must be identical.",
                        "9": "# Units are meters or radians.",
                        "10": "# If displacements and velocities are filled, a profiled motion is requested.",
                        "11": "float64[] displacements # or position_deltas",
                        "12": "",
                        "13": "# A velocity command to the joints listed in joint_names.",
                        "14": "# The order must be identical.",
                        "15": "# Units are m/s or rad/s.",
                        "16": "# If displacements and velocities are filled, a profiled motion is requested.",
                        "17": "float64[] velocities",
                        "18": "",
                        "19": "float64 duration"
                }
        },
        "control_msgs/JointTolerance": {
                "name": "control_msgs/JointTolerance",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "position": {
                                "name": "position",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "velocity": {
                                "name": "velocity",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "acceleration": {
                                "name": "acceleration",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# The tolerances specify the amount the position, velocity, and",
                        "1": "# accelerations can vary from the setpoints.  For example, in the case",
                        "2": "# of trajectory control, when the actual position varies beyond",
                        "3": "# (desired position + position tolerance), the trajectory goal may",
                        "4": "# abort.",
                        "5": "# ",
                        "6": "# There are two special values for tolerances:",
                        "7": "#  * 0 - The tolerance is unspecified and will remain at whatever the default is",
                        "8": "#  * -1 - The tolerance is \"erased\".  If there was a default, the joint will be",
                        "9": "#         allowed to move without restriction.",
                        "10": "",
                        "11": "string name",
                        "12": "float64 position  # in radians or meters (for a revolute or prismatic joint, respectively)",
                        "13": "float64 velocity  # in rad/sec or m/sec",
                        "14": "float64 acceleration  # in rad/sec^2 or m/sec^2"
                }
        },
        "control_msgs/JointTrajectoryAction": {
                "name": "control_msgs/JointTrajectoryAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "control_msgs/JointTrajectoryActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "control_msgs/JointTrajectoryActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "control_msgs/JointTrajectoryActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "JointTrajectoryActionGoal action_goal",
                        "3": "JointTrajectoryActionResult action_result",
                        "4": "JointTrajectoryActionFeedback action_feedback"
                }
        },
        "control_msgs/JointTrajectoryActionFeedback": {
                "name": "control_msgs/JointTrajectoryActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "control_msgs/JointTrajectoryFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "JointTrajectoryFeedback feedback"
                }
        },
        "control_msgs/JointTrajectoryActionGoal": {
                "name": "control_msgs/JointTrajectoryActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "control_msgs/JointTrajectoryGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "JointTrajectoryGoal goal"
                }
        },
        "control_msgs/JointTrajectoryActionResult": {
                "name": "control_msgs/JointTrajectoryActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "control_msgs/JointTrajectoryResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "JointTrajectoryResult result"
                }
        },
        "control_msgs/JointTrajectoryControllerState": {
                "name": "control_msgs/JointTrajectoryControllerState",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "joint_names": {
                                "name": "joint_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "desired": {
                                "name": "desired",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/JointTrajectoryPoint",
                                "dmfDataType": "TBD"
                        },
                        "actual": {
                                "name": "actual",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/JointTrajectoryPoint",
                                "dmfDataType": "TBD"
                        },
                        "error": {
                                "name": "error",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/JointTrajectoryPoint",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header",
                        "1": "string[] joint_names",
                        "2": "trajectory_msgs/JointTrajectoryPoint desired",
                        "3": "trajectory_msgs/JointTrajectoryPoint actual",
                        "4": "trajectory_msgs/JointTrajectoryPoint error  # Redundant, but useful"
                }
        },
        "control_msgs/JointTrajectoryFeedback": {
                "name": "control_msgs/JointTrajectoryFeedback",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": ""
                }
        },
        "control_msgs/JointTrajectoryGoal": {
                "name": "control_msgs/JointTrajectoryGoal",
                "elementType": "messageType",
                "fields": {
                        "trajectory": {
                                "name": "trajectory",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/JointTrajectory",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "trajectory_msgs/JointTrajectory trajectory"
                }
        },
        "control_msgs/JointTrajectoryResult": {
                "name": "control_msgs/JointTrajectoryResult",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======"
                }
        },
        "control_msgs/PidState": {
                "name": "control_msgs/PidState",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "timestep": {
                                "name": "timestep",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "error": {
                                "name": "error",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "error_dot": {
                                "name": "error_dot",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "p_error": {
                                "name": "p_error",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "i_error": {
                                "name": "i_error",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "d_error": {
                                "name": "d_error",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "p_term": {
                                "name": "p_term",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "i_term": {
                                "name": "i_term",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "d_term": {
                                "name": "d_term",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "i_max": {
                                "name": "i_max",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "i_min": {
                                "name": "i_min",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "output": {
                                "name": "output",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header",
                        "1": "duration timestep",
                        "2": "float64 error",
                        "3": "float64 error_dot",
                        "4": "float64 p_error",
                        "5": "float64 i_error",
                        "6": "float64 d_error",
                        "7": "float64 p_term",
                        "8": "float64 i_term",
                        "9": "float64 d_term",
                        "10": "float64 i_max",
                        "11": "float64 i_min",
                        "12": "float64 output"
                }
        },
        "control_msgs/PointHeadAction": {
                "name": "control_msgs/PointHeadAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "control_msgs/PointHeadActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "control_msgs/PointHeadActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "control_msgs/PointHeadActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "PointHeadActionGoal action_goal",
                        "3": "PointHeadActionResult action_result",
                        "4": "PointHeadActionFeedback action_feedback"
                }
        },
        "control_msgs/PointHeadActionFeedback": {
                "name": "control_msgs/PointHeadActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "control_msgs/PointHeadFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "PointHeadFeedback feedback"
                }
        },
        "control_msgs/PointHeadActionGoal": {
                "name": "control_msgs/PointHeadActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "control_msgs/PointHeadGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "PointHeadGoal goal"
                }
        },
        "control_msgs/PointHeadActionResult": {
                "name": "control_msgs/PointHeadActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "control_msgs/PointHeadResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "PointHeadResult result"
                }
        },
        "control_msgs/PointHeadFeedback": {
                "name": "control_msgs/PointHeadFeedback",
                "elementType": "messageType",
                "fields": {
                        "pointing_angle_error": {
                                "name": "pointing_angle_error",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "float64 pointing_angle_error",
                        "2": ""
                }
        },
        "control_msgs/PointHeadGoal": {
                "name": "control_msgs/PointHeadGoal",
                "elementType": "messageType",
                "fields": {
                        "target": {
                                "name": "target",
                                "elementType": "messageType",
                                "type": "geometry_msgs/PointStamped",
                                "dmfDataType": "TBD"
                        },
                        "pointing_axis": {
                                "name": "pointing_axis",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "pointing_frame": {
                                "name": "pointing_frame",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "min_duration": {
                                "name": "min_duration",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "max_velocity": {
                                "name": "max_velocity",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "geometry_msgs/PointStamped target",
                        "2": "geometry_msgs/Vector3 pointing_axis",
                        "3": "string pointing_frame",
                        "4": "duration min_duration",
                        "5": "float64 max_velocity"
                }
        },
        "control_msgs/PointHeadResult": {
                "name": "control_msgs/PointHeadResult",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======"
                }
        },
        "control_msgs/SingleJointPositionAction": {
                "name": "control_msgs/SingleJointPositionAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "control_msgs/SingleJointPositionActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "control_msgs/SingleJointPositionActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "control_msgs/SingleJointPositionActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "SingleJointPositionActionGoal action_goal",
                        "3": "SingleJointPositionActionResult action_result",
                        "4": "SingleJointPositionActionFeedback action_feedback"
                }
        },
        "control_msgs/SingleJointPositionActionFeedback": {
                "name": "control_msgs/SingleJointPositionActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "control_msgs/SingleJointPositionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "SingleJointPositionFeedback feedback"
                }
        },
        "control_msgs/SingleJointPositionActionGoal": {
                "name": "control_msgs/SingleJointPositionActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "control_msgs/SingleJointPositionGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "SingleJointPositionGoal goal"
                }
        },
        "control_msgs/SingleJointPositionActionResult": {
                "name": "control_msgs/SingleJointPositionActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "control_msgs/SingleJointPositionResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "SingleJointPositionResult result"
                }
        },
        "control_msgs/SingleJointPositionFeedback": {
                "name": "control_msgs/SingleJointPositionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "position": {
                                "name": "position",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "velocity": {
                                "name": "velocity",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "error": {
                                "name": "error",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "Header header",
                        "2": "float64 position",
                        "3": "float64 velocity",
                        "4": "float64 error",
                        "5": ""
                }
        },
        "control_msgs/SingleJointPositionGoal": {
                "name": "control_msgs/SingleJointPositionGoal",
                "elementType": "messageType",
                "fields": {
                        "position": {
                                "name": "position",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "min_duration": {
                                "name": "min_duration",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "max_velocity": {
                                "name": "max_velocity",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "float64 position",
                        "2": "duration min_duration",
                        "3": "float64 max_velocity"
                }
        },
        "control_msgs/SingleJointPositionResult": {
                "name": "control_msgs/SingleJointPositionResult",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======"
                }
        },
        "controller_manager_msgs/ControllerState": {
                "name": "controller_manager_msgs/ControllerState",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "state": {
                                "name": "state",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "claimed_resources": {
                                "name": "claimed_resources",
                                "elementType": "messageType",
                                "type": "controller_manager_msgs/HardwareInterfaceResources[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string name",
                        "1": "string state",
                        "2": "string type",
                        "3": "controller_manager_msgs/HardwareInterfaceResources[] claimed_resources"
                }
        },
        "controller_manager_msgs/ControllerStatistics": {
                "name": "controller_manager_msgs/ControllerStatistics",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "timestamp": {
                                "name": "timestamp",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "running": {
                                "name": "running",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "max_time": {
                                "name": "max_time",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "mean_time": {
                                "name": "mean_time",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "variance_time": {
                                "name": "variance_time",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "num_control_loop_overruns": {
                                "name": "num_control_loop_overruns",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "time_last_control_loop_overrun": {
                                "name": "time_last_control_loop_overrun",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message contains the state of one realtime controller",
                        "1": "# that was spawned in the controller manager",
                        "2": "",
                        "3": "# the name of the controller",
                        "4": "string name",
                        "5": "",
                        "6": "# the type of the controller",
                        "7": "string type",
                        "8": "",
                        "9": "# the time at which these controller statistics were measured",
                        "10": "time timestamp",
                        "11": "",
                        "12": "# bool that indicates if the controller is currently",
                        "13": "# in a running or a stopped state",
                        "14": "bool running",
                        "15": "",
                        "16": "# the maximum time the update loop of the controller ever needed to complete",
                        "17": "duration max_time",
                        "18": "",
                        "19": "# the average time the update loop of the controller needs to complete.",
                        "20": "# the average is computed in a sliding time window.",
                        "21": "duration mean_time",
                        "22": "",
                        "23": "# the variance on the time the update loop of the controller needs to complete.",
                        "24": "# the variance applies to a sliding time window.",
                        "25": "duration variance_time",
                        "26": "",
                        "27": "# the number of times this controller broke the realtime loop",
                        "28": "int32 num_control_loop_overruns",
                        "29": "",
                        "30": "# the timestamp of the last time this controller broke the realtime loop",
                        "31": "time time_last_control_loop_overru"
                }
        },
        "controller_manager_msgs/ControllersStatistics": {
                "name": "controller_manager_msgs/ControllersStatistics",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "controller": {
                                "name": "controller",
                                "elementType": "messageType",
                                "type": "controller_manager_msgs/ControllerStatistics[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "std_msgs/Header header",
                        "1": "controller_manager_msgs/ControllerStatistics[] controller"
                }
        },
        "controller_manager_msgs/HardwareInterfaceResources": {
                "name": "controller_manager_msgs/HardwareInterfaceResources",
                "elementType": "messageType",
                "fields": {
                        "hardware_interface": {
                                "name": "hardware_interface",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "resources": {
                                "name": "resources",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Type of hardware interface",
                        "1": "string hardware_interface",
                        "2": "# List of resources belonging to the hardware interface",
                        "3": "string[] resources"
                }
        },
        "diagnostic_msgs/DiagnosticArray": {
                "name": "diagnostic_msgs/DiagnosticArray",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "diagnostic_msgs/DiagnosticStatus[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message is used to send diagnostic information about the state of the robot",
                        "1": "Header header #for timestamp",
                        "2": "DiagnosticStatus[] status # an array of components being reported o"
                }
        },
        "diagnostic_msgs/DiagnosticStatus": {
                "name": "diagnostic_msgs/DiagnosticStatus",
                "elementType": "messageType",
                "fields": {
                        "OK=0": {
                                "name": "OK=0",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "WARN=1": {
                                "name": "WARN=1",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "ERROR=2": {
                                "name": "ERROR=2",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "STALE=3": {
                                "name": "STALE=3",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "level": {
                                "name": "level",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "message": {
                                "name": "message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "hardware_id": {
                                "name": "hardware_id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "values": {
                                "name": "values",
                                "elementType": "messageType",
                                "type": "diagnostic_msgs/KeyValue[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message holds the status of an individual component of the robot.",
                        "1": "# ",
                        "2": "",
                        "3": "# Possible levels of operations",
                        "4": "byte OK=0",
                        "5": "byte WARN=1",
                        "6": "byte ERROR=2",
                        "7": "byte STALE=3",
                        "8": "",
                        "9": "byte level # level of operation enumerated above ",
                        "10": "string name # a description of the test/component reporting",
                        "11": "string message # a description of the status",
                        "12": "string hardware_id # a hardware unique string",
                        "13": "KeyValue[] values # an array of values associated with the status",
                        "14": ""
                }
        },
        "diagnostic_msgs/KeyValue": {
                "name": "diagnostic_msgs/KeyValue",
                "elementType": "messageType",
                "fields": {
                        "key": {
                                "name": "key",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "value": {
                                "name": "value",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string key # what to label this value when viewing",
                        "1": "string value # a value to track over time"
                }
        },
        "dynamic_reconfigure/BoolParameter": {
                "name": "dynamic_reconfigure/BoolParameter",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "value": {
                                "name": "value",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string name",
                        "1": "bool value"
                }
        },
        "dynamic_reconfigure/Config": {
                "name": "dynamic_reconfigure/Config",
                "elementType": "messageType",
                "fields": {
                        "bools": {
                                "name": "bools",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/BoolParameter[]",
                                "dmfDataType": "TBD"
                        },
                        "ints": {
                                "name": "ints",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/IntParameter[]",
                                "dmfDataType": "TBD"
                        },
                        "strs": {
                                "name": "strs",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/StrParameter[]",
                                "dmfDataType": "TBD"
                        },
                        "doubles": {
                                "name": "doubles",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/DoubleParameter[]",
                                "dmfDataType": "TBD"
                        },
                        "groups": {
                                "name": "groups",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/GroupState[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "BoolParameter[] bools",
                        "1": "IntParameter[] ints",
                        "2": "StrParameter[] strs",
                        "3": "DoubleParameter[] doubles",
                        "4": "GroupState[] groups"
                }
        },
        "dynamic_reconfigure/ConfigDescription": {
                "name": "dynamic_reconfigure/ConfigDescription",
                "elementType": "messageType",
                "fields": {
                        "groups": {
                                "name": "groups",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/Group[]",
                                "dmfDataType": "TBD"
                        },
                        "max": {
                                "name": "max",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/Config",
                                "dmfDataType": "TBD"
                        },
                        "min": {
                                "name": "min",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/Config",
                                "dmfDataType": "TBD"
                        },
                        "dflt": {
                                "name": "dflt",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/Config",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Group[] groups",
                        "1": "Config max",
                        "2": "Config min",
                        "3": "Config dflt"
                }
        },
        "dynamic_reconfigure/DoubleParameter": {
                "name": "dynamic_reconfigure/DoubleParameter",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "value": {
                                "name": "value",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string name",
                        "1": "float64 value"
                }
        },
        "dynamic_reconfigure/Group": {
                "name": "dynamic_reconfigure/Group",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "parameters": {
                                "name": "parameters",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/ParamDescription[]",
                                "dmfDataType": "TBD"
                        },
                        "parent": {
                                "name": "parent",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "id": {
                                "name": "id",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string name",
                        "1": "string type",
                        "2": "ParamDescription[] parameters",
                        "3": "int32 parent ",
                        "4": "int32 id"
                }
        },
        "dynamic_reconfigure/GroupState": {
                "name": "dynamic_reconfigure/GroupState",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "state": {
                                "name": "state",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "id": {
                                "name": "id",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "parent": {
                                "name": "parent",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string name",
                        "1": "bool state",
                        "2": "int32 id",
                        "3": "int32 parent"
                }
        },
        "dynamic_reconfigure/IntParameter": {
                "name": "dynamic_reconfigure/IntParameter",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "value": {
                                "name": "value",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string name",
                        "1": "int32 value"
                }
        },
        "dynamic_reconfigure/ParamDescription": {
                "name": "dynamic_reconfigure/ParamDescription",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "level": {
                                "name": "level",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "description": {
                                "name": "description",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "edit_method": {
                                "name": "edit_method",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string name",
                        "1": "string type",
                        "2": "uint32 level",
                        "3": "string description",
                        "4": "string edit_method"
                }
        },
        "dynamic_reconfigure/SensorLevels": {
                "name": "dynamic_reconfigure/SensorLevels",
                "elementType": "messageType",
                "fields": {
                        "RECONFIGURE_CLOSE=3": {
                                "name": "RECONFIGURE_CLOSE=3",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "RECONFIGURE_STOP=1": {
                                "name": "RECONFIGURE_STOP=1",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "RECONFIGURE_RUNNING=0": {
                                "name": "RECONFIGURE_RUNNING=0",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message is deprecated, please use driver_base/SensorLevels instead.",
                        "1": "",
                        "2": "byte RECONFIGURE_CLOSE = 3  # Parameters that need a sensor to be stopped completely when changed",
                        "3": "byte RECONFIGURE_STOP = 1  # Parameters that need a sensor to stop streaming when changed",
                        "4": "byte RECONFIGURE_RUNNING = 0 # Parameters that can be changed while a sensor is streaming"
                }
        },
        "dynamic_reconfigure/StrParameter": {
                "name": "dynamic_reconfigure/StrParameter",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "value": {
                                "name": "value",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string name",
                        "1": "string value"
                }
        },
        "gazebo_msgs/ContactState": {
                "name": "gazebo_msgs/ContactState",
                "elementType": "messageType",
                "fields": {
                        "info": {
                                "name": "info",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "collision1_name": {
                                "name": "collision1_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "collision2_name": {
                                "name": "collision2_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "wrenches": {
                                "name": "wrenches",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Wrench[]",
                                "dmfDataType": "TBD"
                        },
                        "total_wrench": {
                                "name": "total_wrench",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Wrench",
                                "dmfDataType": "TBD"
                        },
                        "contact_positions": {
                                "name": "contact_positions",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3[]",
                                "dmfDataType": "TBD"
                        },
                        "contact_normals": {
                                "name": "contact_normals",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3[]",
                                "dmfDataType": "TBD"
                        },
                        "depths": {
                                "name": "depths",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string info                                   # text info on this contact",
                        "1": "string collision1_name                        # name of contact collision1",
                        "2": "string collision2_name                        # name of contact collision2",
                        "3": "geometry_msgs/Wrench[] wrenches               # list of forces/torques",
                        "4": "geometry_msgs/Wrench total_wrench             # sum of forces/torques in every DOF",
                        "5": "geometry_msgs/Vector3[] contact_positions     # list of contact position",
                        "6": "geometry_msgs/Vector3[] contact_normals       # list of contact normals",
                        "7": "float64[] depths                              # list of penetration depths"
                }
        },
        "gazebo_msgs/ContactsState": {
                "name": "gazebo_msgs/ContactsState",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "states": {
                                "name": "states",
                                "elementType": "messageType",
                                "type": "gazebo_msgs/ContactState[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header                                   # stamp",
                        "1": "gazebo_msgs/ContactState[] states            # array of geom pairs in contact"
                }
        },
        "gazebo_msgs/LinkState": {
                "name": "gazebo_msgs/LinkState",
                "elementType": "messageType",
                "fields": {
                        "link_name": {
                                "name": "link_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist",
                                "dmfDataType": "TBD"
                        },
                        "reference_frame": {
                                "name": "reference_frame",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# @todo: FIXME: sets pose and twist of a link.  All children link poses/twists of the URDF tree are not updated accordingly, but should be.",
                        "1": "string link_name            # link name, link_names are in gazebo scoped name notation, [model_name::body_name]",
                        "2": "geometry_msgs/Pose pose     # desired pose in reference frame",
                        "3": "geometry_msgs/Twist twist   # desired twist in reference frame",
                        "4": "string reference_frame      # set pose/twist relative to the frame of this link/body",
                        "5": "                            # leave empty or \"world\" or \"map\" defaults to world-frame"
                }
        },
        "gazebo_msgs/LinkStates": {
                "name": "gazebo_msgs/LinkStates",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose[]",
                                "dmfDataType": "TBD"
                        },
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# broadcast all link states in world frame",
                        "1": "string[] name                 # link names",
                        "2": "geometry_msgs/Pose[] pose     # desired pose in world frame",
                        "3": "geometry_msgs/Twist[] twist   # desired twist in world frame"
                }
        },
        "gazebo_msgs/ModelState": {
                "name": "gazebo_msgs/ModelState",
                "elementType": "messageType",
                "fields": {
                        "model_name": {
                                "name": "model_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist",
                                "dmfDataType": "TBD"
                        },
                        "reference_frame": {
                                "name": "reference_frame",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Set Gazebo Model pose and twist",
                        "1": "string model_name           # model to set state (pose and twist)",
                        "2": "geometry_msgs/Pose pose     # desired pose in reference frame",
                        "3": "geometry_msgs/Twist twist   # desired twist in reference frame",
                        "4": "string reference_frame      # set pose/twist relative to the frame of this entity (Body/Model)",
                        "5": "                            # leave empty or \"world\" or \"map\" defaults to world-frame",
                        "6": ""
                }
        },
        "gazebo_msgs/ModelStates": {
                "name": "gazebo_msgs/ModelStates",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose[]",
                                "dmfDataType": "TBD"
                        },
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# broadcast all model states in world frame",
                        "1": "string[] name                 # model names",
                        "2": "geometry_msgs/Pose[] pose     # desired pose in world frame",
                        "3": "geometry_msgs/Twist[] twist   # desired twist in world frame"
                }
        },
        "gazebo_msgs/ODEJointProperties": {
                "name": "gazebo_msgs/ODEJointProperties",
                "elementType": "messageType",
                "fields": {
                        "damping": {
                                "name": "damping",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "hiStop": {
                                "name": "hiStop",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "loStop": {
                                "name": "loStop",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "erp": {
                                "name": "erp",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "cfm": {
                                "name": "cfm",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "stop_erp": {
                                "name": "stop_erp",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "stop_cfm": {
                                "name": "stop_cfm",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "fudge_factor": {
                                "name": "fudge_factor",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "fmax": {
                                "name": "fmax",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "vel": {
                                "name": "vel",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# access to low level joint properties, change these at your own risk",
                        "1": "float64[] damping             # joint damping",
                        "2": "float64[] hiStop              # joint limit",
                        "3": "float64[] loStop              # joint limit",
                        "4": "float64[] erp                 # set joint erp",
                        "5": "float64[] cfm                 # set joint cfm",
                        "6": "float64[] stop_erp            # set joint erp for joint limit \"contact\" joint",
                        "7": "float64[] stop_cfm            # set joint cfm for joint limit \"contact\" joint",
                        "8": "float64[] fudge_factor        # joint fudge_factor applied at limits, see ODE manual for info.",
                        "9": "float64[] fmax                # ode joint param fmax",
                        "10": "float64[] vel                 # ode joint param vel"
                }
        },
        "gazebo_msgs/ODEPhysics": {
                "name": "gazebo_msgs/ODEPhysics",
                "elementType": "messageType",
                "fields": {
                        "auto_disable_bodies": {
                                "name": "auto_disable_bodies",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "sor_pgs_precon_iters": {
                                "name": "sor_pgs_precon_iters",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "sor_pgs_iters": {
                                "name": "sor_pgs_iters",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "sor_pgs_w": {
                                "name": "sor_pgs_w",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "sor_pgs_rms_error_tol": {
                                "name": "sor_pgs_rms_error_tol",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "contact_surface_layer": {
                                "name": "contact_surface_layer",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "contact_max_correcting_vel": {
                                "name": "contact_max_correcting_vel",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "cfm": {
                                "name": "cfm",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "erp": {
                                "name": "erp",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "max_contacts": {
                                "name": "max_contacts",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "bool auto_disable_bodies           # enable auto disabling of bodies, default false",
                        "1": "uint32 sor_pgs_precon_iters        # preconditioning inner iterations when uisng projected Gauss Seidel",
                        "2": "uint32 sor_pgs_iters               # inner iterations when uisng projected Gauss Seidel",
                        "3": "float64 sor_pgs_w                  # relaxation parameter when using projected Gauss Seidel, 1 = no relaxation",
                        "4": "float64 sor_pgs_rms_error_tol      # rms error tolerance before stopping inner iterations",
                        "5": "float64 contact_surface_layer      # contact \"dead-band\" width",
                        "6": "float64 contact_max_correcting_vel # contact maximum correction velocity",
                        "7": "float64 cfm                        # global constraint force mixing",
                        "8": "float64 erp                        # global error reduction parameter",
                        "9": "uint32 max_contacts                # maximum contact joints between two geoms"
                }
        },
        "gazebo_msgs/WorldState": {
                "name": "gazebo_msgs/WorldState",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose[]",
                                "dmfDataType": "TBD"
                        },
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist[]",
                                "dmfDataType": "TBD"
                        },
                        "wrench": {
                                "name": "wrench",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Wrench[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This is a message that holds data necessary to reconstruct a snapshot of the world",
                        "1": "#",
                        "2": "# = Approach to Message Passing =",
                        "3": "# The state of the world is defined by either",
                        "4": "#   1. Inertial Model pose, twist",
                        "5": "#      * kinematic data - connectivity graph from Model to each Link",
                        "6": "#      * joint angles",
                        "7": "#      * joint velocities",
                        "8": "#      * Applied forces - Body wrench",
                        "9": "#        * relative transform from Body to each collision Geom",
                        "10": "# Or",
                        "11": "#   2. Inertial (absolute) Body pose, twist, wrench",
                        "12": "#      * relative transform from Body to each collision Geom - constant, so not sent over wire",
                        "13": "#      * back compute from canonical body info to get Model pose and twist.",
                        "14": "#",
                        "15": "# Chooing (2.) because it matches most physics engines out there",
                        "16": "#   and is simpler.",
                        "17": "#",
                        "18": "# = Future =",
                        "19": "# Consider impacts on using reduced coordinates / graph (parent/child links) approach",
                        "20": "#   constraint and physics solvers.",
                        "21": "#",
                        "22": "# = Application =",
                        "23": "# This message is used to do the following:",
                        "24": "#   * reconstruct the world and objects for sensor generation",
                        "25": "#   * stop / start simulation - need pose, twist, wrench of each body",
                        "26": "#   * collision detection - need pose of each collision geometry.  velocity/acceleration if",
                        "27": "#",
                        "28": "# = Assumptions =",
                        "29": "# Assuming that each (physics) processor node locally already has",
                        "30": "#   * collision information - Trimesh for Geoms, etc",
                        "31": "#   * relative transforms from Body to Geom - this is assumed to be fixed, do not send oved wire",
                        "32": "#   * inertial information - does not vary in time",
                        "33": "#   * visual information - does not vary in time",
                        "34": "#",
                        "35": "",
                        "36": "Header header",
                        "37": "",
                        "38": "string[] name",
                        "39": "geometry_msgs/Pose[] pose",
                        "40": "geometry_msgs/Twist[] twist",
                        "41": "geometry_msgs/Wrench[] wrench"
                }
        },
        "geometry_msgs/Accel": {
                "name": "geometry_msgs/Accel",
                "elementType": "messageType",
                "fields": {
                        "linear": {
                                "name": "linear",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "angular": {
                                "name": "angular",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This expresses acceleration in free space broken into its linear and angular parts.",
                        "1": "Vector3  linear",
                        "2": "Vector3  angular"
                }
        },
        "geometry_msgs/AccelStamped": {
                "name": "geometry_msgs/AccelStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "accel": {
                                "name": "accel",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Accel",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# An accel with reference coordinate frame and timestamp",
                        "1": "Header header",
                        "2": "Accel accel"
                }
        },
        "geometry_msgs/AccelWithCovariance": {
                "name": "geometry_msgs/AccelWithCovariance",
                "elementType": "messageType",
                "fields": {
                        "accel": {
                                "name": "accel",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Accel",
                                "dmfDataType": "TBD"
                        },
                        "covariance": {
                                "name": "covariance",
                                "elementType": "messageType",
                                "type": "float64[36]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This expresses acceleration in free space with uncertainty.",
                        "1": "",
                        "2": "Accel accel",
                        "3": "",
                        "4": "# Row-major representation of the 6x6 covariance matrix",
                        "5": "# The orientation parameters use a fixed-axis representation.",
                        "6": "# In order, the parameters are:",
                        "7": "# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)",
                        "8": "float64[36] covariance"
                }
        },
        "geometry_msgs/AccelWithCovarianceStamped": {
                "name": "geometry_msgs/AccelWithCovarianceStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "accel": {
                                "name": "accel",
                                "elementType": "messageType",
                                "type": "geometry_msgs/AccelWithCovariance",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents an estimated accel with reference coordinate frame and timestamp.",
                        "1": "Header header",
                        "2": "AccelWithCovariance accel"
                }
        },
        "geometry_msgs/Inertia": {
                "name": "geometry_msgs/Inertia",
                "elementType": "messageType",
                "fields": {
                        "m": {
                                "name": "m",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "com": {
                                "name": "com",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "ixx": {
                                "name": "ixx",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "ixy": {
                                "name": "ixy",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "ixz": {
                                "name": "ixz",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "iyy": {
                                "name": "iyy",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "iyz": {
                                "name": "iyz",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "izz": {
                                "name": "izz",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Mass [kg]",
                        "1": "float64 m",
                        "2": "",
                        "3": "# Center of mass [m]",
                        "4": "geometry_msgs/Vector3 com",
                        "5": "",
                        "6": "# Inertia Tensor [kg-m^2]",
                        "7": "#     | ixx ixy ixz |",
                        "8": "# I = | ixy iyy iyz |",
                        "9": "#     | ixz iyz izz |",
                        "10": "float64 ixx",
                        "11": "float64 ixy",
                        "12": "float64 ixz",
                        "13": "float64 iyy",
                        "14": "float64 iyz",
                        "15": "float64 izz"
                }
        },
        "geometry_msgs/InertiaStamped": {
                "name": "geometry_msgs/InertiaStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "inertia": {
                                "name": "inertia",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Inertia",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header",
                        "1": "Inertia inertia"
                }
        },
        "geometry_msgs/Point": {
                "name": "geometry_msgs/Point",
                "elementType": "messageType",
                "fields": {
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "z": {
                                "name": "z",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This contains the position of a point in free space",
                        "1": "float64 x",
                        "2": "float64 y",
                        "3": "float64 z"
                }
        },
        "geometry_msgs/Point32": {
                "name": "geometry_msgs/Point32",
                "elementType": "messageType",
                "fields": {
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "z": {
                                "name": "z",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This contains the position of a point in free space(with 32 bits of precision).",
                        "1": "# It is recommeded to use Point wherever possible instead of Point32.  ",
                        "2": "# ",
                        "3": "# This recommendation is to promote interoperability.  ",
                        "4": "#",
                        "5": "# This message is designed to take up less space when sending",
                        "6": "# lots of points at once, as in the case of a PointCloud.  ",
                        "7": "",
                        "8": "float32 x",
                        "9": "float32 y",
                        "10": "float32 "
                }
        },
        "geometry_msgs/PointStamped": {
                "name": "geometry_msgs/PointStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "point": {
                                "name": "point",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents a Point with reference coordinate frame and timestamp",
                        "1": "Header header",
                        "2": "Point point"
                }
        },
        "geometry_msgs/Polygon": {
                "name": "geometry_msgs/Polygon",
                "elementType": "messageType",
                "fields": {
                        "points": {
                                "name": "points",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "#A specification of a polygon where the first and last points are assumed to be connected",
                        "1": "Point32[] points"
                }
        },
        "geometry_msgs/PolygonStamped": {
                "name": "geometry_msgs/PolygonStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "polygon": {
                                "name": "polygon",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Polygon",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents a Polygon with reference coordinate frame and timestamp",
                        "1": "Header header",
                        "2": "Polygon polygon"
                }
        },
        "geometry_msgs/Pose": {
                "name": "geometry_msgs/Pose",
                "elementType": "messageType",
                "fields": {
                        "position": {
                                "name": "position",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point",
                                "dmfDataType": "TBD"
                        },
                        "orientation": {
                                "name": "orientation",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Quaternion",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# A representation of pose in free space, composed of position and orientation. ",
                        "1": "Point position",
                        "2": "Quaternion orientation"
                }
        },
        "geometry_msgs/Pose2D": {
                "name": "geometry_msgs/Pose2D",
                "elementType": "messageType",
                "fields": {
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "theta": {
                                "name": "theta",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Deprecated",
                        "1": "# Please use the full 3D pose.",
                        "2": "",
                        "3": "# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.",
                        "4": "",
                        "5": "# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.",
                        "6": "",
                        "7": "",
                        "8": "# This expresses a position and orientation on a 2D manifold.",
                        "9": "",
                        "10": "float64 x",
                        "11": "float64 y",
                        "12": "float64 theta"
                }
        },
        "geometry_msgs/PoseArray": {
                "name": "geometry_msgs/PoseArray",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "poses": {
                                "name": "poses",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# An array of poses with a header for global reference.",
                        "1": "",
                        "2": "Header header",
                        "3": "",
                        "4": "Pose[] poses"
                }
        },
        "geometry_msgs/PoseStamped": {
                "name": "geometry_msgs/PoseStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# A Pose with reference coordinate frame and timestamp",
                        "1": "Header header",
                        "2": "Pose pose"
                }
        },
        "geometry_msgs/PoseWithCovariance": {
                "name": "geometry_msgs/PoseWithCovariance",
                "elementType": "messageType",
                "fields": {
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "covariance": {
                                "name": "covariance",
                                "elementType": "messageType",
                                "type": "float64[36]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents a pose in free space with uncertainty.",
                        "1": "",
                        "2": "Pose pose",
                        "3": "",
                        "4": "# Row-major representation of the 6x6 covariance matrix",
                        "5": "# The orientation parameters use a fixed-axis representation.",
                        "6": "# In order, the parameters are:",
                        "7": "# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)",
                        "8": "float64[36] covariance"
                }
        },
        "geometry_msgs/PoseWithCovarianceStamped": {
                "name": "geometry_msgs/PoseWithCovarianceStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/PoseWithCovariance",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This expresses an estimated pose with a reference coordinate frame and timestamp",
                        "1": "",
                        "2": "Header header",
                        "3": "PoseWithCovariance pose"
                }
        },
        "geometry_msgs/Quaternion": {
                "name": "geometry_msgs/Quaternion",
                "elementType": "messageType",
                "fields": {
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "z": {
                                "name": "z",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "w": {
                                "name": "w",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents an orientation in free space in quaternion form.",
                        "1": "",
                        "2": "float64 x",
                        "3": "float64 y",
                        "4": "float64 z",
                        "5": "float64 w"
                }
        },
        "geometry_msgs/QuaternionStamped": {
                "name": "geometry_msgs/QuaternionStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "quaternion": {
                                "name": "quaternion",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Quaternion",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents an orientation with reference coordinate frame and timestamp.",
                        "1": "",
                        "2": "Header header",
                        "3": "Quaternion quaternion"
                }
        },
        "geometry_msgs/Transform": {
                "name": "geometry_msgs/Transform",
                "elementType": "messageType",
                "fields": {
                        "translation": {
                                "name": "translation",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "rotation": {
                                "name": "rotation",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Quaternion",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents the transform between two coordinate frames in free space.",
                        "1": "",
                        "2": "Vector3 translation",
                        "3": "Quaternion rotation"
                }
        },
        "geometry_msgs/TransformStamped": {
                "name": "geometry_msgs/TransformStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "child_frame_id": {
                                "name": "child_frame_id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "transform": {
                                "name": "transform",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Transform",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This expresses a transform from coordinate frame header.frame_id",
                        "1": "# to the coordinate frame child_frame_id",
                        "2": "#",
                        "3": "# This message is mostly used by the ",
                        "4": "# <a href=\"http://wiki.ros.org/tf\">tf</a> package. ",
                        "5": "# See its documentation for more information.",
                        "6": "",
                        "7": "Header header",
                        "8": "string child_frame_id # the frame id of the child frame",
                        "9": "Transform transform"
                }
        },
        "geometry_msgs/Twist": {
                "name": "geometry_msgs/Twist",
                "elementType": "messageType",
                "fields": {
                        "linear": {
                                "name": "linear",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "angular": {
                                "name": "angular",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This expresses velocity in free space broken into its linear and angular parts.",
                        "1": "Vector3  linear",
                        "2": "Vector3  angular"
                }
        },
        "geometry_msgs/TwistStamped": {
                "name": "geometry_msgs/TwistStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# A twist with reference coordinate frame and timestamp",
                        "1": "Header header",
                        "2": "Twist twist"
                }
        },
        "geometry_msgs/TwistWithCovariance": {
                "name": "geometry_msgs/TwistWithCovariance",
                "elementType": "messageType",
                "fields": {
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist",
                                "dmfDataType": "TBD"
                        },
                        "covariance": {
                                "name": "covariance",
                                "elementType": "messageType",
                                "type": "float64[36]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This expresses velocity in free space with uncertainty.",
                        "1": "",
                        "2": "Twist twist",
                        "3": "",
                        "4": "# Row-major representation of the 6x6 covariance matrix",
                        "5": "# The orientation parameters use a fixed-axis representation.",
                        "6": "# In order, the parameters are:",
                        "7": "# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)",
                        "8": "float64[36] covariance"
                }
        },
        "geometry_msgs/TwistWithCovarianceStamped": {
                "name": "geometry_msgs/TwistWithCovarianceStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/TwistWithCovariance",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents an estimated twist with reference coordinate frame and timestamp.",
                        "1": "Header header",
                        "2": "TwistWithCovariance twist"
                }
        },
        "geometry_msgs/Vector3": {
                "name": "geometry_msgs/Vector3",
                "elementType": "messageType",
                "fields": {
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "z": {
                                "name": "z",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents a vector in free space. ",
                        "1": "# It is only meant to represent a direction. Therefore, it does not",
                        "2": "# make sense to apply a translation to it (e.g., when applying a ",
                        "3": "# generic rigid transformation to a Vector3, tf2 will only apply the",
                        "4": "# rotation). If you want your data to be translatable too, use the",
                        "5": "# geometry_msgs/Point message instead.",
                        "6": "",
                        "7": "float64 x",
                        "8": "float64 y",
                        "9": "float64 "
                }
        },
        "geometry_msgs/Vector3Stamped": {
                "name": "geometry_msgs/Vector3Stamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "vector": {
                                "name": "vector",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents a Vector3 with reference coordinate frame and timestamp",
                        "1": "Header header",
                        "2": "Vector3 vector"
                }
        },
        "geometry_msgs/Wrench": {
                "name": "geometry_msgs/Wrench",
                "elementType": "messageType",
                "fields": {
                        "force": {
                                "name": "force",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "torque": {
                                "name": "torque",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents force in free space, separated into",
                        "1": "# its linear and angular parts.",
                        "2": "Vector3  force",
                        "3": "Vector3  torque"
                }
        },
        "geometry_msgs/WrenchStamped": {
                "name": "geometry_msgs/WrenchStamped",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "wrench": {
                                "name": "wrench",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Wrench",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# A wrench with reference coordinate frame and timestamp",
                        "1": "Header header",
                        "2": "Wrench wrench"
                }
        },
        "map_msgs/OccupancyGridUpdate": {
                "name": "map_msgs/OccupancyGridUpdate",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "width": {
                                "name": "width",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "height": {
                                "name": "height",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "int8[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "std_msgs/Header header",
                        "1": "int32 x",
                        "2": "int32 y",
                        "3": "uint32 width",
                        "4": "uint32 height",
                        "5": "int8[] data"
                }
        },
        "map_msgs/PointCloud2Update": {
                "name": "map_msgs/PointCloud2Update",
                "elementType": "messageType",
                "fields": {
                        "ADD=0": {
                                "name": "ADD=0",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "DELETE=1": {
                                "name": "DELETE=1",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "points": {
                                "name": "points",
                                "elementType": "messageType",
                                "type": "sensor_msgs/PointCloud2",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "uint32 ADD=0",
                        "1": "uint32 DELETE=1",
                        "2": "std_msgs/Header header",
                        "3": "uint32 type          # type of update, one of ADD or DELETE",
                        "4": "sensor_msgs/PointCloud2 points"
                }
        },
        "map_msgs/ProjectedMap": {
                "name": "map_msgs/ProjectedMap",
                "elementType": "messageType",
                "fields": {
                        "map": {
                                "name": "map",
                                "elementType": "messageType",
                                "type": "nav_msgs/OccupancyGrid",
                                "dmfDataType": "TBD"
                        },
                        "min_z": {
                                "name": "min_z",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "max_z": {
                                "name": "max_z",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "nav_msgs/OccupancyGrid map",
                        "1": "float64 min_z",
                        "2": "float64 max_"
                }
        },
        "map_msgs/ProjectedMapInfo": {
                "name": "map_msgs/ProjectedMapInfo",
                "elementType": "messageType",
                "fields": {
                        "frame_id": {
                                "name": "frame_id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "width": {
                                "name": "width",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "height": {
                                "name": "height",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "min_z": {
                                "name": "min_z",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "max_z": {
                                "name": "max_z",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string frame_id",
                        "1": "float64 x",
                        "2": "float64 y",
                        "3": "float64 width",
                        "4": "float64 height",
                        "5": "float64 min_z",
                        "6": "float64 max_"
                }
        },
        "nav_msgs/GetMapAction": {
                "name": "nav_msgs/GetMapAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "nav_msgs/GetMapActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "nav_msgs/GetMapActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "nav_msgs/GetMapActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "GetMapActionGoal action_goal",
                        "3": "GetMapActionResult action_result",
                        "4": "GetMapActionFeedback action_feedback"
                }
        },
        "nav_msgs/GetMapActionFeedback": {
                "name": "nav_msgs/GetMapActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "nav_msgs/GetMapFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "GetMapFeedback feedback"
                }
        },
        "nav_msgs/GetMapActionGoal": {
                "name": "nav_msgs/GetMapActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "nav_msgs/GetMapGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "GetMapGoal goal"
                }
        },
        "nav_msgs/GetMapActionResult": {
                "name": "nav_msgs/GetMapActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "nav_msgs/GetMapResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "GetMapResult result"
                }
        },
        "nav_msgs/GetMapFeedback": {
                "name": "nav_msgs/GetMapFeedback",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "# no feedback"
                }
        },
        "nav_msgs/GetMapGoal": {
                "name": "nav_msgs/GetMapGoal",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "# Get the map as a nav_msgs/OccupancyGrid"
                }
        },
        "nav_msgs/GetMapResult": {
                "name": "nav_msgs/GetMapResult",
                "elementType": "messageType",
                "fields": {
                        "map": {
                                "name": "map",
                                "elementType": "messageType",
                                "type": "nav_msgs/OccupancyGrid",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "nav_msgs/OccupancyGrid map"
                }
        },
        "nav_msgs/GridCells": {
                "name": "nav_msgs/GridCells",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "cell_width": {
                                "name": "cell_width",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "cell_height": {
                                "name": "cell_height",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "cells": {
                                "name": "cells",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "#an array of cells in a 2D grid",
                        "1": "Header header",
                        "2": "float32 cell_width",
                        "3": "float32 cell_height",
                        "4": "geometry_msgs/Point[] cells"
                }
        },
        "nav_msgs/MapMetaData": {
                "name": "nav_msgs/MapMetaData",
                "elementType": "messageType",
                "fields": {
                        "map_load_time": {
                                "name": "map_load_time",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "resolution": {
                                "name": "resolution",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "width": {
                                "name": "width",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "height": {
                                "name": "height",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "origin": {
                                "name": "origin",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This hold basic information about the characterists of the OccupancyGrid",
                        "1": "",
                        "2": "# The time at which the map was loaded",
                        "3": "time map_load_time",
                        "4": "# The map resolution [m/cell]",
                        "5": "float32 resolution",
                        "6": "# Map width [cells]",
                        "7": "uint32 width",
                        "8": "# Map height [cells]",
                        "9": "uint32 height",
                        "10": "# The origin of the map [m, m, rad].  This is the real-world pose of the",
                        "11": "# cell (0,0) in the map.",
                        "12": "geometry_msgs/Pose origi"
                }
        },
        "nav_msgs/OccupancyGrid": {
                "name": "nav_msgs/OccupancyGrid",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "info": {
                                "name": "info",
                                "elementType": "messageType",
                                "type": "nav_msgs/MapMetaData",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "int8[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents a 2-D grid map, in which each cell represents the probability of",
                        "1": "# occupancy.",
                        "2": "",
                        "3": "Header header ",
                        "4": "",
                        "5": "#MetaData for the map",
                        "6": "MapMetaData info",
                        "7": "",
                        "8": "# The map data, in row-major order, starting with (0,0).  Occupancy",
                        "9": "# probabilities are in the range [0,100].  Unknown is -1.",
                        "10": "int8[] data"
                }
        },
        "nav_msgs/Odometry": {
                "name": "nav_msgs/Odometry",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "child_frame_id": {
                                "name": "child_frame_id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/PoseWithCovariance",
                                "dmfDataType": "TBD"
                        },
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/TwistWithCovariance",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This represents an estimate of a position and velocity in free space.  ",
                        "1": "# The pose in this message should be specified in the coordinate frame given by header.frame_id.",
                        "2": "# The twist in this message should be specified in the coordinate frame given by the child_frame_id",
                        "3": "Header header",
                        "4": "string child_frame_id",
                        "5": "geometry_msgs/PoseWithCovariance pose",
                        "6": "geometry_msgs/TwistWithCovariance twist"
                }
        },
        "nav_msgs/Path": {
                "name": "nav_msgs/Path",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "poses": {
                                "name": "poses",
                                "elementType": "messageType",
                                "type": "geometry_msgs/PoseStamped[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "#An array of poses that represents a Path for a robot to follow",
                        "1": "Header header",
                        "2": "geometry_msgs/PoseStamped[] poses"
                }
        },
        "pcl_msgs/ModelCoefficients": {
                "name": "pcl_msgs/ModelCoefficients",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "values": {
                                "name": "values",
                                "elementType": "dataType",
                                "storageType": "float32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header",
                        "1": "float32[] values",
                        "2": ""
                }
        },
        "pcl_msgs/PointIndices": {
                "name": "pcl_msgs/PointIndices",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "indices": {
                                "name": "indices",
                                "elementType": "dataType",
                                "storageType": "int32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header",
                        "1": "int32[] indices",
                        "2": ""
                }
        },
        "pcl_msgs/PolygonMesh": {
                "name": "pcl_msgs/PolygonMesh",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "cloud": {
                                "name": "cloud",
                                "elementType": "messageType",
                                "type": "sensor_msgs/PointCloud2",
                                "dmfDataType": "TBD"
                        },
                        "polygons": {
                                "name": "polygons",
                                "elementType": "messageType",
                                "type": "pcl_msgs/Vertices[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Separate header for the polygonal surface",
                        "1": "Header header",
                        "2": "# Vertices of the mesh as a point cloud",
                        "3": "sensor_msgs/PointCloud2 cloud",
                        "4": "# List of polygons",
                        "5": "Vertices[] polygons"
                }
        },
        "pcl_msgs/Vertices": {
                "name": "pcl_msgs/Vertices",
                "elementType": "messageType",
                "fields": {
                        "vertices": {
                                "name": "vertices",
                                "elementType": "dataType",
                                "storageType": "uint32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# List of point indices",
                        "1": "uint32[] vertices"
                }
        },
        "roscpp/Logger": {
                "name": "roscpp/Logger",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "level": {
                                "name": "level",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string name",
                        "1": "string level"
                }
        },
        "rosgraph_msgs/Clock": {
                "name": "rosgraph_msgs/Clock",
                "elementType": "messageType",
                "fields": {
                        "clock": {
                                "name": "clock",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# roslib/Clock is used for publishing simulated time in ROS. ",
                        "1": "# This message simply communicates the current time.",
                        "2": "# For more information, see http://www.ros.org/wiki/Clock",
                        "3": "time clock"
                }
        },
        "rosgraph_msgs/Log": {
                "name": "rosgraph_msgs/Log",
                "elementType": "messageType",
                "fields": {
                        "DEBUG=1": {
                                "name": "DEBUG=1",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "INFO=2": {
                                "name": "INFO=2",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "WARN=4": {
                                "name": "WARN=4",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "ERROR=8": {
                                "name": "ERROR=8",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "FATAL=16": {
                                "name": "FATAL=16",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "level": {
                                "name": "level",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "msg": {
                                "name": "msg",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "file": {
                                "name": "file",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "function": {
                                "name": "function",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "line": {
                                "name": "line",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "topics": {
                                "name": "topics",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "##",
                        "1": "## Severity level constants",
                        "2": "##",
                        "3": "byte DEBUG=1 #debug level",
                        "4": "byte INFO=2  #general level",
                        "5": "byte WARN=4  #warning level",
                        "6": "byte ERROR=8 #error level",
                        "7": "byte FATAL=16 #fatal/critical level",
                        "8": "##",
                        "9": "## Fields",
                        "10": "##",
                        "11": "Header header",
                        "12": "byte level",
                        "13": "string name # name of the node",
                        "14": "string msg # message ",
                        "15": "string file # file the message came from",
                        "16": "string function # function the message came from",
                        "17": "uint32 line # line the message came from",
                        "18": "string[] topics # topic names that the node publishes"
                }
        },
        "rosgraph_msgs/TopicStatistics": {
                "name": "rosgraph_msgs/TopicStatistics",
                "elementType": "messageType",
                "fields": {
                        "topic": {
                                "name": "topic",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "node_pub": {
                                "name": "node_pub",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "node_sub": {
                                "name": "node_sub",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "window_start": {
                                "name": "window_start",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "window_stop": {
                                "name": "window_stop",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "delivered_msgs": {
                                "name": "delivered_msgs",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "dropped_msgs": {
                                "name": "dropped_msgs",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "traffic": {
                                "name": "traffic",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "period_mean": {
                                "name": "period_mean",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "period_stddev": {
                                "name": "period_stddev",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "period_max": {
                                "name": "period_max",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "stamp_age_mean": {
                                "name": "stamp_age_mean",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "stamp_age_stddev": {
                                "name": "stamp_age_stddev",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "stamp_age_max": {
                                "name": "stamp_age_max",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# name of the topic",
                        "1": "string topic",
                        "2": "",
                        "3": "# node id of the publisher",
                        "4": "string node_pub",
                        "5": "",
                        "6": "# node id of the subscriber",
                        "7": "string node_sub",
                        "8": "",
                        "9": "# the statistics apply to this time window",
                        "10": "time window_start",
                        "11": "time window_stop",
                        "12": "",
                        "13": "# number of messages delivered during the window",
                        "14": "int32 delivered_msgs",
                        "15": "# numbers of messages dropped during the window",
                        "16": "int32 dropped_msgs",
                        "17": "",
                        "18": "# traffic during the window, in bytes",
                        "19": "int32 traffic",
                        "20": "",
                        "21": "# mean/stddev/max period between two messages",
                        "22": "duration period_mean",
                        "23": "duration period_stddev",
                        "24": "duration period_max",
                        "25": "",
                        "26": "# mean/stddev/max age of the message based on the",
                        "27": "# timestamp in the message header. In case the",
                        "28": "# message does not have a header, it will be 0.",
                        "29": "duration stamp_age_mean",
                        "30": "duration stamp_age_stddev",
                        "31": "duration stamp_age_max"
                }
        },
        "rospy_tutorials/Floats": {
                "name": "rospy_tutorials/Floats",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "float32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "float32[] data"
                }
        },
        "rospy_tutorials/HeaderString": {
                "name": "rospy_tutorials/HeaderString",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header",
                        "1": "string data"
                }
        },
        "sensor_msgs/BatteryState": {
                "name": "sensor_msgs/BatteryState",
                "elementType": "messageType",
                "fields": {
                        "POWER_SUPPLY_STATUS_UNKNOWN=0": {
                                "name": "POWER_SUPPLY_STATUS_UNKNOWN=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_STATUS_CHARGING=1": {
                                "name": "POWER_SUPPLY_STATUS_CHARGING=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_STATUS_DISCHARGING=2": {
                                "name": "POWER_SUPPLY_STATUS_DISCHARGING=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_STATUS_NOT_CHARGING=3": {
                                "name": "POWER_SUPPLY_STATUS_NOT_CHARGING=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_STATUS_FULL=4": {
                                "name": "POWER_SUPPLY_STATUS_FULL=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_HEALTH_UNKNOWN=0": {
                                "name": "POWER_SUPPLY_HEALTH_UNKNOWN=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_HEALTH_GOOD=1": {
                                "name": "POWER_SUPPLY_HEALTH_GOOD=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_HEALTH_OVERHEAT=2": {
                                "name": "POWER_SUPPLY_HEALTH_OVERHEAT=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_HEALTH_DEAD=3": {
                                "name": "POWER_SUPPLY_HEALTH_DEAD=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_HEALTH_OVERVOLTAGE=4": {
                                "name": "POWER_SUPPLY_HEALTH_OVERVOLTAGE=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_HEALTH_UNSPEC_FAILURE=5": {
                                "name": "POWER_SUPPLY_HEALTH_UNSPEC_FAILURE=5",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_HEALTH_COLD=6": {
                                "name": "POWER_SUPPLY_HEALTH_COLD=6",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE=7": {
                                "name": "POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE=7",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE=8": {
                                "name": "POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE=8",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_TECHNOLOGY_UNKNOWN=0": {
                                "name": "POWER_SUPPLY_TECHNOLOGY_UNKNOWN=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_TECHNOLOGY_NIMH=1": {
                                "name": "POWER_SUPPLY_TECHNOLOGY_NIMH=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_TECHNOLOGY_LION=2": {
                                "name": "POWER_SUPPLY_TECHNOLOGY_LION=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_TECHNOLOGY_LIPO=3": {
                                "name": "POWER_SUPPLY_TECHNOLOGY_LIPO=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_TECHNOLOGY_LIFE=4": {
                                "name": "POWER_SUPPLY_TECHNOLOGY_LIFE=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_TECHNOLOGY_NICD=5": {
                                "name": "POWER_SUPPLY_TECHNOLOGY_NICD=5",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POWER_SUPPLY_TECHNOLOGY_LIMN=6": {
                                "name": "POWER_SUPPLY_TECHNOLOGY_LIMN=6",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "voltage": {
                                "name": "voltage",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "temperature": {
                                "name": "temperature",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "current": {
                                "name": "current",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "charge": {
                                "name": "charge",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "capacity": {
                                "name": "capacity",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "design_capacity": {
                                "name": "design_capacity",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "percentage": {
                                "name": "percentage",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "power_supply_status": {
                                "name": "power_supply_status",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "power_supply_health": {
                                "name": "power_supply_health",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "power_supply_technology": {
                                "name": "power_supply_technology",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "present": {
                                "name": "present",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "cell_voltage": {
                                "name": "cell_voltage",
                                "elementType": "dataType",
                                "storageType": "float32[]",
                                "dmfDataType": "TBD"
                        },
                        "cell_temperature": {
                                "name": "cell_temperature",
                                "elementType": "dataType",
                                "storageType": "float32[]",
                                "dmfDataType": "TBD"
                        },
                        "location": {
                                "name": "location",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "serial_number": {
                                "name": "serial_number",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "",
                        "1": "# Constants are chosen to match the enums in the linux kernel",
                        "2": "# defined in include/linux/power_supply.h as of version 3.7",
                        "3": "# The one difference is for style reasons the constants are",
                        "4": "# all uppercase not mixed case.",
                        "5": "",
                        "6": "# Power supply status constants",
                        "7": "uint8 POWER_SUPPLY_STATUS_UNKNOWN = 0",
                        "8": "uint8 POWER_SUPPLY_STATUS_CHARGING = 1",
                        "9": "uint8 POWER_SUPPLY_STATUS_DISCHARGING = 2",
                        "10": "uint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3",
                        "11": "uint8 POWER_SUPPLY_STATUS_FULL = 4",
                        "12": "",
                        "13": "# Power supply health constants",
                        "14": "uint8 POWER_SUPPLY_HEALTH_UNKNOWN = 0",
                        "15": "uint8 POWER_SUPPLY_HEALTH_GOOD = 1",
                        "16": "uint8 POWER_SUPPLY_HEALTH_OVERHEAT = 2",
                        "17": "uint8 POWER_SUPPLY_HEALTH_DEAD = 3",
                        "18": "uint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4",
                        "19": "uint8 POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5",
                        "20": "uint8 POWER_SUPPLY_HEALTH_COLD = 6",
                        "21": "uint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7",
                        "22": "uint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8",
                        "23": "",
                        "24": "# Power supply technology (chemistry) constants",
                        "25": "uint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0",
                        "26": "uint8 POWER_SUPPLY_TECHNOLOGY_NIMH = 1",
                        "27": "uint8 POWER_SUPPLY_TECHNOLOGY_LION = 2",
                        "28": "uint8 POWER_SUPPLY_TECHNOLOGY_LIPO = 3",
                        "29": "uint8 POWER_SUPPLY_TECHNOLOGY_LIFE = 4",
                        "30": "uint8 POWER_SUPPLY_TECHNOLOGY_NICD = 5",
                        "31": "uint8 POWER_SUPPLY_TECHNOLOGY_LIMN = 6",
                        "32": "",
                        "33": "Header  header",
                        "34": "float32 voltage          # Voltage in Volts (Mandatory)",
                        "35": "float32 temperature      # Temperature in Degrees Celsius (If unmeasured NaN)",
                        "36": "float32 current          # Negative when discharging (A)  (If unmeasured NaN)",
                        "37": "float32 charge           # Current charge in Ah  (If unmeasured NaN)",
                        "38": "float32 capacity         # Capacity in Ah (last full capacity)  (If unmeasured NaN)",
                        "39": "float32 design_capacity  # Capacity in Ah (design capacity)  (If unmeasured NaN)",
                        "40": "float32 percentage       # Charge percentage on 0 to 1 range  (If unmeasured NaN)",
                        "41": "uint8   power_supply_status     # The charging status as reported. Values defined above",
                        "42": "uint8   power_supply_health     # The battery health metric. Values defined above",
                        "43": "uint8   power_supply_technology # The battery chemistry. Values defined above",
                        "44": "bool    present          # True if the battery is present",
                        "45": "",
                        "46": "float32[] cell_voltage   # An array of individual cell voltages for each cell in the pack",
                        "47": "                         # If individual voltages unknown but number of cells known set each to NaN",
                        "48": "float32[] cell_temperature  # An array of individual cell temperatures for each cell in the pack",
                        "49": "                            # If individual temperatures unknown but number of cells known set each to NaN",
                        "50": "string location          # The location into which the battery is inserted. (slot number or plug)",
                        "51": "string serial_number     # The best approximation of the battery serial number"
                }
        },
        "sensor_msgs/CameraInfo": {
                "name": "sensor_msgs/CameraInfo",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "height": {
                                "name": "height",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "width": {
                                "name": "width",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "distortion_model": {
                                "name": "distortion_model",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "D": {
                                "name": "D",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "K": {
                                "name": "K",
                                "elementType": "messageType",
                                "type": "float64[9]",
                                "dmfDataType": "TBD"
                        },
                        "R": {
                                "name": "R",
                                "elementType": "messageType",
                                "type": "float64[9]",
                                "dmfDataType": "TBD"
                        },
                        "P": {
                                "name": "P",
                                "elementType": "messageType",
                                "type": "float64[12]",
                                "dmfDataType": "TBD"
                        },
                        "binning_x": {
                                "name": "binning_x",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "binning_y": {
                                "name": "binning_y",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "roi": {
                                "name": "roi",
                                "elementType": "messageType",
                                "type": "sensor_msgs/RegionOfInterest",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message defines meta information for a camera. It should be in a",
                        "1": "# camera namespace on topic \"camera_info\" and accompanied by up to five",
                        "2": "# image topics named:",
                        "3": "#",
                        "4": "#   image_raw - raw data from the camera driver, possibly Bayer encoded",
                        "5": "#   image            - monochrome, distorted",
                        "6": "#   image_color      - color, distorted",
                        "7": "#   image_rect       - monochrome, rectified",
                        "8": "#   image_rect_color - color, rectified",
                        "9": "#",
                        "10": "# The image_pipeline contains packages (image_proc, stereo_image_proc)",
                        "11": "# for producing the four processed image topics from image_raw and",
                        "12": "# camera_info. The meaning of the camera parameters are described in",
                        "13": "# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.",
                        "14": "#",
                        "15": "# The image_geometry package provides a user-friendly interface to",
                        "16": "# common operations using this meta information. If you want to, e.g.,",
                        "17": "# project a 3d point into image coordinates, we strongly recommend",
                        "18": "# using image_geometry.",
                        "19": "#",
                        "20": "# If the camera is uncalibrated, the matrices D, K, R, P should be left",
                        "21": "# zeroed out. In particular, clients may assume that K[0] == 0.0",
                        "22": "# indicates an uncalibrated camera.",
                        "23": "",
                        "24": "#######################################################################",
                        "25": "#                     Image acquisition info                          #",
                        "26": "#######################################################################",
                        "27": "",
                        "28": "# Time of image acquisition, camera coordinate frame ID",
                        "29": "Header header    # Header timestamp should be acquisition time of image",
                        "30": "                 # Header frame_id should be optical frame of camera",
                        "31": "                 # origin of frame should be optical center of camera",
                        "32": "                 # +x should point to the right in the image",
                        "33": "                 # +y should point down in the image",
                        "34": "                 # +z should point into the plane of the image",
                        "35": "",
                        "36": "",
                        "37": "#######################################################################",
                        "38": "#                      Calibration Parameters                         #",
                        "39": "#######################################################################",
                        "40": "# These are fixed during camera calibration. Their values will be the #",
                        "41": "# same in all messages until the camera is recalibrated. Note that    #",
                        "42": "# self-calibrating systems may \"recalibrate\" frequently.              #",
                        "43": "#                                                                     #",
                        "44": "# The internal parameters can be used to warp a raw (distorted) image #",
                        "45": "# to:                                                                 #",
                        "46": "#   1. An undistorted image (requires D and K)                        #",
                        "47": "#   2. A rectified image (requires D, K, R)                           #",
                        "48": "# The projection matrix P projects 3D points into the rectified image.#",
                        "49": "#######################################################################",
                        "50": "",
                        "51": "# The image dimensions with which the camera was calibrated. Normally",
                        "52": "# this will be the full camera resolution in pixels.",
                        "53": "uint32 height",
                        "54": "uint32 width",
                        "55": "",
                        "56": "# The distortion model used. Supported models are listed in",
                        "57": "# sensor_msgs/distortion_models.h. For most cameras, \"plumb_bob\" - a",
                        "58": "# simple model of radial and tangential distortion - is sufficient.",
                        "59": "string distortion_model",
                        "60": "",
                        "61": "# The distortion parameters, size depending on the distortion model.",
                        "62": "# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).",
                        "63": "float64[] D",
                        "64": "",
                        "65": "# Intrinsic camera matrix for the raw (distorted) images.",
                        "66": "#     [fx  0 cx]",
                        "67": "# K = [ 0 fy cy]",
                        "68": "#     [ 0  0  1]",
                        "69": "# Projects 3D points in the camera coordinate frame to 2D pixel",
                        "70": "# coordinates using the focal lengths (fx, fy) and principal point",
                        "71": "# (cx, cy).",
                        "72": "float64[9]  K # 3x3 row-major matrix",
                        "73": "",
                        "74": "# Rectification matrix (stereo cameras only)",
                        "75": "# A rotation matrix aligning the camera coordinate system to the ideal",
                        "76": "# stereo image plane so that epipolar lines in both stereo images are",
                        "77": "# parallel.",
                        "78": "float64[9]  R # 3x3 row-major matrix",
                        "79": "",
                        "80": "# Projection/camera matrix",
                        "81": "#     [fx'  0  cx' Tx]",
                        "82": "# P = [ 0  fy' cy' Ty]",
                        "83": "#     [ 0   0   1   0]",
                        "84": "# By convention, this matrix specifies the intrinsic (camera) matrix",
                        "85": "#  of the processed (rectified) image. That is, the left 3x3 portion",
                        "86": "#  is the normal camera intrinsic matrix for the rectified image.",
                        "87": "# It projects 3D points in the camera coordinate frame to 2D pixel",
                        "88": "#  coordinates using the focal lengths (fx', fy') and principal point",
                        "89": "#  (cx', cy') - these may differ from the values in K.",
                        "90": "# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will",
                        "91": "#  also have R = the identity and P[1:3,1:3] = K.",
                        "92": "# For a stereo pair, the fourth column [Tx Ty 0]' is related to the",
                        "93": "#  position of the optical center of the second camera in the first",
                        "94": "#  camera's frame. We assume Tz = 0 so both cameras are in the same",
                        "95": "#  stereo image plane. The first camera always has Tx = Ty = 0. For",
                        "96": "#  the right (second) camera of a horizontal stereo pair, Ty = 0 and",
                        "97": "#  Tx = -fx' * B, where B is the baseline between the cameras.",
                        "98": "# Given a 3D point [X Y Z]', the projection (x, y) of the point onto",
                        "99": "#  the rectified image is given by:",
                        "100": "#  [u v w]' = P * [X Y Z 1]'",
                        "101": "#         x = u / w",
                        "102": "#         y = v / w",
                        "103": "#  This holds for both images of a stereo pair.",
                        "104": "float64[12] P # 3x4 row-major matrix",
                        "105": "",
                        "106": "",
                        "107": "#######################################################################",
                        "108": "#                      Operational Parameters                         #",
                        "109": "#######################################################################",
                        "110": "# These define the image region actually captured by the camera       #",
                        "111": "# driver. Although they affect the geometry of the output image, they #",
                        "112": "# may be changed freely without recalibrating the camera.             #",
                        "113": "#######################################################################",
                        "114": "",
                        "115": "# Binning refers here to any camera setting which combines rectangular",
                        "116": "#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the",
                        "117": "#  resolution of the output image to",
                        "118": "#  (width / binning_x) x (height / binning_y).",
                        "119": "# The default values binning_x = binning_y = 0 is considered the same",
                        "120": "#  as binning_x = binning_y = 1 (no subsampling).",
                        "121": "uint32 binning_x",
                        "122": "uint32 binning_y",
                        "123": "",
                        "124": "# Region of interest (subwindow of full camera resolution), given in",
                        "125": "#  full resolution (unbinned) image coordinates. A particular ROI",
                        "126": "#  always denotes the same window of pixels on the camera sensor,",
                        "127": "#  regardless of binning settings.",
                        "128": "# The default setting of roi (all values 0) is considered the same as",
                        "129": "#  full resolution (roi.width = width, roi.height = height).",
                        "130": "RegionOfInterest roi"
                }
        },
        "sensor_msgs/ChannelFloat32": {
                "name": "sensor_msgs/ChannelFloat32",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "values": {
                                "name": "values",
                                "elementType": "dataType",
                                "storageType": "float32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message is used by the PointCloud message to hold optional data",
                        "1": "# associated with each point in the cloud. The length of the values",
                        "2": "# array should be the same as the length of the points array in the",
                        "3": "# PointCloud, and each value should be associated with the corresponding",
                        "4": "# point.",
                        "5": "",
                        "6": "# Channel names in existing practice include:",
                        "7": "#   \"u\", \"v\" - row and column (respectively) in the left stereo image.",
                        "8": "#              This is opposite to usual conventions but remains for",
                        "9": "#              historical reasons. The newer PointCloud2 message has no",
                        "10": "#              such problem.",
                        "11": "#   \"rgb\" - For point clouds produced by color stereo cameras. uint8",
                        "12": "#           (R,G,B) values packed into the least significant 24 bits,",
                        "13": "#           in order.",
                        "14": "#   \"intensity\" - laser or pixel intensity.",
                        "15": "#   \"distance\"",
                        "16": "",
                        "17": "# The channel name should give semantics of the channel (e.g.",
                        "18": "# \"intensity\" instead of \"value\").",
                        "19": "string name",
                        "20": "",
                        "21": "# The values array should be 1-1 with the elements of the associated",
                        "22": "# PointCloud.",
                        "23": "float32[] values"
                }
        },
        "sensor_msgs/CompressedImage": {
                "name": "sensor_msgs/CompressedImage",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "format": {
                                "name": "format",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint8[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message contains a compressed image",
                        "1": "",
                        "2": "Header header        # Header timestamp should be acquisition time of image",
                        "3": "                     # Header frame_id should be optical frame of camera",
                        "4": "                     # origin of frame should be optical center of camera",
                        "5": "                     # +x should point to the right in the image",
                        "6": "                     # +y should point down in the image",
                        "7": "                     # +z should point into to plane of the image",
                        "8": "",
                        "9": "string format        # Specifies the format of the data",
                        "10": "                     #   Acceptable values:",
                        "11": "                     #     jpeg, png",
                        "12": "uint8[] data         # Compressed image buffer"
                }
        },
        "sensor_msgs/FluidPressure": {
                "name": "sensor_msgs/FluidPressure",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "fluid_pressure": {
                                "name": "fluid_pressure",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "variance": {
                                "name": "variance",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": " # Single pressure reading.  This message is appropriate for measuring the",
                        "1": " # pressure inside of a fluid (air, water, etc).  This also includes",
                        "2": " # atmospheric or barometric pressure.",
                        "3": "",
                        "4": " # This message is not appropriate for force/pressure contact sensors.",
                        "5": "",
                        "6": " Header header           # timestamp of the measurement",
                        "7": "                         # frame_id is the location of the pressure sensor",
                        "8": "",
                        "9": " float64 fluid_pressure  # Absolute pressure reading in Pascals.",
                        "10": "",
                        "11": " float64 variance        # 0 is interpreted as variance unknow"
                }
        },
        "sensor_msgs/Illuminance": {
                "name": "sensor_msgs/Illuminance",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "illuminance": {
                                "name": "illuminance",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "variance": {
                                "name": "variance",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": " # Single photometric illuminance measurement.  Light should be assumed to be",
                        "1": " # measured along the sensor's x-axis (the area of detection is the y-z plane).",
                        "2": " # The illuminance should have a 0 or positive value and be received with",
                        "3": " # the sensor's +X axis pointing toward the light source.",
                        "4": "",
                        "5": " # Photometric illuminance is the measure of the human eye's sensitivity of the",
                        "6": " # intensity of light encountering or passing through a surface.",
                        "7": "",
                        "8": " # All other Photometric and Radiometric measurements should",
                        "9": " # not use this message.",
                        "10": " # This message cannot represent:",
                        "11": " # Luminous intensity (candela/light source output)",
                        "12": " # Luminance (nits/light output per area)",
                        "13": " # Irradiance (watt/area), etc.",
                        "14": "",
                        "15": " Header header           # timestamp is the time the illuminance was measured",
                        "16": "                         # frame_id is the location and direction of the reading",
                        "17": "",
                        "18": " float64 illuminance     # Measurement of the Photometric Illuminance in Lux.",
                        "19": "",
                        "20": " float64 variance        # 0 is interpreted as variance unknow"
                }
        },
        "sensor_msgs/Image": {
                "name": "sensor_msgs/Image",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "height": {
                                "name": "height",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "width": {
                                "name": "width",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "encoding": {
                                "name": "encoding",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "is_bigendian": {
                                "name": "is_bigendian",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "step": {
                                "name": "step",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint8[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message contains an uncompressed image",
                        "1": "# (0, 0) is at top-left corner of image",
                        "2": "#",
                        "3": "",
                        "4": "Header header        # Header timestamp should be acquisition time of image",
                        "5": "                     # Header frame_id should be optical frame of camera",
                        "6": "                     # origin of frame should be optical center of camera",
                        "7": "                     # +x should point to the right in the image",
                        "8": "                     # +y should point down in the image",
                        "9": "                     # +z should point into to plane of the image",
                        "10": "                     # If the frame_id here and the frame_id of the CameraInfo",
                        "11": "                     # message associated with the image conflict",
                        "12": "                     # the behavior is undefined",
                        "13": "",
                        "14": "uint32 height         # image height, that is, number of rows",
                        "15": "uint32 width          # image width, that is, number of columns",
                        "16": "",
                        "17": "# The legal values for encoding are in file src/image_encodings.cpp",
                        "18": "# If you want to standardize a new string format, join",
                        "19": "# ros-users@lists.sourceforge.net and send an email proposing a new encoding.",
                        "20": "",
                        "21": "string encoding       # Encoding of pixels -- channel meaning, ordering, size",
                        "22": "                      # taken from the list of strings in include/sensor_msgs/image_encodings.h",
                        "23": "",
                        "24": "uint8 is_bigendian    # is this data bigendian?",
                        "25": "uint32 step           # Full row length in bytes",
                        "26": "uint8[] data          # actual matrix data, size is (step * rows)"
                }
        },
        "sensor_msgs/Imu": {
                "name": "sensor_msgs/Imu",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "orientation": {
                                "name": "orientation",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Quaternion",
                                "dmfDataType": "TBD"
                        },
                        "orientation_covariance": {
                                "name": "orientation_covariance",
                                "elementType": "messageType",
                                "type": "float64[9]",
                                "dmfDataType": "TBD"
                        },
                        "angular_velocity": {
                                "name": "angular_velocity",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "angular_velocity_covariance": {
                                "name": "angular_velocity_covariance",
                                "elementType": "messageType",
                                "type": "float64[9]",
                                "dmfDataType": "TBD"
                        },
                        "linear_acceleration": {
                                "name": "linear_acceleration",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "linear_acceleration_covariance": {
                                "name": "linear_acceleration_covariance",
                                "elementType": "messageType",
                                "type": "float64[9]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This is a message to hold data from an IMU (Inertial Measurement Unit)",
                        "1": "#",
                        "2": "# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec",
                        "3": "#",
                        "4": "# If the covariance of the measurement is known, it should be filled in (if all you know is the ",
                        "5": "# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)",
                        "6": "# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the",
                        "7": "# data a covariance will have to be assumed or gotten from some other source",
                        "8": "#",
                        "9": "# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation ",
                        "10": "# estimate), please set element 0 of the associated covariance matrix to -1",
                        "11": "# If you are interpreting this message, please check for a value of -1 in the first element of each ",
                        "12": "# covariance matrix, and disregard the associated estimate.",
                        "13": "",
                        "14": "Header header",
                        "15": "",
                        "16": "geometry_msgs/Quaternion orientation",
                        "17": "float64[9] orientation_covariance # Row major about x, y, z axes",
                        "18": "",
                        "19": "geometry_msgs/Vector3 angular_velocity",
                        "20": "float64[9] angular_velocity_covariance # Row major about x, y, z axes",
                        "21": "",
                        "22": "geometry_msgs/Vector3 linear_acceleration",
                        "23": "float64[9] linear_acceleration_covariance # Row major x, y z "
                }
        },
        "sensor_msgs/JointState": {
                "name": "sensor_msgs/JointState",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "position": {
                                "name": "position",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "velocity": {
                                "name": "velocity",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "effort": {
                                "name": "effort",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This is a message that holds data to describe the state of a set of torque controlled joints. ",
                        "1": "#",
                        "2": "# The state of each joint (revolute or prismatic) is defined by:",
                        "3": "#  * the position of the joint (rad or m),",
                        "4": "#  * the velocity of the joint (rad/s or m/s) and ",
                        "5": "#  * the effort that is applied in the joint (Nm or N).",
                        "6": "#",
                        "7": "# Each joint is uniquely identified by its name",
                        "8": "# The header specifies the time at which the joint states were recorded. All the joint states",
                        "9": "# in one message have to be recorded at the same time.",
                        "10": "#",
                        "11": "# This message consists of a multiple arrays, one for each part of the joint state. ",
                        "12": "# The goal is to make each of the fields optional. When e.g. your joints have no",
                        "13": "# effort associated with them, you can leave the effort array empty. ",
                        "14": "#",
                        "15": "# All arrays in this message should have the same size, or be empty.",
                        "16": "# This is the only way to uniquely associate the joint name with the correct",
                        "17": "# states.",
                        "18": "",
                        "19": "",
                        "20": "Header header",
                        "21": "",
                        "22": "string[] name",
                        "23": "float64[] position",
                        "24": "float64[] velocity",
                        "25": "float64[] effort"
                }
        },
        "sensor_msgs/Joy": {
                "name": "sensor_msgs/Joy",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "axes": {
                                "name": "axes",
                                "elementType": "dataType",
                                "storageType": "float32[]",
                                "dmfDataType": "TBD"
                        },
                        "buttons": {
                                "name": "buttons",
                                "elementType": "dataType",
                                "storageType": "int32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Reports the state of a joysticks axes and buttons.",
                        "1": "Header header           # timestamp in the header is the time the data is received from the joystick",
                        "2": "float32[] axes          # the axes measurements from a joystick",
                        "3": "int32[] buttons         # the buttons measurements from a joystick "
                }
        },
        "sensor_msgs/JoyFeedback": {
                "name": "sensor_msgs/JoyFeedback",
                "elementType": "messageType",
                "fields": {
                        "TYPE_LED=0": {
                                "name": "TYPE_LED=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "TYPE_RUMBLE=1": {
                                "name": "TYPE_RUMBLE=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "TYPE_BUZZER=2": {
                                "name": "TYPE_BUZZER=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "id": {
                                "name": "id",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "intensity": {
                                "name": "intensity",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Declare of the type of feedback",
                        "1": "uint8 TYPE_LED    = 0",
                        "2": "uint8 TYPE_RUMBLE = 1",
                        "3": "uint8 TYPE_BUZZER = 2",
                        "4": "",
                        "5": "uint8 type",
                        "6": "",
                        "7": "# This will hold an id number for each type of each feedback.",
                        "8": "# Example, the first led would be id=0, the second would be id=1",
                        "9": "uint8 id",
                        "10": "",
                        "11": "# Intensity of the feedback, from 0.0 to 1.0, inclusive.  If device is",
                        "12": "# actually binary, driver should treat 0<=x<0.5 as off, 0.5<=x<=1 as on.",
                        "13": "float32 intensity",
                        "14": ""
                }
        },
        "sensor_msgs/JoyFeedbackArray": {
                "name": "sensor_msgs/JoyFeedbackArray",
                "elementType": "messageType",
                "fields": {
                        "array": {
                                "name": "array",
                                "elementType": "messageType",
                                "type": "sensor_msgs/JoyFeedback[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message publishes values for multiple feedback at once. ",
                        "1": "JoyFeedback[] arra"
                }
        },
        "sensor_msgs/LaserEcho": {
                "name": "sensor_msgs/LaserEcho",
                "elementType": "messageType",
                "fields": {
                        "echoes": {
                                "name": "echoes",
                                "elementType": "dataType",
                                "storageType": "float32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message is a submessage of MultiEchoLaserScan and is not intended",
                        "1": "# to be used separately.",
                        "2": "",
                        "3": "float32[] echoes  # Multiple values of ranges or intensities.",
                        "4": "                  # Each array represents data from the same angle increment"
                }
        },
        "sensor_msgs/LaserScan": {
                "name": "sensor_msgs/LaserScan",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "angle_min": {
                                "name": "angle_min",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "angle_max": {
                                "name": "angle_max",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "angle_increment": {
                                "name": "angle_increment",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "time_increment": {
                                "name": "time_increment",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "scan_time": {
                                "name": "scan_time",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "range_min": {
                                "name": "range_min",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "range_max": {
                                "name": "range_max",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "ranges": {
                                "name": "ranges",
                                "elementType": "dataType",
                                "storageType": "float32[]",
                                "dmfDataType": "TBD"
                        },
                        "intensities": {
                                "name": "intensities",
                                "elementType": "dataType",
                                "storageType": "float32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Single scan from a planar laser range-finder",
                        "1": "#",
                        "2": "# If you have another ranging device with different behavior (e.g. a sonar",
                        "3": "# array), please find or create a different message, since applications",
                        "4": "# will make fairly laser-specific assumptions about this data",
                        "5": "",
                        "6": "Header header            # timestamp in the header is the acquisition time of ",
                        "7": "                         # the first ray in the scan.",
                        "8": "                         #",
                        "9": "                         # in frame frame_id, angles are measured around ",
                        "10": "                         # the positive Z axis (counterclockwise, if Z is up)",
                        "11": "                         # with zero angle being forward along the x axis",
                        "12": "                         ",
                        "13": "float32 angle_min        # start angle of the scan [rad]",
                        "14": "float32 angle_max        # end angle of the scan [rad]",
                        "15": "float32 angle_increment  # angular distance between measurements [rad]",
                        "16": "",
                        "17": "float32 time_increment   # time between measurements [seconds] - if your scanner",
                        "18": "                         # is moving, this will be used in interpolating position",
                        "19": "                         # of 3d points",
                        "20": "float32 scan_time        # time between scans [seconds]",
                        "21": "",
                        "22": "float32 range_min        # minimum range value [m]",
                        "23": "float32 range_max        # maximum range value [m]",
                        "24": "",
                        "25": "float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)",
                        "26": "float32[] intensities    # intensity data [device-specific units].  If your",
                        "27": "                         # device does not provide intensities, please leave",
                        "28": "                         # the array empty."
                }
        },
        "sensor_msgs/MagneticField": {
                "name": "sensor_msgs/MagneticField",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "magnetic_field": {
                                "name": "magnetic_field",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "magnetic_field_covariance": {
                                "name": "magnetic_field_covariance",
                                "elementType": "messageType",
                                "type": "float64[9]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": " # Measurement of the Magnetic Field vector at a specific location.",
                        "1": "",
                        "2": " # If the covariance of the measurement is known, it should be filled in",
                        "3": " # (if all you know is the variance of each measurement, e.g. from the datasheet,",
                        "4": " #just put those along the diagonal)",
                        "5": " # A covariance matrix of all zeros will be interpreted as \"covariance unknown\",",
                        "6": " # and to use the data a covariance will have to be assumed or gotten from some",
                        "7": " # other source",
                        "8": "",
                        "9": "",
                        "10": " Header header                        # timestamp is the time the",
                        "11": "                                      # field was measured",
                        "12": "                                      # frame_id is the location and orientation",
                        "13": "                                      # of the field measurement",
                        "14": "",
                        "15": " geometry_msgs/Vector3 magnetic_field # x, y, and z components of the",
                        "16": "                                      # field vector in Tesla",
                        "17": "                                      # If your sensor does not output 3 axes,",
                        "18": "                                      # put NaNs in the components not reported.",
                        "19": "",
                        "20": " float64[9] magnetic_field_covariance # Row major about x, y, z axes",
                        "21": "                                      # 0 is interpreted as variance unknow"
                }
        },
        "sensor_msgs/MultiDOFJointState": {
                "name": "sensor_msgs/MultiDOFJointState",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "joint_names": {
                                "name": "joint_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "transforms": {
                                "name": "transforms",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Transform[]",
                                "dmfDataType": "TBD"
                        },
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist[]",
                                "dmfDataType": "TBD"
                        },
                        "wrench": {
                                "name": "wrench",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Wrench[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Representation of state for joints with multiple degrees of freedom, ",
                        "1": "# following the structure of JointState.",
                        "2": "#",
                        "3": "# It is assumed that a joint in a system corresponds to a transform that gets applied ",
                        "4": "# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)",
                        "5": "# and those 3DOF can be expressed as a transformation matrix, and that transformation",
                        "6": "# matrix can be converted back to (x, y, yaw)",
                        "7": "#",
                        "8": "# Each joint is uniquely identified by its name",
                        "9": "# The header specifies the time at which the joint states were recorded. All the joint states",
                        "10": "# in one message have to be recorded at the same time.",
                        "11": "#",
                        "12": "# This message consists of a multiple arrays, one for each part of the joint state. ",
                        "13": "# The goal is to make each of the fields optional. When e.g. your joints have no",
                        "14": "# wrench associated with them, you can leave the wrench array empty. ",
                        "15": "#",
                        "16": "# All arrays in this message should have the same size, or be empty.",
                        "17": "# This is the only way to uniquely associate the joint name with the correct",
                        "18": "# states.",
                        "19": "",
                        "20": "Header header",
                        "21": "",
                        "22": "string[] joint_names",
                        "23": "geometry_msgs/Transform[] transforms",
                        "24": "geometry_msgs/Twist[] twist",
                        "25": "geometry_msgs/Wrench[] wrench"
                }
        },
        "sensor_msgs/MultiEchoLaserScan": {
                "name": "sensor_msgs/MultiEchoLaserScan",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "angle_min": {
                                "name": "angle_min",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "angle_max": {
                                "name": "angle_max",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "angle_increment": {
                                "name": "angle_increment",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "time_increment": {
                                "name": "time_increment",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "scan_time": {
                                "name": "scan_time",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "range_min": {
                                "name": "range_min",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "range_max": {
                                "name": "range_max",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "ranges": {
                                "name": "ranges",
                                "elementType": "messageType",
                                "type": "sensor_msgs/LaserEcho[]",
                                "dmfDataType": "TBD"
                        },
                        "intensities": {
                                "name": "intensities",
                                "elementType": "messageType",
                                "type": "sensor_msgs/LaserEcho[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Single scan from a multi-echo planar laser range-finder",
                        "1": "#",
                        "2": "# If you have another ranging device with different behavior (e.g. a sonar",
                        "3": "# array), please find or create a different message, since applications",
                        "4": "# will make fairly laser-specific assumptions about this data",
                        "5": "",
                        "6": "Header header            # timestamp in the header is the acquisition time of ",
                        "7": "                         # the first ray in the scan.",
                        "8": "                         #",
                        "9": "                         # in frame frame_id, angles are measured around ",
                        "10": "                         # the positive Z axis (counterclockwise, if Z is up)",
                        "11": "                         # with zero angle being forward along the x axis",
                        "12": "                         ",
                        "13": "float32 angle_min        # start angle of the scan [rad]",
                        "14": "float32 angle_max        # end angle of the scan [rad]",
                        "15": "float32 angle_increment  # angular distance between measurements [rad]",
                        "16": "",
                        "17": "float32 time_increment   # time between measurements [seconds] - if your scanner",
                        "18": "                         # is moving, this will be used in interpolating position",
                        "19": "                         # of 3d points",
                        "20": "float32 scan_time        # time between scans [seconds]",
                        "21": "",
                        "22": "float32 range_min        # minimum range value [m]",
                        "23": "float32 range_max        # maximum range value [m]",
                        "24": "",
                        "25": "LaserEcho[] ranges       # range data [m] (Note: NaNs, values < range_min or > range_max should be discarded)",
                        "26": "                         # +Inf measurements are out of range",
                        "27": "                         # -Inf measurements are too close to determine exact distance.",
                        "28": "LaserEcho[] intensities  # intensity data [device-specific units].  If your",
                        "29": "                         # device does not provide intensities, please leave",
                        "30": "                         # the array empty"
                }
        },
        "sensor_msgs/NavSatFix": {
                "name": "sensor_msgs/NavSatFix",
                "elementType": "messageType",
                "fields": {
                        "COVARIANCE_TYPE_UNKNOWN=0": {
                                "name": "COVARIANCE_TYPE_UNKNOWN=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "COVARIANCE_TYPE_APPROXIMATED=1": {
                                "name": "COVARIANCE_TYPE_APPROXIMATED=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "COVARIANCE_TYPE_DIAGONAL_KNOWN=2": {
                                "name": "COVARIANCE_TYPE_DIAGONAL_KNOWN=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "COVARIANCE_TYPE_KNOWN=3": {
                                "name": "COVARIANCE_TYPE_KNOWN=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "sensor_msgs/NavSatStatus",
                                "dmfDataType": "TBD"
                        },
                        "latitude": {
                                "name": "latitude",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "longitude": {
                                "name": "longitude",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "altitude": {
                                "name": "altitude",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "position_covariance": {
                                "name": "position_covariance",
                                "elementType": "messageType",
                                "type": "float64[9]",
                                "dmfDataType": "TBD"
                        },
                        "position_covariance_type": {
                                "name": "position_covariance_type",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Navigation Satellite fix for any Global Navigation Satellite System",
                        "1": "#",
                        "2": "# Specified using the WGS 84 reference ellipsoid",
                        "3": "",
                        "4": "# header.stamp specifies the ROS time for this measurement (the",
                        "5": "#        corresponding satellite time may be reported using the",
                        "6": "#        sensor_msgs/TimeReference message).",
                        "7": "#",
                        "8": "# header.frame_id is the frame of reference reported by the satellite",
                        "9": "#        receiver, usually the location of the antenna.  This is a",
                        "10": "#        Euclidean frame relative to the vehicle, not a reference",
                        "11": "#        ellipsoid.",
                        "12": "Header header",
                        "13": "",
                        "14": "# satellite fix status information",
                        "15": "NavSatStatus status",
                        "16": "",
                        "17": "# Latitude [degrees]. Positive is north of equator; negative is south.",
                        "18": "float64 latitude",
                        "19": "",
                        "20": "# Longitude [degrees]. Positive is east of prime meridian; negative is west.",
                        "21": "float64 longitude",
                        "22": "",
                        "23": "# Altitude [m]. Positive is above the WGS 84 ellipsoid",
                        "24": "# (quiet NaN if no altitude is available).",
                        "25": "float64 altitude",
                        "26": "",
                        "27": "# Position covariance [m^2] defined relative to a tangential plane",
                        "28": "# through the reported position. The components are East, North, and",
                        "29": "# Up (ENU), in row-major order.",
                        "30": "#",
                        "31": "# Beware: this coordinate system exhibits singularities at the poles.",
                        "32": "",
                        "33": "float64[9] position_covariance",
                        "34": "",
                        "35": "# If the covariance of the fix is known, fill it in completely. If the",
                        "36": "# GPS receiver provides the variance of each measurement, put them",
                        "37": "# along the diagonal. If only Dilution of Precision is available,",
                        "38": "# estimate an approximate covariance from that.",
                        "39": "",
                        "40": "uint8 COVARIANCE_TYPE_UNKNOWN = 0",
                        "41": "uint8 COVARIANCE_TYPE_APPROXIMATED = 1",
                        "42": "uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2",
                        "43": "uint8 COVARIANCE_TYPE_KNOWN = 3",
                        "44": "",
                        "45": "uint8 position_covariance_type"
                }
        },
        "sensor_msgs/NavSatStatus": {
                "name": "sensor_msgs/NavSatStatus",
                "elementType": "messageType",
                "fields": {
                        "STATUS_NO_FIX=-1": {
                                "name": "STATUS_NO_FIX=-1",
                                "elementType": "dataType",
                                "storageType": "int8",
                                "dmfDataType": "TBD"
                        },
                        "STATUS_FIX=0": {
                                "name": "STATUS_FIX=0",
                                "elementType": "dataType",
                                "storageType": "int8",
                                "dmfDataType": "TBD"
                        },
                        "STATUS_SBAS_FIX=1": {
                                "name": "STATUS_SBAS_FIX=1",
                                "elementType": "dataType",
                                "storageType": "int8",
                                "dmfDataType": "TBD"
                        },
                        "STATUS_GBAS_FIX=2": {
                                "name": "STATUS_GBAS_FIX=2",
                                "elementType": "dataType",
                                "storageType": "int8",
                                "dmfDataType": "TBD"
                        },
                        "SERVICE_GPS=1": {
                                "name": "SERVICE_GPS=1",
                                "elementType": "dataType",
                                "storageType": "uint16",
                                "dmfDataType": "TBD"
                        },
                        "SERVICE_GLONASS=2": {
                                "name": "SERVICE_GLONASS=2",
                                "elementType": "dataType",
                                "storageType": "uint16",
                                "dmfDataType": "TBD"
                        },
                        "SERVICE_COMPASS=4": {
                                "name": "SERVICE_COMPASS=4",
                                "elementType": "dataType",
                                "storageType": "uint16",
                                "dmfDataType": "TBD"
                        },
                        "SERVICE_GALILEO=8": {
                                "name": "SERVICE_GALILEO=8",
                                "elementType": "dataType",
                                "storageType": "uint16",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "dataType",
                                "storageType": "int8",
                                "dmfDataType": "TBD"
                        },
                        "service": {
                                "name": "service",
                                "elementType": "dataType",
                                "storageType": "uint16",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Navigation Satellite fix status for any Global Navigation Satellite System",
                        "1": "",
                        "2": "# Whether to output an augmented fix is determined by both the fix",
                        "3": "# type and the last time differential corrections were received.  A",
                        "4": "# fix is valid when status >= STATUS_FIX.",
                        "5": "",
                        "6": "int8 STATUS_NO_FIX =  -1        # unable to fix position",
                        "7": "int8 STATUS_FIX =      0        # unaugmented fix",
                        "8": "int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation",
                        "9": "int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation",
                        "10": "",
                        "11": "int8 status",
                        "12": "",
                        "13": "# Bits defining which Global Navigation Satellite System signals were",
                        "14": "# used by the receiver.",
                        "15": "",
                        "16": "uint16 SERVICE_GPS =     1",
                        "17": "uint16 SERVICE_GLONASS = 2",
                        "18": "uint16 SERVICE_COMPASS = 4      # includes BeiDou.",
                        "19": "uint16 SERVICE_GALILEO = 8",
                        "20": "",
                        "21": "uint16 service"
                }
        },
        "sensor_msgs/PointCloud": {
                "name": "sensor_msgs/PointCloud",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "points": {
                                "name": "points",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point32[]",
                                "dmfDataType": "TBD"
                        },
                        "channels": {
                                "name": "channels",
                                "elementType": "messageType",
                                "type": "sensor_msgs/ChannelFloat32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message holds a collection of 3d points, plus optional additional",
                        "1": "# information about each point.",
                        "2": "",
                        "3": "# Time of sensor data acquisition, coordinate frame ID.",
                        "4": "Header header",
                        "5": "",
                        "6": "# Array of 3d points. Each Point32 should be interpreted as a 3d point",
                        "7": "# in the frame given in the header.",
                        "8": "geometry_msgs/Point32[] points",
                        "9": "",
                        "10": "# Each channel should have the same number of elements as points array,",
                        "11": "# and the data in each channel should correspond 1:1 with each point.",
                        "12": "# Channel names in common practice are listed in ChannelFloat32.msg.",
                        "13": "ChannelFloat32[] channels"
                }
        },
        "sensor_msgs/PointCloud2": {
                "name": "sensor_msgs/PointCloud2",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "height": {
                                "name": "height",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "width": {
                                "name": "width",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "fields": {
                                "name": "fields",
                                "elementType": "messageType",
                                "type": "sensor_msgs/PointField[]",
                                "dmfDataType": "TBD"
                        },
                        "is_bigendian": {
                                "name": "is_bigendian",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "point_step": {
                                "name": "point_step",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "row_step": {
                                "name": "row_step",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint8[]",
                                "dmfDataType": "TBD"
                        },
                        "is_dense": {
                                "name": "is_dense",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message holds a collection of N-dimensional points, which may",
                        "1": "# contain additional information such as normals, intensity, etc. The",
                        "2": "# point data is stored as a binary blob, its layout described by the",
                        "3": "# contents of the \"fields\" array.",
                        "4": "",
                        "5": "# The point cloud data may be organized 2d (image-like) or 1d",
                        "6": "# (unordered). Point clouds organized as 2d images may be produced by",
                        "7": "# camera depth sensors such as stereo or time-of-flight.",
                        "8": "",
                        "9": "# Time of sensor data acquisition, and the coordinate frame ID (for 3d",
                        "10": "# points).",
                        "11": "Header header",
                        "12": "",
                        "13": "# 2D structure of the point cloud. If the cloud is unordered, height is",
                        "14": "# 1 and width is the length of the point cloud.",
                        "15": "uint32 height",
                        "16": "uint32 width",
                        "17": "",
                        "18": "# Describes the channels and their layout in the binary data blob.",
                        "19": "PointField[] fields",
                        "20": "",
                        "21": "bool    is_bigendian # Is this data bigendian?",
                        "22": "uint32  point_step   # Length of a point in bytes",
                        "23": "uint32  row_step     # Length of a row in bytes",
                        "24": "uint8[] data         # Actual point data, size is (row_step*height)",
                        "25": "",
                        "26": "bool is_dense        # True if there are no invalid points"
                }
        },
        "sensor_msgs/PointField": {
                "name": "sensor_msgs/PointField",
                "elementType": "messageType",
                "fields": {
                        "INT8=1": {
                                "name": "INT8=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "UINT8=2": {
                                "name": "UINT8=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "INT16=3": {
                                "name": "INT16=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "UINT16=4": {
                                "name": "UINT16=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "INT32=5": {
                                "name": "INT32=5",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "UINT32=6": {
                                "name": "UINT32=6",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "FLOAT32=7": {
                                "name": "FLOAT32=7",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "FLOAT64=8": {
                                "name": "FLOAT64=8",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "offset": {
                                "name": "offset",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "datatype": {
                                "name": "datatype",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "count": {
                                "name": "count",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message holds the description of one point entry in the",
                        "1": "# PointCloud2 message format.",
                        "2": "uint8 INT8    = 1",
                        "3": "uint8 UINT8   = 2",
                        "4": "uint8 INT16   = 3",
                        "5": "uint8 UINT16  = 4",
                        "6": "uint8 INT32   = 5",
                        "7": "uint8 UINT32  = 6",
                        "8": "uint8 FLOAT32 = 7",
                        "9": "uint8 FLOAT64 = 8",
                        "10": "",
                        "11": "string name      # Name of field",
                        "12": "uint32 offset    # Offset from start of point struct",
                        "13": "uint8  datatype  # Datatype enumeration, see above",
                        "14": "uint32 count     # How many elements in the field"
                }
        },
        "sensor_msgs/Range": {
                "name": "sensor_msgs/Range",
                "elementType": "messageType",
                "fields": {
                        "ULTRASOUND=0": {
                                "name": "ULTRASOUND=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "INFRARED=1": {
                                "name": "INFRARED=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "radiation_type": {
                                "name": "radiation_type",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "field_of_view": {
                                "name": "field_of_view",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "min_range": {
                                "name": "min_range",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "max_range": {
                                "name": "max_range",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "range": {
                                "name": "range",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Single range reading from an active ranger that emits energy and reports",
                        "1": "# one range reading that is valid along an arc at the distance measured. ",
                        "2": "# This message is  not appropriate for laser scanners. See the LaserScan",
                        "3": "# message if you are working with a laser scanner.",
                        "4": "",
                        "5": "# This message also can represent a fixed-distance (binary) ranger.  This",
                        "6": "# sensor will have min_range===max_range===distance of detection.",
                        "7": "# These sensors follow REP 117 and will output -Inf if the object is detected",
                        "8": "# and +Inf if the object is outside of the detection range.",
                        "9": "",
                        "10": "Header header           # timestamp in the header is the time the ranger",
                        "11": "                        # returned the distance reading",
                        "12": "",
                        "13": "# Radiation type enums",
                        "14": "# If you want a value added to this list, send an email to the ros-users list",
                        "15": "uint8 ULTRASOUND=0",
                        "16": "uint8 INFRARED=1",
                        "17": "",
                        "18": "uint8 radiation_type    # the type of radiation used by the sensor",
                        "19": "                        # (sound, IR, etc) [enum]",
                        "20": "",
                        "21": "float32 field_of_view   # the size of the arc that the distance reading is",
                        "22": "                        # valid for [rad]",
                        "23": "                        # the object causing the range reading may have",
                        "24": "                        # been anywhere within -field_of_view/2 and",
                        "25": "                        # field_of_view/2 at the measured range. ",
                        "26": "                        # 0 angle corresponds to the x-axis of the sensor.",
                        "27": "",
                        "28": "float32 min_range       # minimum range value [m]",
                        "29": "float32 max_range       # maximum range value [m]",
                        "30": "                        # Fixed distance rangers require min_range==max_range",
                        "31": "",
                        "32": "float32 range           # range data [m]",
                        "33": "                        # (Note: values < range_min or > range_max",
                        "34": "                        # should be discarded)",
                        "35": "                        # Fixed distance rangers only output -Inf or +Inf.",
                        "36": "                        # -Inf represents a detection within fixed distance.",
                        "37": "                        # (Detection too close to the sensor to quantify)",
                        "38": "                        # +Inf represents no detection within the fixed distance.",
                        "39": "                        # (Object out of range"
                }
        },
        "sensor_msgs/RegionOfInterest": {
                "name": "sensor_msgs/RegionOfInterest",
                "elementType": "messageType",
                "fields": {
                        "x_offset": {
                                "name": "x_offset",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "y_offset": {
                                "name": "y_offset",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "height": {
                                "name": "height",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "width": {
                                "name": "width",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "do_rectify": {
                                "name": "do_rectify",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# This message is used to specify a region of interest within an image.",
                        "1": "#",
                        "2": "# When used to specify the ROI setting of the camera when the image was",
                        "3": "# taken, the height and width fields should either match the height and",
                        "4": "# width fields for the associated image; or height = width = 0",
                        "5": "# indicates that the full resolution image was captured.",
                        "6": "",
                        "7": "uint32 x_offset  # Leftmost pixel of the ROI",
                        "8": "                 # (0 if the ROI includes the left edge of the image)",
                        "9": "uint32 y_offset  # Topmost pixel of the ROI",
                        "10": "                 # (0 if the ROI includes the top edge of the image)",
                        "11": "uint32 height    # Height of ROI",
                        "12": "uint32 width     # Width of ROI",
                        "13": "",
                        "14": "# True if a distinct rectified ROI should be calculated from the \"raw\"",
                        "15": "# ROI in this message. Typically this should be False if the full image",
                        "16": "# is captured (ROI not used), and True if a subwindow is captured (ROI",
                        "17": "# used).",
                        "18": "bool do_rectify"
                }
        },
        "sensor_msgs/RelativeHumidity": {
                "name": "sensor_msgs/RelativeHumidity",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "relative_humidity": {
                                "name": "relative_humidity",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "variance": {
                                "name": "variance",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": " # Single reading from a relative humidity sensor.  Defines the ratio of partial",
                        "1": " # pressure of water vapor to the saturated vapor pressure at a temperature.",
                        "2": "",
                        "3": " Header header             # timestamp of the measurement",
                        "4": "                           # frame_id is the location of the humidity sensor",
                        "5": "",
                        "6": " float64 relative_humidity # Expression of the relative humidity",
                        "7": "                           # from 0.0 to 1.0.",
                        "8": "                           # 0.0 is no partial pressure of water vapor",
                        "9": "                           # 1.0 represents partial pressure of saturation",
                        "10": "",
                        "11": " float64 variance          # 0 is interpreted as variance unknow"
                }
        },
        "sensor_msgs/Temperature": {
                "name": "sensor_msgs/Temperature",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "temperature": {
                                "name": "temperature",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "variance": {
                                "name": "variance",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": " # Single temperature reading.",
                        "1": "",
                        "2": " Header header           # timestamp is the time the temperature was measured",
                        "3": "                         # frame_id is the location of the temperature reading",
                        "4": "",
                        "5": " float64 temperature     # Measurement of the Temperature in Degrees Celsius",
                        "6": "",
                        "7": " float64 variance        # 0 is interpreted as variance unknow"
                }
        },
        "sensor_msgs/TimeReference": {
                "name": "sensor_msgs/TimeReference",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "time_ref": {
                                "name": "time_ref",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "source": {
                                "name": "source",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Measurement from an external time source not actively synchronized with the system clock.",
                        "1": "",
                        "2": "Header header    # stamp is system time for which measurement was valid",
                        "3": "                 # frame_id is not used ",
                        "4": "",
                        "5": "time   time_ref  # corresponding time from this external source",
                        "6": "string source    # (optional) name of time source"
                }
        },
        "shape_msgs/Mesh": {
                "name": "shape_msgs/Mesh",
                "elementType": "messageType",
                "fields": {
                        "triangles": {
                                "name": "triangles",
                                "elementType": "messageType",
                                "type": "shape_msgs/MeshTriangle[]",
                                "dmfDataType": "TBD"
                        },
                        "vertices": {
                                "name": "vertices",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Definition of a mesh",
                        "1": "",
                        "2": "# list of triangles; the index values refer to positions in vertices[]",
                        "3": "MeshTriangle[] triangles",
                        "4": "",
                        "5": "# the actual vertices that make up the mesh",
                        "6": "geometry_msgs/Point[] vertices"
                }
        },
        "shape_msgs/MeshTriangle": {
                "name": "shape_msgs/MeshTriangle",
                "elementType": "messageType",
                "fields": {
                        "vertex_indices": {
                                "name": "vertex_indices",
                                "elementType": "messageType",
                                "type": "uint32[3]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Definition of a triangle's vertices",
                        "1": "uint32[3] vertex_indices"
                }
        },
        "shape_msgs/Plane": {
                "name": "shape_msgs/Plane",
                "elementType": "messageType",
                "fields": {
                        "coef": {
                                "name": "coef",
                                "elementType": "messageType",
                                "type": "float64[4]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Representation of a plane, using the plane equation ax + by + cz + d = 0",
                        "1": "",
                        "2": "# a := coef[0]",
                        "3": "# b := coef[1]",
                        "4": "# c := coef[2]",
                        "5": "# d := coef[3]",
                        "6": "",
                        "7": "float64[4] coef"
                }
        },
        "shape_msgs/SolidPrimitive": {
                "name": "shape_msgs/SolidPrimitive",
                "elementType": "messageType",
                "fields": {
                        "BOX=1": {
                                "name": "BOX=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "SPHERE=2": {
                                "name": "SPHERE=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CYLINDER=3": {
                                "name": "CYLINDER=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CONE=4": {
                                "name": "CONE=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "BOX_X=0": {
                                "name": "BOX_X=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "BOX_Y=1": {
                                "name": "BOX_Y=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "BOX_Z=2": {
                                "name": "BOX_Z=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "SPHERE_RADIUS=0": {
                                "name": "SPHERE_RADIUS=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CYLINDER_HEIGHT=0": {
                                "name": "CYLINDER_HEIGHT=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CYLINDER_RADIUS=1": {
                                "name": "CYLINDER_RADIUS=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CONE_HEIGHT=0": {
                                "name": "CONE_HEIGHT=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CONE_RADIUS=1": {
                                "name": "CONE_RADIUS=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "dimensions": {
                                "name": "dimensions",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Define box, sphere, cylinder, cone ",
                        "1": "# All shapes are defined to have their bounding boxes centered around 0,0,0.",
                        "2": "",
                        "3": "uint8 BOX=1",
                        "4": "uint8 SPHERE=2",
                        "5": "uint8 CYLINDER=3",
                        "6": "uint8 CONE=4",
                        "7": "",
                        "8": "# The type of the shape",
                        "9": "uint8 type",
                        "10": "",
                        "11": "",
                        "12": "# The dimensions of the shape",
                        "13": "float64[] dimensions",
                        "14": "",
                        "15": "# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array",
                        "16": "",
                        "17": "# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding",
                        "18": "# sides of the box.",
                        "19": "uint8 BOX_X=0",
                        "20": "uint8 BOX_Y=1",
                        "21": "uint8 BOX_Z=2",
                        "22": "",
                        "23": "",
                        "24": "# For the SPHERE type, only one component is used, and it gives the radius of",
                        "25": "# the sphere.",
                        "26": "uint8 SPHERE_RADIUS=0",
                        "27": "",
                        "28": "",
                        "29": "# For the CYLINDER and CONE types, the center line is oriented along",
                        "30": "# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component",
                        "31": "# of dimensions gives the height of the cylinder (cone).  The",
                        "32": "# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the",
                        "33": "# radius of the base of the cylinder (cone).  Cone and cylinder",
                        "34": "# primitives are defined to be circular. The tip of the cone is",
                        "35": "# pointing up, along +Z axis.",
                        "36": "",
                        "37": "uint8 CYLINDER_HEIGHT=0",
                        "38": "uint8 CYLINDER_RADIUS=1",
                        "39": "",
                        "40": "uint8 CONE_HEIGHT=0",
                        "41": "uint8 CONE_RADIUS=1"
                }
        },
        "smach_msgs/SmachContainerInitialStatusCmd": {
                "name": "smach_msgs/SmachContainerInitialStatusCmd",
                "elementType": "messageType",
                "fields": {
                        "path": {
                                "name": "path",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "initial_states": {
                                "name": "initial_states",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "local_data": {
                                "name": "local_data",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# The path to the node in the server",
                        "1": "string path",
                        "2": "",
                        "3": "# The desired initial state(s)",
                        "4": "string[] initial_states",
                        "5": "",
                        "6": "# Initial values for the local user data of the state machine",
                        "7": "# A pickled user data structure",
                        "8": "# i.e. the UserData's internal dictionary",
                        "9": "string local_data"
                }
        },
        "smach_msgs/SmachContainerStatus": {
                "name": "smach_msgs/SmachContainerStatus",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "path": {
                                "name": "path",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "initial_states": {
                                "name": "initial_states",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "active_states": {
                                "name": "active_states",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "local_data": {
                                "name": "local_data",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "info": {
                                "name": "info",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header",
                        "1": "",
                        "2": "# The path to this node in the server",
                        "3": "string path",
                        "4": "",
                        "5": "# The initial state description",
                        "6": "# Effects an arc from the top state to each one",
                        "7": "string[] initial_states",
                        "8": "",
                        "9": "# The current state description",
                        "10": "string[] active_states",
                        "11": "",
                        "12": "# A pickled user data structure",
                        "13": "# i.e. the UserData's internal dictionary",
                        "14": "string local_data",
                        "15": "",
                        "16": "# Debugging info string",
                        "17": "string info"
                }
        },
        "smach_msgs/SmachContainerStructure": {
                "name": "smach_msgs/SmachContainerStructure",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "path": {
                                "name": "path",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "children": {
                                "name": "children",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "internal_outcomes": {
                                "name": "internal_outcomes",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "outcomes_from": {
                                "name": "outcomes_from",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "outcomes_to": {
                                "name": "outcomes_to",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "container_outcomes": {
                                "name": "container_outcomes",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header",
                        "1": "",
                        "2": "# The path to this node in the server",
                        "3": "string path",
                        "4": "",
                        "5": "# The children of this node",
                        "6": "string[] children",
                        "7": "",
                        "8": "# The outcome edges",
                        "9": "# Each index across these arrays denote one edge",
                        "10": "string[] internal_outcomes",
                        "11": "string[] outcomes_from",
                        "12": "string[] outcomes_to",
                        "13": "",
                        "14": "# The potential outcomes from this container",
                        "15": "string[] container_outcomes"
                }
        },
        "std_msgs/Bool": {
                "name": "std_msgs/Bool",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "bool dat"
                }
        },
        "std_msgs/Byte": {
                "name": "std_msgs/Byte",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "byte data"
                }
        },
        "std_msgs/ByteMultiArray": {
                "name": "std_msgs/ByteMultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "messageType",
                                "type": "byte[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "byte[]            data          # array of data",
                        "5": ""
                }
        },
        "std_msgs/Char": {
                "name": "std_msgs/Char",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "messageType",
                                "type": "char",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "char dat"
                }
        },
        "std_msgs/ColorRGBA": {
                "name": "std_msgs/ColorRGBA",
                "elementType": "messageType",
                "fields": {
                        "r": {
                                "name": "r",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "g": {
                                "name": "g",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "b": {
                                "name": "b",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "a": {
                                "name": "a",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "float32 r",
                        "1": "float32 g",
                        "2": "float32 b",
                        "3": "float32 a"
                }
        },
        "std_msgs/Duration": {
                "name": "std_msgs/Duration",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "duration data"
                }
        },
        "std_msgs/Empty": {
                "name": "std_msgs/Empty",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "std_msgs/Float32": {
                "name": "std_msgs/Float32",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "float32 dat"
                }
        },
        "std_msgs/Float32MultiArray": {
                "name": "std_msgs/Float32MultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "float32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "float32[]         data          # array of data",
                        "5": ""
                }
        },
        "std_msgs/Float64": {
                "name": "std_msgs/Float64",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "float64 dat"
                }
        },
        "std_msgs/Float64MultiArray": {
                "name": "std_msgs/Float64MultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "float64[]         data          # array of data",
                        "5": ""
                }
        },
        "std_msgs/Header": {
                "name": "std_msgs/Header",
                "elementType": "messageType",
                "fields": {
                        "seq": {
                                "name": "seq",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "stamp": {
                                "name": "stamp",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "frame_id": {
                                "name": "frame_id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Standard metadata for higher-level stamped data types.",
                        "1": "# This is generally used to communicate timestamped data ",
                        "2": "# in a particular coordinate frame.",
                        "3": "# ",
                        "4": "# sequence ID: consecutively increasing ID ",
                        "5": "uint32 seq",
                        "6": "#Two-integer timestamp that is expressed as:",
                        "7": "# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')",
                        "8": "# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')",
                        "9": "# time-handling sugar is provided by the client library",
                        "10": "time stamp",
                        "11": "#Frame this data is associated with",
                        "12": "string frame_id"
                }
        },
        "std_msgs/Int16": {
                "name": "std_msgs/Int16",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "int16",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "int16 data"
                }
        },
        "std_msgs/Int16MultiArray": {
                "name": "std_msgs/Int16MultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "int16[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "int16[]           data          # array of data",
                        "5": ""
                }
        },
        "std_msgs/Int32": {
                "name": "std_msgs/Int32",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "int32 dat"
                }
        },
        "std_msgs/Int32MultiArray": {
                "name": "std_msgs/Int32MultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "int32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "int32[]           data          # array of data",
                        "5": ""
                }
        },
        "std_msgs/Int64": {
                "name": "std_msgs/Int64",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "int64 dat"
                }
        },
        "std_msgs/Int64MultiArray": {
                "name": "std_msgs/Int64MultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "int64[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "int64[]           data          # array of data",
                        "5": ""
                }
        },
        "std_msgs/Int8": {
                "name": "std_msgs/Int8",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "int8",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "int8 data"
                }
        },
        "std_msgs/Int8MultiArray": {
                "name": "std_msgs/Int8MultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "int8[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "int8[]            data          # array of data",
                        "5": ""
                }
        },
        "std_msgs/MultiArrayDimension": {
                "name": "std_msgs/MultiArrayDimension",
                "elementType": "messageType",
                "fields": {
                        "label": {
                                "name": "label",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "size": {
                                "name": "size",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "stride": {
                                "name": "stride",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string label   # label of given dimension",
                        "1": "uint32 size    # size of given dimension (in type units)",
                        "2": "uint32 stride  # stride of given dimensio"
                }
        },
        "std_msgs/MultiArrayLayout": {
                "name": "std_msgs/MultiArrayLayout",
                "elementType": "messageType",
                "fields": {
                        "dim": {
                                "name": "dim",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayDimension[]",
                                "dmfDataType": "TBD"
                        },
                        "data_offset": {
                                "name": "data_offset",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# The multiarray declares a generic multi-dimensional array of a",
                        "1": "# particular data type.  Dimensions are ordered from outer most",
                        "2": "# to inner most.",
                        "3": "",
                        "4": "MultiArrayDimension[] dim # Array of dimension properties",
                        "5": "uint32 data_offset        # padding elements at front of data",
                        "6": "",
                        "7": "# Accessors should ALWAYS be written in terms of dimension stride",
                        "8": "# and specified outer-most dimension first.",
                        "9": "# ",
                        "10": "# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]",
                        "11": "#",
                        "12": "# A standard, 3-channel 640x480 image with interleaved color channels",
                        "13": "# would be specified as:",
                        "14": "#",
                        "15": "# dim[0].label  = \"height\"",
                        "16": "# dim[0].size   = 480",
                        "17": "# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)",
                        "18": "# dim[1].label  = \"width\"",
                        "19": "# dim[1].size   = 640",
                        "20": "# dim[1].stride = 3*640 = 1920",
                        "21": "# dim[2].label  = \"channel\"",
                        "22": "# dim[2].size   = 3",
                        "23": "# dim[2].stride = 3",
                        "24": "#",
                        "25": "# multiarray(i,j,k) refers to the ith row, jth column, and kth channel."
                }
        },
        "std_msgs/String": {
                "name": "std_msgs/String",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "string data"
                }
        },
        "std_msgs/Time": {
                "name": "std_msgs/Time",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "time data"
                }
        },
        "std_msgs/UInt16": {
                "name": "std_msgs/UInt16",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint16",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "uint16 data"
                }
        },
        "std_msgs/UInt16MultiArray": {
                "name": "std_msgs/UInt16MultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint16[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "uint16[]            data        # array of data",
                        "5": ""
                }
        },
        "std_msgs/UInt32": {
                "name": "std_msgs/UInt32",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "uint32 dat"
                }
        },
        "std_msgs/UInt32MultiArray": {
                "name": "std_msgs/UInt32MultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint32[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "uint32[]          data          # array of data",
                        "5": ""
                }
        },
        "std_msgs/UInt64": {
                "name": "std_msgs/UInt64",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "uint64 dat"
                }
        },
        "std_msgs/UInt64MultiArray": {
                "name": "std_msgs/UInt64MultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint64[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "uint64[]          data          # array of data",
                        "5": ""
                }
        },
        "std_msgs/UInt8": {
                "name": "std_msgs/UInt8",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "uint8 data"
                }
        },
        "std_msgs/UInt8MultiArray": {
                "name": "std_msgs/UInt8MultiArray",
                "elementType": "messageType",
                "fields": {
                        "layout": {
                                "name": "layout",
                                "elementType": "messageType",
                                "type": "std_msgs/MultiArrayLayout",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint8[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Please look at the MultiArrayLayout message definition for",
                        "1": "# documentation on all multiarrays.",
                        "2": "",
                        "3": "MultiArrayLayout  layout        # specification of data layout",
                        "4": "uint8[]           data          # array of data",
                        "5": ""
                }
        },
        "stereo_msgs/DisparityImage": {
                "name": "stereo_msgs/DisparityImage",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "image": {
                                "name": "image",
                                "elementType": "messageType",
                                "type": "sensor_msgs/Image",
                                "dmfDataType": "TBD"
                        },
                        "f": {
                                "name": "f",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "T": {
                                "name": "T",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "valid_window": {
                                "name": "valid_window",
                                "elementType": "messageType",
                                "type": "sensor_msgs/RegionOfInterest",
                                "dmfDataType": "TBD"
                        },
                        "min_disparity": {
                                "name": "min_disparity",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "max_disparity": {
                                "name": "max_disparity",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "delta_d": {
                                "name": "delta_d",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Separate header for compatibility with current TimeSynchronizer.",
                        "1": "# Likely to be removed in a later release, use image.header instead.",
                        "2": "Header header",
                        "3": "",
                        "4": "# Floating point disparity image. The disparities are pre-adjusted for any",
                        "5": "# x-offset between the principal points of the two cameras (in the case",
                        "6": "# that they are verged). That is: d = x_l - x_r - (cx_l - cx_r)",
                        "7": "sensor_msgs/Image image",
                        "8": "",
                        "9": "# Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.",
                        "10": "float32 f # Focal length, pixels",
                        "11": "float32 T # Baseline, world units",
                        "12": "",
                        "13": "# Subwindow of (potentially) valid disparity values.",
                        "14": "sensor_msgs/RegionOfInterest valid_window",
                        "15": "",
                        "16": "# The range of disparities searched.",
                        "17": "# In the disparity image, any disparity less than min_disparity is invalid.",
                        "18": "# The disparity search range defines the horopter, or 3D volume that the",
                        "19": "# stereo algorithm can \"see\". Points with Z outside of:",
                        "20": "#     Z_min = fT / max_disparity",
                        "21": "#     Z_max = fT / min_disparity",
                        "22": "# could not be found.",
                        "23": "float32 min_disparity",
                        "24": "float32 max_disparity",
                        "25": "",
                        "26": "# Smallest allowed disparity increment. The smallest achievable depth range",
                        "27": "# resolution is delta_Z = (Z^2/fT)*delta_d.",
                        "28": "float32 delta_d"
                }
        },
        "tf/tfMessage": {
                "name": "tf/tfMessage",
                "elementType": "messageType",
                "fields": {
                        "transforms": {
                                "name": "transforms",
                                "elementType": "messageType",
                                "type": "geometry_msgs/TransformStamped[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "geometry_msgs/TransformStamped[] transforms"
                }
        },
        "tf2_msgs/LookupTransformAction": {
                "name": "tf2_msgs/LookupTransformAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "tf2_msgs/LookupTransformActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "tf2_msgs/LookupTransformActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "tf2_msgs/LookupTransformActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "LookupTransformActionGoal action_goal",
                        "3": "LookupTransformActionResult action_result",
                        "4": "LookupTransformActionFeedback action_feedback"
                }
        },
        "tf2_msgs/LookupTransformActionFeedback": {
                "name": "tf2_msgs/LookupTransformActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "tf2_msgs/LookupTransformFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "LookupTransformFeedback feedback"
                }
        },
        "tf2_msgs/LookupTransformActionGoal": {
                "name": "tf2_msgs/LookupTransformActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "tf2_msgs/LookupTransformGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "LookupTransformGoal goal"
                }
        },
        "tf2_msgs/LookupTransformActionResult": {
                "name": "tf2_msgs/LookupTransformActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "tf2_msgs/LookupTransformResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "LookupTransformResult result"
                }
        },
        "tf2_msgs/LookupTransformFeedback": {
                "name": "tf2_msgs/LookupTransformFeedback",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": ""
                }
        },
        "tf2_msgs/LookupTransformGoal": {
                "name": "tf2_msgs/LookupTransformGoal",
                "elementType": "messageType",
                "fields": {
                        "target_frame": {
                                "name": "target_frame",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "source_frame": {
                                "name": "source_frame",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "source_time": {
                                "name": "source_time",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "timeout": {
                                "name": "timeout",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "target_time": {
                                "name": "target_time",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "fixed_frame": {
                                "name": "fixed_frame",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "advanced": {
                                "name": "advanced",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "#Simple API",
                        "2": "string target_frame",
                        "3": "string source_frame",
                        "4": "time source_time",
                        "5": "duration timeout",
                        "6": "",
                        "7": "#Advanced API",
                        "8": "time target_time",
                        "9": "string fixed_frame",
                        "10": "",
                        "11": "#Whether or not to use the advanced API",
                        "12": "bool advanced",
                        "13": ""
                }
        },
        "tf2_msgs/LookupTransformResult": {
                "name": "tf2_msgs/LookupTransformResult",
                "elementType": "messageType",
                "fields": {
                        "transform": {
                                "name": "transform",
                                "elementType": "messageType",
                                "type": "geometry_msgs/TransformStamped",
                                "dmfDataType": "TBD"
                        },
                        "error": {
                                "name": "error",
                                "elementType": "messageType",
                                "type": "tf2_msgs/TF2Error",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "geometry_msgs/TransformStamped transform",
                        "2": "tf2_msgs/TF2Error error"
                }
        },
        "tf2_msgs/TF2Error": {
                "name": "tf2_msgs/TF2Error",
                "elementType": "messageType",
                "fields": {
                        "NO_ERROR=0": {
                                "name": "NO_ERROR=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "LOOKUP_ERROR=1": {
                                "name": "LOOKUP_ERROR=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CONNECTIVITY_ERROR=2": {
                                "name": "CONNECTIVITY_ERROR=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "EXTRAPOLATION_ERROR=3": {
                                "name": "EXTRAPOLATION_ERROR=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "INVALID_ARGUMENT_ERROR=4": {
                                "name": "INVALID_ARGUMENT_ERROR=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "TIMEOUT_ERROR=5": {
                                "name": "TIMEOUT_ERROR=5",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "TRANSFORM_ERROR=6": {
                                "name": "TRANSFORM_ERROR=6",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "error": {
                                "name": "error",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "error_string": {
                                "name": "error_string",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "uint8 NO_ERROR = 0",
                        "1": "uint8 LOOKUP_ERROR = 1",
                        "2": "uint8 CONNECTIVITY_ERROR = 2",
                        "3": "uint8 EXTRAPOLATION_ERROR = 3",
                        "4": "uint8 INVALID_ARGUMENT_ERROR = 4",
                        "5": "uint8 TIMEOUT_ERROR = 5",
                        "6": "uint8 TRANSFORM_ERROR = 6",
                        "7": "",
                        "8": "uint8 error",
                        "9": "string error_string"
                }
        },
        "tf2_msgs/TFMessage": {
                "name": "tf2_msgs/TFMessage",
                "elementType": "messageType",
                "fields": {
                        "transforms": {
                                "name": "transforms",
                                "elementType": "messageType",
                                "type": "geometry_msgs/TransformStamped[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "geometry_msgs/TransformStamped[] transforms"
                }
        },
        "theora_image_transport/Packet": {
                "name": "theora_image_transport/Packet",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "uint8[]",
                                "dmfDataType": "TBD"
                        },
                        "b_o_s": {
                                "name": "b_o_s",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "e_o_s": {
                                "name": "e_o_s",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "granulepos": {
                                "name": "granulepos",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        },
                        "packetno": {
                                "name": "packetno",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ROS message adaptation of the ogg_packet struct from libogg,",
                        "1": "# see http://www.xiph.org/ogg/doc/libogg/ogg_packet.html.",
                        "2": "",
                        "3": "Header header     # Original sensor_msgs/Image header",
                        "4": "uint8[] data      # Raw Theora packet data (combines packet and bytes fields from ogg_packet)",
                        "5": "int32 b_o_s       # Flag indicating whether this packet begins a logical bitstream",
                        "6": "int32 e_o_s       # Flag indicating whether this packet ends a bitstream",
                        "7": "int64 granulepos  # A number indicating the position of this packet in the decoded data",
                        "8": "int64 packetno    # Sequential number of this packet in the ogg bitstream"
                }
        },
        "trajectory_msgs/JointTrajectory": {
                "name": "trajectory_msgs/JointTrajectory",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "joint_names": {
                                "name": "joint_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "points": {
                                "name": "points",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/JointTrajectoryPoint[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Header header",
                        "1": "string[] joint_names",
                        "2": "JointTrajectoryPoint[] points"
                }
        },
        "trajectory_msgs/JointTrajectoryPoint": {
                "name": "trajectory_msgs/JointTrajectoryPoint",
                "elementType": "messageType",
                "fields": {
                        "positions": {
                                "name": "positions",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "velocities": {
                                "name": "velocities",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "accelerations": {
                                "name": "accelerations",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "effort": {
                                "name": "effort",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "time_from_start": {
                                "name": "time_from_start",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Each trajectory point specifies either positions[, velocities[, accelerations]]",
                        "1": "# or positions[, effort] for the trajectory to be executed.",
                        "2": "# All specified values are in the same order as the joint names in JointTrajectory.msg",
                        "3": "",
                        "4": "float64[] positions",
                        "5": "float64[] velocities",
                        "6": "float64[] accelerations",
                        "7": "float64[] effort",
                        "8": "duration time_from_start"
                }
        },
        "trajectory_msgs/MultiDOFJointTrajectory": {
                "name": "trajectory_msgs/MultiDOFJointTrajectory",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "joint_names": {
                                "name": "joint_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "points": {
                                "name": "points",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/MultiDOFJointTrajectoryPoint[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# The header is used to specify the coordinate frame and the reference time for the trajectory durations",
                        "1": "Header header",
                        "2": "",
                        "3": "# A representation of a multi-dof joint trajectory (each point is a transformation)",
                        "4": "# Each point along the trajectory will include an array of positions/velocities/accelerations",
                        "5": "# that has the same length as the array of joint names, and has the same order of joints as ",
                        "6": "# the joint names array.",
                        "7": "",
                        "8": "string[] joint_names",
                        "9": "MultiDOFJointTrajectoryPoint[] points"
                }
        },
        "trajectory_msgs/MultiDOFJointTrajectoryPoint": {
                "name": "trajectory_msgs/MultiDOFJointTrajectoryPoint",
                "elementType": "messageType",
                "fields": {
                        "transforms": {
                                "name": "transforms",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Transform[]",
                                "dmfDataType": "TBD"
                        },
                        "velocities": {
                                "name": "velocities",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist[]",
                                "dmfDataType": "TBD"
                        },
                        "accelerations": {
                                "name": "accelerations",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist[]",
                                "dmfDataType": "TBD"
                        },
                        "time_from_start": {
                                "name": "time_from_start",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Each multi-dof joint can specify a transform (up to 6 DOF)",
                        "1": "geometry_msgs/Transform[] transforms",
                        "2": "",
                        "3": "# There can be a velocity specified for the origin of the joint ",
                        "4": "geometry_msgs/Twist[] velocities",
                        "5": "",
                        "6": "# There can be an acceleration specified for the origin of the joint ",
                        "7": "geometry_msgs/Twist[] accelerations",
                        "8": "",
                        "9": "duration time_from_start"
                }
        },
        "turtle_actionlib/ShapeAction": {
                "name": "turtle_actionlib/ShapeAction",
                "elementType": "messageType",
                "fields": {
                        "action_goal": {
                                "name": "action_goal",
                                "elementType": "messageType",
                                "type": "turtle_actionlib/ShapeActionGoal",
                                "dmfDataType": "TBD"
                        },
                        "action_result": {
                                "name": "action_result",
                                "elementType": "messageType",
                                "type": "turtle_actionlib/ShapeActionResult",
                                "dmfDataType": "TBD"
                        },
                        "action_feedback": {
                                "name": "action_feedback",
                                "elementType": "messageType",
                                "type": "turtle_actionlib/ShapeActionFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "ShapeActionGoal action_goal",
                        "3": "ShapeActionResult action_result",
                        "4": "ShapeActionFeedback action_feedback"
                }
        },
        "turtle_actionlib/ShapeActionFeedback": {
                "name": "turtle_actionlib/ShapeActionFeedback",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "feedback": {
                                "name": "feedback",
                                "elementType": "messageType",
                                "type": "turtle_actionlib/ShapeFeedback",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "ShapeFeedback feedback"
                }
        },
        "turtle_actionlib/ShapeActionGoal": {
                "name": "turtle_actionlib/ShapeActionGoal",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "goal_id": {
                                "name": "goal_id",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalID",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "turtle_actionlib/ShapeGoal",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalID goal_id",
                        "4": "ShapeGoal goal"
                }
        },
        "turtle_actionlib/ShapeActionResult": {
                "name": "turtle_actionlib/ShapeActionResult",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "actionlib_msgs/GoalStatus",
                                "dmfDataType": "TBD"
                        },
                        "result": {
                                "name": "result",
                                "elementType": "messageType",
                                "type": "turtle_actionlib/ShapeResult",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "",
                        "2": "Header header",
                        "3": "actionlib_msgs/GoalStatus status",
                        "4": "ShapeResult result"
                }
        },
        "turtle_actionlib/ShapeFeedback": {
                "name": "turtle_actionlib/ShapeFeedback",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "#feedback",
                        "2": "",
                        "3": ""
                }
        },
        "turtle_actionlib/ShapeGoal": {
                "name": "turtle_actionlib/ShapeGoal",
                "elementType": "messageType",
                "fields": {
                        "edges": {
                                "name": "edges",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "radius": {
                                "name": "radius",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "#goal definition",
                        "2": "int32 edges",
                        "3": "float32 radius"
                }
        },
        "turtle_actionlib/ShapeResult": {
                "name": "turtle_actionlib/ShapeResult",
                "elementType": "messageType",
                "fields": {
                        "interior_angle": {
                                "name": "interior_angle",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "apothem": {
                                "name": "apothem",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======",
                        "1": "#result definition",
                        "2": "float32 interior_angle",
                        "3": "float32 apothem"
                }
        },
        "turtle_actionlib/Velocity": {
                "name": "turtle_actionlib/Velocity",
                "elementType": "messageType",
                "fields": {
                        "linear": {
                                "name": "linear",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "angular": {
                                "name": "angular",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Copied from turtlesim https://github.com/ros/ros_tutorials/blob/f7da7779e82dcc3977b2c220a843cd86dd269832/turtlesim/msg/Velocity.msg. We had to copy this into this package since it has been replaced with geometry_msgs/Twist there and comforming to Twist requires to change code, which I doubt worth time it takes. So if you think it is, please go ahead make a patch.",
                        "1": "",
                        "2": "float32 linear",
                        "3": "float32 angular"
                }
        },
        "turtlesim/Color": {
                "name": "turtlesim/Color",
                "elementType": "messageType",
                "fields": {
                        "r": {
                                "name": "r",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "g": {
                                "name": "g",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "b": {
                                "name": "b",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "uint8 r",
                        "1": "uint8 g",
                        "2": "uint8 b"
                }
        },
        "turtlesim/Pose": {
                "name": "turtlesim/Pose",
                "elementType": "messageType",
                "fields": {
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "theta": {
                                "name": "theta",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "linear_velocity": {
                                "name": "linear_velocity",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "angular_velocity": {
                                "name": "angular_velocity",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "float32 x",
                        "1": "float32 y",
                        "2": "float32 theta",
                        "3": "",
                        "4": "float32 linear_velocity",
                        "5": "float32 angular_velocit"
                }
        },
        "visualization_msgs/ImageMarker": {
                "name": "visualization_msgs/ImageMarker",
                "elementType": "messageType",
                "fields": {
                        "CIRCLE=0": {
                                "name": "CIRCLE=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "LINE_STRIP=1": {
                                "name": "LINE_STRIP=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "LINE_LIST=2": {
                                "name": "LINE_LIST=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POLYGON=3": {
                                "name": "POLYGON=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POINTS=4": {
                                "name": "POINTS=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "ADD=0": {
                                "name": "ADD=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "REMOVE=1": {
                                "name": "REMOVE=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "ns": {
                                "name": "ns",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "id": {
                                "name": "id",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "action": {
                                "name": "action",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "position": {
                                "name": "position",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point",
                                "dmfDataType": "TBD"
                        },
                        "scale": {
                                "name": "scale",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "outline_color": {
                                "name": "outline_color",
                                "elementType": "messageType",
                                "type": "std_msgs/ColorRGBA",
                                "dmfDataType": "TBD"
                        },
                        "filled": {
                                "name": "filled",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "fill_color": {
                                "name": "fill_color",
                                "elementType": "messageType",
                                "type": "std_msgs/ColorRGBA",
                                "dmfDataType": "TBD"
                        },
                        "lifetime": {
                                "name": "lifetime",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "points": {
                                "name": "points",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point[]",
                                "dmfDataType": "TBD"
                        },
                        "outline_colors": {
                                "name": "outline_colors",
                                "elementType": "messageType",
                                "type": "std_msgs/ColorRGBA[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "uint8 CIRCLE=0",
                        "1": "uint8 LINE_STRIP=1",
                        "2": "uint8 LINE_LIST=2",
                        "3": "uint8 POLYGON=3",
                        "4": "uint8 POINTS=4",
                        "5": "",
                        "6": "uint8 ADD=0",
                        "7": "uint8 REMOVE=1",
                        "8": "",
                        "9": "Header header",
                        "10": "string ns\t\t# namespace, used with id to form a unique id",
                        "11": "int32 id          \t# unique id within the namespace",
                        "12": "int32 type        \t# CIRCLE/LINE_STRIP/etc.",
                        "13": "int32 action      \t# ADD/REMOVE",
                        "14": "geometry_msgs/Point position # 2D, in pixel-coords",
                        "15": "float32 scale\t \t# the diameter for a circle, etc.",
                        "16": "std_msgs/ColorRGBA outline_color",
                        "17": "uint8 filled\t\t# whether to fill in the shape with color",
                        "18": "std_msgs/ColorRGBA fill_color # color [0.0-1.0]",
                        "19": "duration lifetime       # How long the object should last before being automatically deleted.  0 means forever",
                        "20": "",
                        "21": "",
                        "22": "geometry_msgs/Point[] points # used for LINE_STRIP/LINE_LIST/POINTS/etc., 2D in pixel coords",
                        "23": "std_msgs/ColorRGBA[] outline_colors # a color for each line, point, etc"
                }
        },
        "visualization_msgs/InteractiveMarker": {
                "name": "visualization_msgs/InteractiveMarker",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "description": {
                                "name": "description",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "scale": {
                                "name": "scale",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "menu_entries": {
                                "name": "menu_entries",
                                "elementType": "messageType",
                                "type": "visualization_msgs/MenuEntry[]",
                                "dmfDataType": "TBD"
                        },
                        "controls": {
                                "name": "controls",
                                "elementType": "messageType",
                                "type": "visualization_msgs/InteractiveMarkerControl[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Time/frame info.",
                        "1": "# If header.time is set to 0, the marker will be retransformed into",
                        "2": "# its frame on each timestep. You will receive the pose feedback",
                        "3": "# in the same frame.",
                        "4": "# Otherwise, you might receive feedback in a different frame.",
                        "5": "# For rviz, this will be the current 'fixed frame' set by the user.",
                        "6": "Header header",
                        "7": "",
                        "8": "# Initial pose. Also, defines the pivot point for rotations.",
                        "9": "geometry_msgs/Pose pose",
                        "10": "",
                        "11": "# Identifying string. Must be globally unique in",
                        "12": "# the topic that this message is sent through.",
                        "13": "string name",
                        "14": "",
                        "15": "# Short description (< 40 characters).",
                        "16": "string description",
                        "17": "",
                        "18": "# Scale to be used for default controls (default=1).",
                        "19": "float32 scale",
                        "20": "",
                        "21": "# All menu and submenu entries associated with this marker.",
                        "22": "MenuEntry[] menu_entries",
                        "23": "",
                        "24": "# List of controls displayed for this marker.",
                        "25": "InteractiveMarkerControl[] controls"
                }
        },
        "visualization_msgs/InteractiveMarkerControl": {
                "name": "visualization_msgs/InteractiveMarkerControl",
                "elementType": "messageType",
                "fields": {
                        "INHERIT=0": {
                                "name": "INHERIT=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "FIXED=1": {
                                "name": "FIXED=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "VIEW_FACING=2": {
                                "name": "VIEW_FACING=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "NONE=0": {
                                "name": "NONE=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MENU=1": {
                                "name": "MENU=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "BUTTON=2": {
                                "name": "BUTTON=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MOVE_AXIS=3": {
                                "name": "MOVE_AXIS=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MOVE_PLANE=4": {
                                "name": "MOVE_PLANE=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "ROTATE_AXIS=5": {
                                "name": "ROTATE_AXIS=5",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MOVE_ROTATE=6": {
                                "name": "MOVE_ROTATE=6",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MOVE_3D=7": {
                                "name": "MOVE_3D=7",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "ROTATE_3D=8": {
                                "name": "ROTATE_3D=8",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MOVE_ROTATE_3D=9": {
                                "name": "MOVE_ROTATE_3D=9",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "orientation": {
                                "name": "orientation",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Quaternion",
                                "dmfDataType": "TBD"
                        },
                        "orientation_mode": {
                                "name": "orientation_mode",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "interaction_mode": {
                                "name": "interaction_mode",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "always_visible": {
                                "name": "always_visible",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "markers": {
                                "name": "markers",
                                "elementType": "messageType",
                                "type": "visualization_msgs/Marker[]",
                                "dmfDataType": "TBD"
                        },
                        "independent_marker_orientation": {
                                "name": "independent_marker_orientation",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "description": {
                                "name": "description",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Represents a control that is to be displayed together with an interactive marker",
                        "1": "",
                        "2": "# Identifying string for this control.",
                        "3": "# You need to assign a unique value to this to receive feedback from the GUI",
                        "4": "# on what actions the user performs on this control (e.g. a button click).",
                        "5": "string name",
                        "6": "",
                        "7": "",
                        "8": "# Defines the local coordinate frame (relative to the pose of the parent",
                        "9": "# interactive marker) in which is being rotated and translated.",
                        "10": "# Default: Identity",
                        "11": "geometry_msgs/Quaternion orientation",
                        "12": "",
                        "13": "",
                        "14": "# Orientation mode: controls how orientation changes.",
                        "15": "# INHERIT: Follow orientation of interactive marker",
                        "16": "# FIXED: Keep orientation fixed at initial state",
                        "17": "# VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up).",
                        "18": "uint8 INHERIT = 0 ",
                        "19": "uint8 FIXED = 1",
                        "20": "uint8 VIEW_FACING = 2",
                        "21": "",
                        "22": "uint8 orientation_mode",
                        "23": "",
                        "24": "# Interaction mode for this control",
                        "25": "# ",
                        "26": "# NONE: This control is only meant for visualization; no context menu.",
                        "27": "# MENU: Like NONE, but right-click menu is active.",
                        "28": "# BUTTON: Element can be left-clicked.",
                        "29": "# MOVE_AXIS: Translate along local x-axis.",
                        "30": "# MOVE_PLANE: Translate in local y-z plane.",
                        "31": "# ROTATE_AXIS: Rotate around local x-axis.",
                        "32": "# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.",
                        "33": "uint8 NONE = 0 ",
                        "34": "uint8 MENU = 1",
                        "35": "uint8 BUTTON = 2",
                        "36": "uint8 MOVE_AXIS = 3 ",
                        "37": "uint8 MOVE_PLANE = 4",
                        "38": "uint8 ROTATE_AXIS = 5",
                        "39": "uint8 MOVE_ROTATE = 6",
                        "40": "# \"3D\" interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.",
                        "41": "# MOVE_3D: Translate freely in 3D space.",
                        "42": "# ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.",
                        "43": "# MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor origin.",
                        "44": "uint8 MOVE_3D = 7",
                        "45": "uint8 ROTATE_3D = 8",
                        "46": "uint8 MOVE_ROTATE_3D = 9",
                        "47": "",
                        "48": "uint8 interaction_mode",
                        "49": "",
                        "50": "",
                        "51": "# If true, the contained markers will also be visible",
                        "52": "# when the gui is not in interactive mode.",
                        "53": "bool always_visible",
                        "54": "",
                        "55": "",
                        "56": "# Markers to be displayed as custom visual representation.",
                        "57": "# Leave this empty to use the default control handles.",
                        "58": "#",
                        "59": "# Note: ",
                        "60": "# - The markers can be defined in an arbitrary coordinate frame,",
                        "61": "#   but will be transformed into the local frame of the interactive marker.",
                        "62": "# - If the header of a marker is empty, its pose will be interpreted as ",
                        "63": "#   relative to the pose of the parent interactive marker.",
                        "64": "Marker[] markers",
                        "65": "",
                        "66": "",
                        "67": "# In VIEW_FACING mode, set this to true if you don't want the markers",
                        "68": "# to be aligned with the camera view point. The markers will show up",
                        "69": "# as in INHERIT mode.",
                        "70": "bool independent_marker_orientation",
                        "71": "",
                        "72": "",
                        "73": "# Short description (< 40 characters) of what this control does,",
                        "74": "# e.g. \"Move the robot\". ",
                        "75": "# Default: A generic description based on the interaction mode",
                        "76": "string description"
                }
        },
        "visualization_msgs/InteractiveMarkerFeedback": {
                "name": "visualization_msgs/InteractiveMarkerFeedback",
                "elementType": "messageType",
                "fields": {
                        "KEEP_ALIVE=0": {
                                "name": "KEEP_ALIVE=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POSE_UPDATE=1": {
                                "name": "POSE_UPDATE=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MENU_SELECT=2": {
                                "name": "MENU_SELECT=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "BUTTON_CLICK=3": {
                                "name": "BUTTON_CLICK=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MOUSE_DOWN=4": {
                                "name": "MOUSE_DOWN=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MOUSE_UP=5": {
                                "name": "MOUSE_UP=5",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "client_id": {
                                "name": "client_id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "marker_name": {
                                "name": "marker_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "control_name": {
                                "name": "control_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "event_type": {
                                "name": "event_type",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "menu_entry_id": {
                                "name": "menu_entry_id",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "mouse_point": {
                                "name": "mouse_point",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point",
                                "dmfDataType": "TBD"
                        },
                        "mouse_point_valid": {
                                "name": "mouse_point_valid",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Time/frame info.",
                        "1": "Header header",
                        "2": "",
                        "3": "# Identifying string. Must be unique in the topic namespace.",
                        "4": "string client_id",
                        "5": "",
                        "6": "# Feedback message sent back from the GUI, e.g.",
                        "7": "# when the status of an interactive marker was modified by the user.",
                        "8": "",
                        "9": "# Specifies which interactive marker and control this message refers to",
                        "10": "string marker_name",
                        "11": "string control_name",
                        "12": "",
                        "13": "# Type of the event",
                        "14": "# KEEP_ALIVE: sent while dragging to keep up control of the marker",
                        "15": "# MENU_SELECT: a menu entry has been selected",
                        "16": "# BUTTON_CLICK: a button control has been clicked",
                        "17": "# POSE_UPDATE: the pose has been changed using one of the controls",
                        "18": "uint8 KEEP_ALIVE = 0",
                        "19": "uint8 POSE_UPDATE = 1",
                        "20": "uint8 MENU_SELECT = 2",
                        "21": "uint8 BUTTON_CLICK = 3",
                        "22": "",
                        "23": "uint8 MOUSE_DOWN = 4",
                        "24": "uint8 MOUSE_UP = 5",
                        "25": "",
                        "26": "uint8 event_type",
                        "27": "",
                        "28": "# Current pose of the marker",
                        "29": "# Note: Has to be valid for all feedback types.",
                        "30": "geometry_msgs/Pose pose",
                        "31": "",
                        "32": "# Contains the ID of the selected menu entry",
                        "33": "# Only valid for MENU_SELECT events.",
                        "34": "uint32 menu_entry_id",
                        "35": "",
                        "36": "# If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point",
                        "37": "# may contain the 3 dimensional position of the event on the",
                        "38": "# control.  If it does, mouse_point_valid will be true.  mouse_point",
                        "39": "# will be relative to the frame listed in the header.",
                        "40": "geometry_msgs/Point mouse_point",
                        "41": "bool mouse_point_valid"
                }
        },
        "visualization_msgs/InteractiveMarkerInit": {
                "name": "visualization_msgs/InteractiveMarkerInit",
                "elementType": "messageType",
                "fields": {
                        "server_id": {
                                "name": "server_id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "seq_num": {
                                "name": "seq_num",
                                "elementType": "dataType",
                                "storageType": "uint64",
                                "dmfDataType": "TBD"
                        },
                        "markers": {
                                "name": "markers",
                                "elementType": "messageType",
                                "type": "visualization_msgs/InteractiveMarker[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Identifying string. Must be unique in the topic namespace",
                        "1": "# that this server works on.",
                        "2": "string server_id",
                        "3": "",
                        "4": "# Sequence number.",
                        "5": "# The client will use this to detect if it has missed a subsequent",
                        "6": "# update.  Every update message will have the same sequence number as",
                        "7": "# an init message.  Clients will likely want to unsubscribe from the",
                        "8": "# init topic after a successful initialization to avoid receiving",
                        "9": "# duplicate data.",
                        "10": "uint64 seq_num",
                        "11": "",
                        "12": "# All markers.",
                        "13": "InteractiveMarker[] markers"
                }
        },
        "visualization_msgs/InteractiveMarkerPose": {
                "name": "visualization_msgs/InteractiveMarkerPose",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Time/frame info.",
                        "1": "Header header",
                        "2": "",
                        "3": "# Initial pose. Also, defines the pivot point for rotations.",
                        "4": "geometry_msgs/Pose pose",
                        "5": "",
                        "6": "# Identifying string. Must be globally unique in",
                        "7": "# the topic that this message is sent through.",
                        "8": "string name"
                }
        },
        "visualization_msgs/InteractiveMarkerUpdate": {
                "name": "visualization_msgs/InteractiveMarkerUpdate",
                "elementType": "messageType",
                "fields": {
                        "KEEP_ALIVE=0": {
                                "name": "KEEP_ALIVE=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "UPDATE=1": {
                                "name": "UPDATE=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "server_id": {
                                "name": "server_id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "seq_num": {
                                "name": "seq_num",
                                "elementType": "dataType",
                                "storageType": "uint64",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "markers": {
                                "name": "markers",
                                "elementType": "messageType",
                                "type": "visualization_msgs/InteractiveMarker[]",
                                "dmfDataType": "TBD"
                        },
                        "poses": {
                                "name": "poses",
                                "elementType": "messageType",
                                "type": "visualization_msgs/InteractiveMarkerPose[]",
                                "dmfDataType": "TBD"
                        },
                        "erases": {
                                "name": "erases",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# Identifying string. Must be unique in the topic namespace",
                        "1": "# that this server works on.",
                        "2": "string server_id",
                        "3": "",
                        "4": "# Sequence number.",
                        "5": "# The client will use this to detect if it has missed an update.",
                        "6": "uint64 seq_num",
                        "7": "",
                        "8": "# Type holds the purpose of this message.  It must be one of UPDATE or KEEP_ALIVE.",
                        "9": "# UPDATE: Incremental update to previous state. ",
                        "10": "#         The sequence number must be 1 higher than for",
                        "11": "#         the previous update.",
                        "12": "# KEEP_ALIVE: Indicates the that the server is still living.",
                        "13": "#             The sequence number does not increase.",
                        "14": "#             No payload data should be filled out (markers, poses, or erases).",
                        "15": "uint8 KEEP_ALIVE = 0",
                        "16": "uint8 UPDATE = 1",
                        "17": "",
                        "18": "uint8 type",
                        "19": "",
                        "20": "#Note: No guarantees on the order of processing.",
                        "21": "#      Contents must be kept consistent by sender.",
                        "22": "",
                        "23": "#Markers to be added or updated",
                        "24": "InteractiveMarker[] markers",
                        "25": "",
                        "26": "#Poses of markers that should be moved",
                        "27": "InteractiveMarkerPose[] poses",
                        "28": "",
                        "29": "#Names of markers to be erased",
                        "30": "string[] erases"
                }
        },
        "visualization_msgs/Marker": {
                "name": "visualization_msgs/Marker",
                "elementType": "messageType",
                "fields": {
                        "ARROW=0": {
                                "name": "ARROW=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CUBE=1": {
                                "name": "CUBE=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "SPHERE=2": {
                                "name": "SPHERE=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CYLINDER=3": {
                                "name": "CYLINDER=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "LINE_STRIP=4": {
                                "name": "LINE_STRIP=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "LINE_LIST=5": {
                                "name": "LINE_LIST=5",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CUBE_LIST=6": {
                                "name": "CUBE_LIST=6",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "SPHERE_LIST=7": {
                                "name": "SPHERE_LIST=7",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "POINTS=8": {
                                "name": "POINTS=8",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "TEXT_VIEW_FACING=9": {
                                "name": "TEXT_VIEW_FACING=9",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MESH_RESOURCE=10": {
                                "name": "MESH_RESOURCE=10",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "TRIANGLE_LIST=11": {
                                "name": "TRIANGLE_LIST=11",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "ADD=0": {
                                "name": "ADD=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "MODIFY=0": {
                                "name": "MODIFY=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "DELETE=2": {
                                "name": "DELETE=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "DELETEALL=3": {
                                "name": "DELETEALL=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "ns": {
                                "name": "ns",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "id": {
                                "name": "id",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "action": {
                                "name": "action",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "scale": {
                                "name": "scale",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "color": {
                                "name": "color",
                                "elementType": "messageType",
                                "type": "std_msgs/ColorRGBA",
                                "dmfDataType": "TBD"
                        },
                        "lifetime": {
                                "name": "lifetime",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "frame_locked": {
                                "name": "frame_locked",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "points": {
                                "name": "points",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point[]",
                                "dmfDataType": "TBD"
                        },
                        "colors": {
                                "name": "colors",
                                "elementType": "messageType",
                                "type": "std_msgs/ColorRGBA[]",
                                "dmfDataType": "TBD"
                        },
                        "text": {
                                "name": "text",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "mesh_resource": {
                                "name": "mesh_resource",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "mesh_use_embedded_materials": {
                                "name": "mesh_use_embedded_materials",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz",
                        "1": "",
                        "2": "uint8 ARROW=0",
                        "3": "uint8 CUBE=1",
                        "4": "uint8 SPHERE=2",
                        "5": "uint8 CYLINDER=3",
                        "6": "uint8 LINE_STRIP=4",
                        "7": "uint8 LINE_LIST=5",
                        "8": "uint8 CUBE_LIST=6",
                        "9": "uint8 SPHERE_LIST=7",
                        "10": "uint8 POINTS=8",
                        "11": "uint8 TEXT_VIEW_FACING=9",
                        "12": "uint8 MESH_RESOURCE=10",
                        "13": "uint8 TRIANGLE_LIST=11",
                        "14": "",
                        "15": "uint8 ADD=0",
                        "16": "uint8 MODIFY=0",
                        "17": "uint8 DELETE=2",
                        "18": "uint8 DELETEALL=3",
                        "19": "",
                        "20": "Header header                        # header for time/frame information",
                        "21": "string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object",
                        "22": "int32 id \t\t                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later",
                        "23": "int32 type \t\t                       # Type of object",
                        "24": "int32 action \t                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects",
                        "25": "geometry_msgs/Pose pose                 # Pose of the object",
                        "26": "geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)",
                        "27": "std_msgs/ColorRGBA color             # Color [0.0-1.0]",
                        "28": "duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever",
                        "29": "bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep",
                        "30": "",
                        "31": "#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)",
                        "32": "geometry_msgs/Point[] points",
                        "33": "#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)",
                        "34": "#number of colors must either be 0 or equal to the number of points",
                        "35": "#NOTE: alpha is not yet used",
                        "36": "std_msgs/ColorRGBA[] colors",
                        "37": "",
                        "38": "# NOTE: only used for text markers",
                        "39": "string text",
                        "40": "",
                        "41": "# NOTE: only used for MESH_RESOURCE markers",
                        "42": "string mesh_resource",
                        "43": "bool mesh_use_embedded_materials"
                }
        },
        "visualization_msgs/MarkerArray": {
                "name": "visualization_msgs/MarkerArray",
                "elementType": "messageType",
                "fields": {
                        "markers": {
                                "name": "markers",
                                "elementType": "messageType",
                                "type": "visualization_msgs/Marker[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "Marker[] markers"
                }
        },
        "visualization_msgs/MenuEntry": {
                "name": "visualization_msgs/MenuEntry",
                "elementType": "messageType",
                "fields": {
                        "FEEDBACK=0": {
                                "name": "FEEDBACK=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "ROSRUN=1": {
                                "name": "ROSRUN=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "ROSLAUNCH=2": {
                                "name": "ROSLAUNCH=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "id": {
                                "name": "id",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "parent_id": {
                                "name": "parent_id",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "title": {
                                "name": "title",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "command": {
                                "name": "command",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "command_type": {
                                "name": "command_type",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "0": "# MenuEntry message.",
                        "1": "",
                        "2": "# Each InteractiveMarker message has an array of MenuEntry messages.",
                        "3": "# A collection of MenuEntries together describe a",
                        "4": "# menu/submenu/subsubmenu/etc tree, though they are stored in a flat",
                        "5": "# array.  The tree structure is represented by giving each menu entry",
                        "6": "# an ID number and a \"parent_id\" field.  Top-level entries are the",
                        "7": "# ones with parent_id = 0.  Menu entries are ordered within their",
                        "8": "# level the same way they are ordered in the containing array.  Parent",
                        "9": "# entries must appear before their children.",
                        "10": "",
                        "11": "# Example:",
                        "12": "# - id = 3",
                        "13": "#   parent_id = 0",
                        "14": "#   title = \"fun\"",
                        "15": "# - id = 2",
                        "16": "#   parent_id = 0",
                        "17": "#   title = \"robot\"",
                        "18": "# - id = 4",
                        "19": "#   parent_id = 2",
                        "20": "#   title = \"pr2\"",
                        "21": "# - id = 5",
                        "22": "#   parent_id = 2",
                        "23": "#   title = \"turtle\"",
                        "24": "#",
                        "25": "# Gives a menu tree like this:",
                        "26": "#  - fun",
                        "27": "#  - robot",
                        "28": "#    - pr2",
                        "29": "#    - turtle",
                        "30": "",
                        "31": "# ID is a number for each menu entry.  Must be unique within the",
                        "32": "# control, and should never be 0.",
                        "33": "uint32 id",
                        "34": "",
                        "35": "# ID of the parent of this menu entry, if it is a submenu.  If this",
                        "36": "# menu entry is a top-level entry, set parent_id to 0.",
                        "37": "uint32 parent_id",
                        "38": "",
                        "39": "# menu / entry title",
                        "40": "string title",
                        "41": "",
                        "42": "# Arguments to command indicated by command_type (below)",
                        "43": "string command",
                        "44": "",
                        "45": "# Command_type stores the type of response desired when this menu",
                        "46": "# entry is clicked.",
                        "47": "# FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry's id.",
                        "48": "# ROSRUN: execute \"rosrun\" with arguments given in the command field (above).",
                        "49": "# ROSLAUNCH: execute \"roslaunch\" with arguments given in the command field (above).",
                        "50": "uint8 FEEDBACK=0",
                        "51": "uint8 ROSRUN=1",
                        "52": "uint8 ROSLAUNCH=2",
                        "53": "uint8 command_type"
                }
        },
        "control_msgs/QueryCalibrationStateRequest": {
                "name": "control_msgs/QueryCalibrationStateRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "control_msgs/QueryCalibrationStateResponse": {
                "name": "control_msgs/QueryCalibrationStateResponse",
                "elementType": "messageType",
                "fields": {
                        "is_calibrated": {
                                "name": "is_calibrated",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool is_calibrated"
                }
        },
        "control_msgs/QueryTrajectoryStateRequest": {
                "name": "control_msgs/QueryTrajectoryStateRequest",
                "elementType": "messageType",
                "fields": {
                        "time": {
                                "name": "time",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "time time"
                }
        },
        "control_msgs/QueryTrajectoryStateResponse": {
                "name": "control_msgs/QueryTrajectoryStateResponse",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "position": {
                                "name": "position",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "velocity": {
                                "name": "velocity",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "acceleration": {
                                "name": "acceleration",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string[] name",
                        "2": "float64[] position",
                        "3": "float64[] velocity",
                        "4": "float64[] acceleration"
                }
        },
        "control_toolbox/SetPidGainsRequest": {
                "name": "control_toolbox/SetPidGainsRequest",
                "elementType": "messageType",
                "fields": {
                        "p": {
                                "name": "p",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "i": {
                                "name": "i",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "d": {
                                "name": "d",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "i_clamp": {
                                "name": "i_clamp",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "antiwindup": {
                                "name": "antiwindup",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "float64 p",
                        "2": "float64 i",
                        "3": "float64 d",
                        "4": "float64 i_clamp",
                        "5": "bool antiwindup"
                }
        },
        "control_toolbox/SetPidGainsResponse": {
                "name": "control_toolbox/SetPidGainsResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "controller_manager_msgs/ListControllerTypesRequest": {
                "name": "controller_manager_msgs/ListControllerTypesRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "1": "# The ListControllers service returns a list of controller types that are known",
                        "2": "# to the controller manager plugin mechanism.",
                        "3": ""
                }
        },
        "controller_manager_msgs/ListControllerTypesResponse": {
                "name": "controller_manager_msgs/ListControllerTypesResponse",
                "elementType": "messageType",
                "fields": {
                        "types": {
                                "name": "types",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "base_classes": {
                                "name": "base_classes",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string[] types",
                        "2": "string[] base_classes"
                }
        },
        "controller_manager_msgs/ListControllersRequest": {
                "name": "controller_manager_msgs/ListControllersRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "1": "# The ListControllers service returns a list of controller names/states/types of the",
                        "2": "# controllers that are loaded inside the controller_manager.",
                        "3": ""
                }
        },
        "controller_manager_msgs/ListControllersResponse": {
                "name": "controller_manager_msgs/ListControllersResponse",
                "elementType": "messageType",
                "fields": {
                        "controller": {
                                "name": "controller",
                                "elementType": "messageType",
                                "type": "controller_manager_msgs/ControllerState[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "ControllerState[] controller"
                }
        },
        "controller_manager_msgs/LoadControllerRequest": {
                "name": "controller_manager_msgs/LoadControllerRequest",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# The LoadController service allows you to load a single controller ",
                        "2": "# inside controller_manager",
                        "3": "",
                        "4": "# To load a controller, specify the \"name\" of the controller. ",
                        "5": "# The return value \"ok\" indicates if the controller was successfully",
                        "6": "# constructed and initialized or not.",
                        "7": "",
                        "8": "string name"
                }
        },
        "controller_manager_msgs/LoadControllerResponse": {
                "name": "controller_manager_msgs/LoadControllerResponse",
                "elementType": "messageType",
                "fields": {
                        "ok": {
                                "name": "ok",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool ok"
                }
        },
        "controller_manager_msgs/ReloadControllerLibrariesRequest": {
                "name": "controller_manager_msgs/ReloadControllerLibrariesRequest",
                "elementType": "messageType",
                "fields": {
                        "force_kill": {
                                "name": "force_kill",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# The ReloadControllerLibraries service will reload all controllers that are available in",
                        "2": "# the system as plugins",
                        "3": "",
                        "4": "",
                        "5": "# Reloading libraries only works if there are no controllers loaded. If there",
                        "6": "# are still some controllers loaded, the reloading will fail.",
                        "7": "# If this bool is set to true, all loaded controllers will get",
                        "8": "# killed automatically, and the reloading can succeed.",
                        "9": "bool force_kill"
                }
        },
        "controller_manager_msgs/ReloadControllerLibrariesResponse": {
                "name": "controller_manager_msgs/ReloadControllerLibrariesResponse",
                "elementType": "messageType",
                "fields": {
                        "ok": {
                                "name": "ok",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool ok"
                }
        },
        "controller_manager_msgs/SwitchControllerRequest": {
                "name": "controller_manager_msgs/SwitchControllerRequest",
                "elementType": "messageType",
                "fields": {
                        "BEST_EFFORT=1": {
                                "name": "BEST_EFFORT=1",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "STRICT=2": {
                                "name": "STRICT=2",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "start_controllers": {
                                "name": "start_controllers",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "stop_controllers": {
                                "name": "stop_controllers",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "strictness": {
                                "name": "strictness",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        },
                        "start_asap": {
                                "name": "start_asap",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "timeout": {
                                "name": "timeout",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# The SwitchController service allows you stop a number of controllers",
                        "2": "# and start a number of controllers, all in one single timestep of the",
                        "3": "# controller_manager control loop.",
                        "4": "",
                        "5": "# To switch controllers, specify",
                        "6": "#  * the list of controller names to start,",
                        "7": "#  * the list of controller names to stop, and",
                        "8": "#  * the strictness (BEST_EFFORT or STRICT)",
                        "9": "#    * STRICT means that switching will fail if anything goes wrong (an invalid",
                        "10": "#      controller name, a controller that failed to start, etc. )",
                        "11": "#    * BEST_EFFORT means that even when something goes wrong with on controller,",
                        "12": "#      the service will still try to start/stop the remaining controllers",
                        "13": "#  * start the controllers as soon as their hardware dependencies are ready, will",
                        "14": "#    wait for all interfaces to be ready otherwise",
                        "15": "#  * the timeout in seconds before aborting pending controllers. Zero for infinite",
                        "16": "",
                        "17": "# The return value \"ok\" indicates if the controllers were switched",
                        "18": "# successfully or not.  The meaning of success depends on the",
                        "19": "# specified strictness.",
                        "20": "",
                        "21": "",
                        "22": "string[] start_controllers",
                        "23": "string[] stop_controllers",
                        "24": "int32 strictness",
                        "25": "int32 BEST_EFFORT=1",
                        "26": "int32 STRICT=2",
                        "27": "bool start_asap",
                        "28": "float64 timeout"
                }
        },
        "controller_manager_msgs/SwitchControllerResponse": {
                "name": "controller_manager_msgs/SwitchControllerResponse",
                "elementType": "messageType",
                "fields": {
                        "ok": {
                                "name": "ok",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool ok"
                }
        },
        "controller_manager_msgs/UnloadControllerRequest": {
                "name": "controller_manager_msgs/UnloadControllerRequest",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# The UnloadController service allows you to unload a single controller ",
                        "2": "# from controller_manager",
                        "3": "",
                        "4": "# To unload a controller, specify the \"name\" of the controller. ",
                        "5": "# The return value \"ok\" indicates if the controller was successfully",
                        "6": "# unloaded or not",
                        "7": "",
                        "8": "string name"
                }
        },
        "controller_manager_msgs/UnloadControllerResponse": {
                "name": "controller_manager_msgs/UnloadControllerResponse",
                "elementType": "messageType",
                "fields": {
                        "ok": {
                                "name": "ok",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool ok"
                }
        },
        "diagnostic_msgs/AddDiagnosticsRequest": {
                "name": "diagnostic_msgs/AddDiagnosticsRequest",
                "elementType": "messageType",
                "fields": {
                        "load_namespace": {
                                "name": "load_namespace",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# This service is used as part of the process for loading analyzers at runtime,",
                        "2": "# and should be used by a loader script or program, not as a standalone service.",
                        "3": "# Information about dynamic addition of analyzers can be found at",
                        "4": "# http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime",
                        "5": "",
                        "6": "# The load_namespace parameter defines the namespace where parameters for the",
                        "7": "# initialization of analyzers in the diagnostic aggregator have been loaded. The",
                        "8": "# value should be a global name (i.e. /my/name/space), not a relative",
                        "9": "# (my/name/space) or private (~my/name/space) name. Analyzers will not be added",
                        "10": "# if a non-global name is used. The call will also fail if the namespace",
                        "11": "# contains parameters that follow a namespace structure that does not conform to",
                        "12": "# that expected by the analyzer definitions. See",
                        "13": "# http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators",
                        "14": "# and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer",
                        "15": "# for examples of the structure of yaml files which are expected to have been",
                        "16": "# loaded into the namespace.",
                        "17": "string load_namespace"
                }
        },
        "diagnostic_msgs/AddDiagnosticsResponse": {
                "name": "diagnostic_msgs/AddDiagnosticsResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "message": {
                                "name": "message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "",
                        "2": "# True if diagnostic aggregator was updated with new diagnostics, False",
                        "3": "# otherwise. A false return value means that either there is a bond in the",
                        "4": "# aggregator which already used the requested namespace, or the initialization",
                        "5": "# of analyzers failed.",
                        "6": "bool success",
                        "7": "",
                        "8": "# Message with additional information about the success or failure",
                        "9": "string message"
                }
        },
        "diagnostic_msgs/SelfTestRequest": {
                "name": "diagnostic_msgs/SelfTestRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "diagnostic_msgs/SelfTestResponse": {
                "name": "diagnostic_msgs/SelfTestResponse",
                "elementType": "messageType",
                "fields": {
                        "id": {
                                "name": "id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "passed": {
                                "name": "passed",
                                "elementType": "messageType",
                                "type": "byte",
                                "dmfDataType": "TBD"
                        },
                        "status": {
                                "name": "status",
                                "elementType": "messageType",
                                "type": "diagnostic_msgs/DiagnosticStatus[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string id",
                        "2": "byte passed",
                        "3": "DiagnosticStatus[] status"
                }
        },
        "dynamic_reconfigure/ReconfigureRequest": {
                "name": "dynamic_reconfigure/ReconfigureRequest",
                "elementType": "messageType",
                "fields": {
                        "config": {
                                "name": "config",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/Config",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "Config config"
                }
        },
        "dynamic_reconfigure/ReconfigureResponse": {
                "name": "dynamic_reconfigure/ReconfigureResponse",
                "elementType": "messageType",
                "fields": {
                        "config": {
                                "name": "config",
                                "elementType": "messageType",
                                "type": "dynamic_reconfigure/Config",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "Config config"
                }
        },
        "gazebo_msgs/ApplyBodyWrenchRequest": {
                "name": "gazebo_msgs/ApplyBodyWrenchRequest",
                "elementType": "messageType",
                "fields": {
                        "body_name": {
                                "name": "body_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "reference_frame": {
                                "name": "reference_frame",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "reference_point": {
                                "name": "reference_point",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Point",
                                "dmfDataType": "TBD"
                        },
                        "wrench": {
                                "name": "wrench",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Wrench",
                                "dmfDataType": "TBD"
                        },
                        "start_time": {
                                "name": "start_time",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "duration": {
                                "name": "duration",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# Apply Wrench to Gazebo Body.",
                        "2": "# via the callback mechanism",
                        "3": "# all Gazebo operations are made in world frame",
                        "4": "string body_name                          # Gazebo body to apply wrench (linear force and torque)",
                        "5": "                                          # wrench is applied in the gazebo world by default",
                        "6": "                                          # body names are prefixed by model name, e.g. pr2::base_link",
                        "7": "string reference_frame                    # wrench is defined in the reference frame of this entity",
                        "8": "                                          # use inertial frame if left empty",
                        "9": "                                          # frame names are bodies prefixed by model name, e.g. pr2::base_link",
                        "10": "geometry_msgs/Point  reference_point      # wrench is defined at this location in the reference frame",
                        "11": "geometry_msgs/Wrench wrench               # wrench applied to the origin of the body",
                        "12": "time start_time                           # (optional) wrench application start time (seconds)",
                        "13": "                                          # if start_time is not specified, or",
                        "14": "                                          # start_time < current time, start as soon as possible",
                        "15": "duration duration                         # optional duration of wrench application time (seconds)",
                        "16": "                                          # if duration < 0, apply wrench continuously without end",
                        "17": "                                          # if duration = 0, do nothing",
                        "18": "                                          # if duration < step size, apply wrench",
                        "19": "                                          # for one step size"
                }
        },
        "gazebo_msgs/ApplyBodyWrenchResponse": {
                "name": "gazebo_msgs/ApplyBodyWrenchResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                              # return true if set wrench successful",
                        "2": "string status_message                     # comments if available"
                }
        },
        "gazebo_msgs/ApplyJointEffortRequest": {
                "name": "gazebo_msgs/ApplyJointEffortRequest",
                "elementType": "messageType",
                "fields": {
                        "joint_name": {
                                "name": "joint_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "effort": {
                                "name": "effort",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "start_time": {
                                "name": "start_time",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "duration": {
                                "name": "duration",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# set urdf joint effort",
                        "2": "string joint_name           # joint to apply wrench (linear force and torque)",
                        "3": "float64 effort              # effort to apply",
                        "4": "time start_time             # optional wrench application start time (seconds)",
                        "5": "                            # if start_time < current time, start as soon as possible",
                        "6": "duration duration           # optional duration of wrench application time (seconds)",
                        "7": "                            # if duration < 0, apply wrench continuously without end",
                        "8": "                            # if duration = 0, do nothing",
                        "9": "                            # if duration < step size, assume step size and",
                        "10": "                            #               display warning in status_message"
                }
        },
        "gazebo_msgs/ApplyJointEffortResponse": {
                "name": "gazebo_msgs/ApplyJointEffortResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                # return true if effort application is successful",
                        "2": "string status_message       # comments if available"
                }
        },
        "gazebo_msgs/BodyRequestRequest": {
                "name": "gazebo_msgs/BodyRequestRequest",
                "elementType": "messageType",
                "fields": {
                        "body_name": {
                                "name": "body_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string body_name   # name of the body requested. body names are prefixed by model name, e.g. pr2::base_link"
                }
        },
        "gazebo_msgs/BodyRequestResponse": {
                "name": "gazebo_msgs/BodyRequestResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "gazebo_msgs/DeleteLightRequest": {
                "name": "gazebo_msgs/DeleteLightRequest",
                "elementType": "messageType",
                "fields": {
                        "light_name": {
                                "name": "light_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string light_name                 # name of the light to be deleted"
                }
        },
        "gazebo_msgs/DeleteLightResponse": {
                "name": "gazebo_msgs/DeleteLightResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                      # return true if deletion is successful",
                        "2": "string status_message             # comments if available"
                }
        },
        "gazebo_msgs/DeleteModelRequest": {
                "name": "gazebo_msgs/DeleteModelRequest",
                "elementType": "messageType",
                "fields": {
                        "model_name": {
                                "name": "model_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string model_name                 # name of the Gazebo Model to be deleted"
                }
        },
        "gazebo_msgs/DeleteModelResponse": {
                "name": "gazebo_msgs/DeleteModelResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                      # return true if deletion is successful",
                        "2": "string status_message             # comments if available"
                }
        },
        "gazebo_msgs/GetJointPropertiesRequest": {
                "name": "gazebo_msgs/GetJointPropertiesRequest",
                "elementType": "messageType",
                "fields": {
                        "joint_name": {
                                "name": "joint_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string joint_name                    # name of joint"
                }
        },
        "gazebo_msgs/GetJointPropertiesResponse": {
                "name": "gazebo_msgs/GetJointPropertiesResponse",
                "elementType": "messageType",
                "fields": {
                        "REVOLUTE=0": {
                                "name": "REVOLUTE=0",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "CONTINUOUS=1": {
                                "name": "CONTINUOUS=1",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "PRISMATIC=2": {
                                "name": "PRISMATIC=2",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "FIXED=3": {
                                "name": "FIXED=3",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "BALL=4": {
                                "name": "BALL=4",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "UNIVERSAL=5": {
                                "name": "UNIVERSAL=5",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "damping": {
                                "name": "damping",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "position": {
                                "name": "position",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "rate": {
                                "name": "rate",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        },
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# joint type",
                        "2": "uint8 type",
                        "3": "uint8 REVOLUTE    = 0                # single DOF",
                        "4": "uint8 CONTINUOUS  = 1                # single DOF (revolute w/o joints)",
                        "5": "uint8 PRISMATIC   = 2                # single DOF",
                        "6": "uint8 FIXED       = 3                # 0 DOF",
                        "7": "uint8 BALL        = 4                # 3 DOF",
                        "8": "uint8 UNIVERSAL   = 5                # 2 DOF",
                        "9": "# dynamics properties",
                        "10": "float64[] damping",
                        "11": "# joint state",
                        "12": "float64[] position",
                        "13": "float64[] rate",
                        "14": "# service return status",
                        "15": "bool success                         # return true if get successful",
                        "16": "string status_message                # comments if available"
                }
        },
        "gazebo_msgs/GetLightPropertiesRequest": {
                "name": "gazebo_msgs/GetLightPropertiesRequest",
                "elementType": "messageType",
                "fields": {
                        "light_name": {
                                "name": "light_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string light_name                    # name of Gazebo Light"
                }
        },
        "gazebo_msgs/GetLightPropertiesResponse": {
                "name": "gazebo_msgs/GetLightPropertiesResponse",
                "elementType": "messageType",
                "fields": {
                        "diffuse": {
                                "name": "diffuse",
                                "elementType": "messageType",
                                "type": "std_msgs/ColorRGBA",
                                "dmfDataType": "TBD"
                        },
                        "attenuation_constant": {
                                "name": "attenuation_constant",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "attenuation_linear": {
                                "name": "attenuation_linear",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "attenuation_quadratic": {
                                "name": "attenuation_quadratic",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "std_msgs/ColorRGBA diffuse           # diffuse color as red, green, blue, alpha",
                        "2": "float64 attenuation_constant",
                        "3": "float64 attenuation_linear",
                        "4": "float64 attenuation_quadratic",
                        "5": "bool success                         # return true if get successful",
                        "6": "string status_message                # comments if available"
                }
        },
        "gazebo_msgs/GetLinkPropertiesRequest": {
                "name": "gazebo_msgs/GetLinkPropertiesRequest",
                "elementType": "messageType",
                "fields": {
                        "link_name": {
                                "name": "link_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string link_name          # name of link",
                        "2": "                          # link names are prefixed by model name, e.g. pr2::base_link"
                }
        },
        "gazebo_msgs/GetLinkPropertiesResponse": {
                "name": "gazebo_msgs/GetLinkPropertiesResponse",
                "elementType": "messageType",
                "fields": {
                        "com": {
                                "name": "com",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "gravity_mode": {
                                "name": "gravity_mode",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "mass": {
                                "name": "mass",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "ixx": {
                                "name": "ixx",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "ixy": {
                                "name": "ixy",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "ixz": {
                                "name": "ixz",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "iyy": {
                                "name": "iyy",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "iyz": {
                                "name": "iyz",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "izz": {
                                "name": "izz",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "geometry_msgs/Pose com    # center of mass location in link frame",
                        "2": "                          # and orientation of the moment of inertias",
                        "3": "                          # relative to the link frame",
                        "4": "bool gravity_mode         # set gravity mode on/off",
                        "5": "float64 mass              # linear mass of link",
                        "6": "float64 ixx               # moment of inertia",
                        "7": "float64 ixy               # moment of inertia",
                        "8": "float64 ixz               # moment of inertia",
                        "9": "float64 iyy               # moment of inertia",
                        "10": "float64 iyz               # moment of inertia",
                        "11": "float64 izz               # moment of inertia",
                        "12": "bool success              # return true if get info is successful",
                        "13": "string status_message     # comments if available"
                }
        },
        "gazebo_msgs/GetLinkStateRequest": {
                "name": "gazebo_msgs/GetLinkStateRequest",
                "elementType": "messageType",
                "fields": {
                        "link_name": {
                                "name": "link_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "reference_frame": {
                                "name": "reference_frame",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string link_name          # name of link",
                        "2": "                          # link names are prefixed by model name, e.g. pr2::base_link",
                        "3": "string reference_frame    # reference frame of returned information, must be a valid link",
                        "4": "                          # if empty, use inertial (gazebo world) frame",
                        "5": "                          # reference_frame names are prefixed by model name, e.g. pr2::base_link"
                }
        },
        "gazebo_msgs/GetLinkStateResponse": {
                "name": "gazebo_msgs/GetLinkStateResponse",
                "elementType": "messageType",
                "fields": {
                        "link_state": {
                                "name": "link_state",
                                "elementType": "messageType",
                                "type": "gazebo_msgs/LinkState",
                                "dmfDataType": "TBD"
                        },
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "gazebo_msgs/LinkState link_state",
                        "2": "bool success              # return true if get info is successful",
                        "3": "string status_message     # comments if available"
                }
        },
        "gazebo_msgs/GetModelPropertiesRequest": {
                "name": "gazebo_msgs/GetModelPropertiesRequest",
                "elementType": "messageType",
                "fields": {
                        "model_name": {
                                "name": "model_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string model_name                    # name of Gazebo Model"
                }
        },
        "gazebo_msgs/GetModelPropertiesResponse": {
                "name": "gazebo_msgs/GetModelPropertiesResponse",
                "elementType": "messageType",
                "fields": {
                        "parent_model_name": {
                                "name": "parent_model_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "canonical_body_name": {
                                "name": "canonical_body_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "body_names": {
                                "name": "body_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "geom_names": {
                                "name": "geom_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "joint_names": {
                                "name": "joint_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "child_model_names": {
                                "name": "child_model_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "is_static": {
                                "name": "is_static",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string parent_model_name             # parent model",
                        "2": "string canonical_body_name           # name of canonical body, body names are prefixed by model name, e.g. pr2::base_link",
                        "3": "string[] body_names                  # list of bodies, body names are prefixed by model name, e.g. pr2::base_link",
                        "4": "string[] geom_names                  # list of geoms",
                        "5": "string[] joint_names                 # list of joints attached to the model",
                        "6": "string[] child_model_names           # list of child models",
                        "7": "bool is_static                       # returns true if model is static",
                        "8": "bool success                         # return true if get successful",
                        "9": "string status_message                # comments if available"
                }
        },
        "gazebo_msgs/GetModelStateRequest": {
                "name": "gazebo_msgs/GetModelStateRequest",
                "elementType": "messageType",
                "fields": {
                        "model_name": {
                                "name": "model_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "relative_entity_name": {
                                "name": "relative_entity_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string model_name                    # name of Gazebo Model",
                        "2": "string relative_entity_name          # return pose and twist relative to this entity",
                        "3": "                                     # an entity can be a model, body, or geom",
                        "4": "                                     # be sure to use gazebo scoped naming notation (e.g. [model_name::body_name])",
                        "5": "                                     # leave empty or \"world\" will use inertial world frame"
                }
        },
        "gazebo_msgs/GetModelStateResponse": {
                "name": "gazebo_msgs/GetModelStateResponse",
                "elementType": "messageType",
                "fields": {
                        "header": {
                                "name": "header",
                                "elementType": "messageType",
                                "type": "std_msgs/Header",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "twist": {
                                "name": "twist",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Twist",
                                "dmfDataType": "TBD"
                        },
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "Header header                        # Standard metadata for higher-level stamped data types.",
                        "2": "                                     # * header.seq holds the number of requests since the plugin started",
                        "3": "                                     # * header.stamp timestamp related to the pose",
                        "4": "                                     # * header.frame_id not used but currently filled with the relative_entity_name",
                        "5": "geometry_msgs/Pose pose              # pose of model in relative entity frame",
                        "6": "geometry_msgs/Twist twist            # twist of model in relative entity frame",
                        "7": "bool success                         # return true if get successful",
                        "8": "string status_message                # comments if available"
                }
        },
        "gazebo_msgs/GetPhysicsPropertiesRequest": {
                "name": "gazebo_msgs/GetPhysicsPropertiesRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "gazebo_msgs/GetPhysicsPropertiesResponse": {
                "name": "gazebo_msgs/GetPhysicsPropertiesResponse",
                "elementType": "messageType",
                "fields": {
                        "time_step": {
                                "name": "time_step",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "pause": {
                                "name": "pause",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "max_update_rate": {
                                "name": "max_update_rate",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "gravity": {
                                "name": "gravity",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "ode_config": {
                                "name": "ode_config",
                                "elementType": "messageType",
                                "type": "gazebo_msgs/ODEPhysics",
                                "dmfDataType": "TBD"
                        },
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly",
                        "2": "float64 time_step                  # dt in seconds",
                        "3": "bool pause                         # true if physics engine is paused",
                        "4": "float64 max_update_rate            # throttle maximum physics update rate",
                        "5": "geometry_msgs/Vector3 gravity      # gravity vector (e.g. earth ~[0,0,-9.81])",
                        "6": "gazebo_msgs/ODEPhysics ode_config  # contains physics configurations pertaining to ODE",
                        "7": "bool success                       # return true if set wrench successful",
                        "8": "string status_message              # comments if available"
                }
        },
        "gazebo_msgs/GetWorldPropertiesRequest": {
                "name": "gazebo_msgs/GetWorldPropertiesRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "gazebo_msgs/GetWorldPropertiesResponse": {
                "name": "gazebo_msgs/GetWorldPropertiesResponse",
                "elementType": "messageType",
                "fields": {
                        "sim_time": {
                                "name": "sim_time",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "model_names": {
                                "name": "model_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "rendering_enabled": {
                                "name": "rendering_enabled",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "float64 sim_time                     # current sim time",
                        "2": "string[] model_names                 # list of models in the world",
                        "3": "bool rendering_enabled               # if X is used",
                        "4": "bool success                         # return true if get successful",
                        "5": "string status_message                # comments if available"
                }
        },
        "gazebo_msgs/JointRequestRequest": {
                "name": "gazebo_msgs/JointRequestRequest",
                "elementType": "messageType",
                "fields": {
                        "joint_name": {
                                "name": "joint_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string joint_name   # name of the joint requested"
                }
        },
        "gazebo_msgs/JointRequestResponse": {
                "name": "gazebo_msgs/JointRequestResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "1": ""
                }
        },
        "gazebo_msgs/SetJointPropertiesRequest": {
                "name": "gazebo_msgs/SetJointPropertiesRequest",
                "elementType": "messageType",
                "fields": {
                        "joint_name": {
                                "name": "joint_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "ode_joint_config": {
                                "name": "ode_joint_config",
                                "elementType": "messageType",
                                "type": "gazebo_msgs/ODEJointProperties",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string joint_name                               # name of joint",
                        "2": "gazebo_msgs/ODEJointProperties ode_joint_config # access to ODE joint dynamics properties"
                }
        },
        "gazebo_msgs/SetJointPropertiesResponse": {
                "name": "gazebo_msgs/SetJointPropertiesResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                                    # return true if get successful",
                        "2": "string status_message                           # comments if available"
                }
        },
        "gazebo_msgs/SetJointTrajectoryRequest": {
                "name": "gazebo_msgs/SetJointTrajectoryRequest",
                "elementType": "messageType",
                "fields": {
                        "model_name": {
                                "name": "model_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "joint_trajectory": {
                                "name": "joint_trajectory",
                                "elementType": "messageType",
                                "type": "trajectory_msgs/JointTrajectory",
                                "dmfDataType": "TBD"
                        },
                        "model_pose": {
                                "name": "model_pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "set_model_pose": {
                                "name": "set_model_pose",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "disable_physics_updates": {
                                "name": "disable_physics_updates",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string model_name",
                        "2": "trajectory_msgs/JointTrajectory joint_trajectory",
                        "3": "geometry_msgs/Pose model_pose",
                        "4": "bool set_model_pose",
                        "5": "bool disable_physics_updates # defaults to false"
                }
        },
        "gazebo_msgs/SetJointTrajectoryResponse": {
                "name": "gazebo_msgs/SetJointTrajectoryResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                # return true if set wrench successful",
                        "2": "string status_message       # comments if available"
                }
        },
        "gazebo_msgs/SetLightPropertiesRequest": {
                "name": "gazebo_msgs/SetLightPropertiesRequest",
                "elementType": "messageType",
                "fields": {
                        "light_name": {
                                "name": "light_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "cast_shadows": {
                                "name": "cast_shadows",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "diffuse": {
                                "name": "diffuse",
                                "elementType": "messageType",
                                "type": "std_msgs/ColorRGBA",
                                "dmfDataType": "TBD"
                        },
                        "specular": {
                                "name": "specular",
                                "elementType": "messageType",
                                "type": "std_msgs/ColorRGBA",
                                "dmfDataType": "TBD"
                        },
                        "attenuation_constant": {
                                "name": "attenuation_constant",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "attenuation_linear": {
                                "name": "attenuation_linear",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "attenuation_quadratic": {
                                "name": "attenuation_quadratic",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "direction": {
                                "name": "direction",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "pose": {
                                "name": "pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string light_name                    # name of Gazebo Light",
                        "2": "bool cast_shadows",
                        "3": "std_msgs/ColorRGBA diffuse           # diffuse color as red, green, blue, alpha",
                        "4": "std_msgs/ColorRGBA specular          # specular color as red, green, blue, alpha",
                        "5": "float64 attenuation_constant",
                        "6": "float64 attenuation_linear",
                        "7": "float64 attenuation_quadratic",
                        "8": "geometry_msgs/Vector3 direction",
                        "9": "geometry_msgs/Pose pose              # pose in world frame"
                }
        },
        "gazebo_msgs/SetLightPropertiesResponse": {
                "name": "gazebo_msgs/SetLightPropertiesResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                         # return true if get successful",
                        "2": "string status_message                # comments if available"
                }
        },
        "gazebo_msgs/SetLinkPropertiesRequest": {
                "name": "gazebo_msgs/SetLinkPropertiesRequest",
                "elementType": "messageType",
                "fields": {
                        "link_name": {
                                "name": "link_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "com": {
                                "name": "com",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "gravity_mode": {
                                "name": "gravity_mode",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "mass": {
                                "name": "mass",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "ixx": {
                                "name": "ixx",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "ixy": {
                                "name": "ixy",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "ixz": {
                                "name": "ixz",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "iyy": {
                                "name": "iyy",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "iyz": {
                                "name": "iyz",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "izz": {
                                "name": "izz",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string link_name          # name of link",
                        "2": "                          # link names are prefixed by model name, e.g. pr2::base_link",
                        "3": "geometry_msgs/Pose com    # center of mass location in link frame",
                        "4": "                          # and orientation of the moment of inertias",
                        "5": "                          # relative to the link frame",
                        "6": "bool gravity_mode         # set gravity mode on/off",
                        "7": "float64 mass              # linear mass of link",
                        "8": "float64 ixx               # moment of inertia",
                        "9": "float64 ixy               # moment of inertia",
                        "10": "float64 ixz               # moment of inertia",
                        "11": "float64 iyy               # moment of inertia",
                        "12": "float64 iyz               # moment of inertia",
                        "13": "float64 izz               # moment of inertia"
                }
        },
        "gazebo_msgs/SetLinkPropertiesResponse": {
                "name": "gazebo_msgs/SetLinkPropertiesResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success              # return true if get info is successful",
                        "2": "string status_message     # comments if available"
                }
        },
        "gazebo_msgs/SetLinkStateRequest": {
                "name": "gazebo_msgs/SetLinkStateRequest",
                "elementType": "messageType",
                "fields": {
                        "link_state": {
                                "name": "link_state",
                                "elementType": "messageType",
                                "type": "gazebo_msgs/LinkState",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "gazebo_msgs/LinkState link_state"
                }
        },
        "gazebo_msgs/SetLinkStateResponse": {
                "name": "gazebo_msgs/SetLinkStateResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                # return true if set wrench successful",
                        "2": "string status_message       # comments if available"
                }
        },
        "gazebo_msgs/SetModelConfigurationRequest": {
                "name": "gazebo_msgs/SetModelConfigurationRequest",
                "elementType": "messageType",
                "fields": {
                        "model_name": {
                                "name": "model_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "urdf_param_name": {
                                "name": "urdf_param_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "joint_names": {
                                "name": "joint_names",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "joint_positions": {
                                "name": "joint_positions",
                                "elementType": "dataType",
                                "storageType": "float64[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# Set joint positions for a model",
                        "2": "string model_name           # model to set state",
                        "3": "string urdf_param_name      # UNUSED",
                        "4": "",
                        "5": "string[] joint_names        # list of joints to set positions.  if joint is not listed here, preserve current position.",
                        "6": "float64[] joint_positions   # set to this position."
                }
        },
        "gazebo_msgs/SetModelConfigurationResponse": {
                "name": "gazebo_msgs/SetModelConfigurationResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                # return true if setting state successful",
                        "2": "string status_message       # comments if available"
                }
        },
        "gazebo_msgs/SetModelStateRequest": {
                "name": "gazebo_msgs/SetModelStateRequest",
                "elementType": "messageType",
                "fields": {
                        "model_state": {
                                "name": "model_state",
                                "elementType": "messageType",
                                "type": "gazebo_msgs/ModelState",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "gazebo_msgs/ModelState model_state"
                }
        },
        "gazebo_msgs/SetModelStateResponse": {
                "name": "gazebo_msgs/SetModelStateResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                  # return true if setting state successful",
                        "2": "string status_message         # comments if available"
                }
        },
        "gazebo_msgs/SetPhysicsPropertiesRequest": {
                "name": "gazebo_msgs/SetPhysicsPropertiesRequest",
                "elementType": "messageType",
                "fields": {
                        "time_step": {
                                "name": "time_step",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "max_update_rate": {
                                "name": "max_update_rate",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "gravity": {
                                "name": "gravity",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Vector3",
                                "dmfDataType": "TBD"
                        },
                        "ode_config": {
                                "name": "ode_config",
                                "elementType": "messageType",
                                "type": "gazebo_msgs/ODEPhysics",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly",
                        "2": "float64 time_step                  # dt in seconds",
                        "3": "float64 max_update_rate            # throttle maximum physics update rate",
                        "4": "geometry_msgs/Vector3 gravity      # gravity vector (e.g. earth ~[0,0,-9.81])",
                        "5": "gazebo_msgs/ODEPhysics ode_config  # configurations for ODE"
                }
        },
        "gazebo_msgs/SetPhysicsPropertiesResponse": {
                "name": "gazebo_msgs/SetPhysicsPropertiesResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                       # return true if set wrench successful",
                        "2": "string status_message              # comments if available"
                }
        },
        "gazebo_msgs/SpawnModelRequest": {
                "name": "gazebo_msgs/SpawnModelRequest",
                "elementType": "messageType",
                "fields": {
                        "model_name": {
                                "name": "model_name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "model_xml": {
                                "name": "model_xml",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "robot_namespace": {
                                "name": "robot_namespace",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "initial_pose": {
                                "name": "initial_pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/Pose",
                                "dmfDataType": "TBD"
                        },
                        "reference_frame": {
                                "name": "reference_frame",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string model_name                 # name of the model to be spawn",
                        "2": "string model_xml                  # this should be an urdf or gazebo xml",
                        "3": "string robot_namespace            # spawn robot and all ROS interfaces under this namespace",
                        "4": "geometry_msgs/Pose initial_pose   # only applied to canonical body",
                        "5": "string reference_frame            # initial_pose is defined relative to the frame of this model/body",
                        "6": "                                  # if left empty or \"world\", then gazebo world frame is used",
                        "7": "                                  # if non-existent model/body is specified, an error is returned",
                        "8": "                                  #   and the model is not spawned"
                }
        },
        "gazebo_msgs/SpawnModelResponse": {
                "name": "gazebo_msgs/SpawnModelResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success                      # return true if spawn successful",
                        "2": "string status_message             # comments if available"
                }
        },
        "laser_assembler/AssembleScansRequest": {
                "name": "laser_assembler/AssembleScansRequest",
                "elementType": "messageType",
                "fields": {
                        "begin": {
                                "name": "begin",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "end": {
                                "name": "end",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# The time interval on which we want to aggregate scans",
                        "2": "time begin",
                        "3": "# The end of the interval on which we want to assemble scans or clouds",
                        "4": "time end"
                }
        },
        "laser_assembler/AssembleScansResponse": {
                "name": "laser_assembler/AssembleScansResponse",
                "elementType": "messageType",
                "fields": {
                        "cloud": {
                                "name": "cloud",
                                "elementType": "messageType",
                                "type": "sensor_msgs/PointCloud",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# The point cloud holding the assembled clouds or scans. ",
                        "2": "# This cloud is in the frame specified by the ~fixed_frame node parameter. ",
                        "3": "# cloud is empty if no scans are received in the requested interval.",
                        "4": "sensor_msgs/PointCloud cloud"
                }
        },
        "laser_assembler/AssembleScans2Request": {
                "name": "laser_assembler/AssembleScans2Request",
                "elementType": "messageType",
                "fields": {
                        "begin": {
                                "name": "begin",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        },
                        "end": {
                                "name": "end",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# The time interval on which we want to aggregate scans",
                        "2": "time begin",
                        "3": "# The end of the interval on which we want to assemble scans or clouds",
                        "4": "time end"
                }
        },
        "laser_assembler/AssembleScans2Response": {
                "name": "laser_assembler/AssembleScans2Response",
                "elementType": "messageType",
                "fields": {
                        "cloud": {
                                "name": "cloud",
                                "elementType": "messageType",
                                "type": "sensor_msgs/PointCloud2",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# The point cloud holding the assembled clouds or scans. ",
                        "2": "# This cloud is in the frame specified by the ~fixed_frame node parameter. ",
                        "3": "# cloud is empty if no scans are received in the requested interval.",
                        "4": "sensor_msgs/PointCloud2 cloud"
                }
        },
        "map_msgs/GetMapROIRequest": {
                "name": "map_msgs/GetMapROIRequest",
                "elementType": "messageType",
                "fields": {
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "l_x": {
                                "name": "l_x",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "l_y": {
                                "name": "l_y",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "float64 x",
                        "2": "float64 y",
                        "3": "float64 l_x",
                        "4": "float64 l_y"
                }
        },
        "map_msgs/GetMapROIResponse": {
                "name": "map_msgs/GetMapROIResponse",
                "elementType": "messageType",
                "fields": {
                        "sub_map": {
                                "name": "sub_map",
                                "elementType": "messageType",
                                "type": "nav_msgs/OccupancyGrid",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "nav_msgs/OccupancyGrid sub_map"
                }
        },
        "map_msgs/GetPointMapRequest": {
                "name": "map_msgs/GetPointMapRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "1": "# Get the map as a sensor_msgs/PointCloud2"
                }
        },
        "map_msgs/GetPointMapResponse": {
                "name": "map_msgs/GetPointMapResponse",
                "elementType": "messageType",
                "fields": {
                        "map": {
                                "name": "map",
                                "elementType": "messageType",
                                "type": "sensor_msgs/PointCloud2",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "sensor_msgs/PointCloud2 map"
                }
        },
        "map_msgs/GetPointMapROIRequest": {
                "name": "map_msgs/GetPointMapROIRequest",
                "elementType": "messageType",
                "fields": {
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "z": {
                                "name": "z",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "r": {
                                "name": "r",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "l_x": {
                                "name": "l_x",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "l_y": {
                                "name": "l_y",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        },
                        "l_z": {
                                "name": "l_z",
                                "elementType": "dataType",
                                "storageType": "float64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "float64 x",
                        "2": "float64 y",
                        "3": "float64 z",
                        "4": "float64 r    # if != 0, circular ROI of radius r",
                        "5": "float64 l_x  # if r == 0, length of AABB on x",
                        "6": "float64 l_y  # if r == 0, length of AABB on y",
                        "7": "float64 l_z  # if r == 0, length of AABB on z"
                }
        },
        "map_msgs/GetPointMapROIResponse": {
                "name": "map_msgs/GetPointMapROIResponse",
                "elementType": "messageType",
                "fields": {
                        "sub_map": {
                                "name": "sub_map",
                                "elementType": "messageType",
                                "type": "sensor_msgs/PointCloud2",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "sensor_msgs/PointCloud2 sub_map"
                }
        },
        "map_msgs/ProjectedMapsInfoRequest": {
                "name": "map_msgs/ProjectedMapsInfoRequest",
                "elementType": "messageType",
                "fields": {
                        "projected_maps_info": {
                                "name": "projected_maps_info",
                                "elementType": "messageType",
                                "type": "map_msgs/ProjectedMapInfo[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "map_msgs/ProjectedMapInfo[] projected_maps_info"
                }
        },
        "map_msgs/ProjectedMapsInfoResponse": {
                "name": "map_msgs/ProjectedMapsInfoResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "map_msgs/SaveMapRequest": {
                "name": "map_msgs/SaveMapRequest",
                "elementType": "messageType",
                "fields": {
                        "filename": {
                                "name": "filename",
                                "elementType": "messageType",
                                "type": "std_msgs/String",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# Save the map to the filesystem",
                        "2": "std_msgs/String filename"
                }
        },
        "map_msgs/SaveMapResponse": {
                "name": "map_msgs/SaveMapResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "map_msgs/SetMapProjectionsRequest": {
                "name": "map_msgs/SetMapProjectionsRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "map_msgs/SetMapProjectionsResponse": {
                "name": "map_msgs/SetMapProjectionsResponse",
                "elementType": "messageType",
                "fields": {
                        "projected_maps_info": {
                                "name": "projected_maps_info",
                                "elementType": "messageType",
                                "type": "map_msgs/ProjectedMapInfo[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "map_msgs/ProjectedMapInfo[] projected_maps_info"
                }
        },
        "nav_msgs/GetMapRequest": {
                "name": "nav_msgs/GetMapRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "1": "# Get the map as a nav_msgs/OccupancyGrid"
                }
        },
        "nav_msgs/GetMapResponse": {
                "name": "nav_msgs/GetMapResponse",
                "elementType": "messageType",
                "fields": {
                        "map": {
                                "name": "map",
                                "elementType": "messageType",
                                "type": "nav_msgs/OccupancyGrid",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "nav_msgs/OccupancyGrid map"
                }
        },
        "nav_msgs/GetPlanRequest": {
                "name": "nav_msgs/GetPlanRequest",
                "elementType": "messageType",
                "fields": {
                        "start": {
                                "name": "start",
                                "elementType": "messageType",
                                "type": "geometry_msgs/PoseStamped",
                                "dmfDataType": "TBD"
                        },
                        "goal": {
                                "name": "goal",
                                "elementType": "messageType",
                                "type": "geometry_msgs/PoseStamped",
                                "dmfDataType": "TBD"
                        },
                        "tolerance": {
                                "name": "tolerance",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# Get a plan from the current position to the goal Pose ",
                        "2": "",
                        "3": "# The start pose for the plan",
                        "4": "geometry_msgs/PoseStamped start",
                        "5": "",
                        "6": "# The final pose of the goal position",
                        "7": "geometry_msgs/PoseStamped goal",
                        "8": "",
                        "9": "# If the goal is obstructed, how many meters the planner can ",
                        "10": "# relax the constraint in x and y before failing. ",
                        "11": "float32 tolerance"
                }
        },
        "nav_msgs/GetPlanResponse": {
                "name": "nav_msgs/GetPlanResponse",
                "elementType": "messageType",
                "fields": {
                        "plan": {
                                "name": "plan",
                                "elementType": "messageType",
                                "type": "nav_msgs/Path",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "nav_msgs/Path plan"
                }
        },
        "nav_msgs/SetMapRequest": {
                "name": "nav_msgs/SetMapRequest",
                "elementType": "messageType",
                "fields": {
                        "map": {
                                "name": "map",
                                "elementType": "messageType",
                                "type": "nav_msgs/OccupancyGrid",
                                "dmfDataType": "TBD"
                        },
                        "initial_pose": {
                                "name": "initial_pose",
                                "elementType": "messageType",
                                "type": "geometry_msgs/PoseWithCovarianceStamped",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# Set a new map together with an initial pose",
                        "2": "nav_msgs/OccupancyGrid map",
                        "3": "geometry_msgs/PoseWithCovarianceStamped initial_pose"
                }
        },
        "nav_msgs/SetMapResponse": {
                "name": "nav_msgs/SetMapResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success",
                        "2": ""
                }
        },
        "nodelet/NodeletListRequest": {
                "name": "nodelet/NodeletListRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "nodelet/NodeletListResponse": {
                "name": "nodelet/NodeletListResponse",
                "elementType": "messageType",
                "fields": {
                        "nodelets": {
                                "name": "nodelets",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string[] nodelets"
                }
        },
        "nodelet/NodeletLoadRequest": {
                "name": "nodelet/NodeletLoadRequest",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "type": {
                                "name": "type",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "remap_source_args": {
                                "name": "remap_source_args",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "remap_target_args": {
                                "name": "remap_target_args",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "my_argv": {
                                "name": "my_argv",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        },
                        "bond_id": {
                                "name": "bond_id",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string name",
                        "2": "string type",
                        "3": "string[] remap_source_args",
                        "4": "string[] remap_target_args",
                        "5": "string[] my_argv",
                        "6": "",
                        "7": "string bond_id"
                }
        },
        "nodelet/NodeletLoadResponse": {
                "name": "nodelet/NodeletLoadResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success"
                }
        },
        "nodelet/NodeletUnloadRequest": {
                "name": "nodelet/NodeletUnloadRequest",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string name"
                }
        },
        "nodelet/NodeletUnloadResponse": {
                "name": "nodelet/NodeletUnloadResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success"
                }
        },
        "pcl_msgs/UpdateFilenameRequest": {
                "name": "pcl_msgs/UpdateFilenameRequest",
                "elementType": "messageType",
                "fields": {
                        "filename": {
                                "name": "filename",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string filename"
                }
        },
        "pcl_msgs/UpdateFilenameResponse": {
                "name": "pcl_msgs/UpdateFilenameResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success"
                }
        },
        "polled_camera/GetPolledImageRequest": {
                "name": "polled_camera/GetPolledImageRequest",
                "elementType": "messageType",
                "fields": {
                        "response_namespace": {
                                "name": "response_namespace",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "timeout": {
                                "name": "timeout",
                                "elementType": "dataType",
                                "storageType": "duration",
                                "dmfDataType": "TBD"
                        },
                        "binning_x": {
                                "name": "binning_x",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "binning_y": {
                                "name": "binning_y",
                                "elementType": "dataType",
                                "storageType": "uint32",
                                "dmfDataType": "TBD"
                        },
                        "roi": {
                                "name": "roi",
                                "elementType": "messageType",
                                "type": "sensor_msgs/RegionOfInterest",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# Namespace to publish response topics in. A polled camera driver node",
                        "2": "# should publish:",
                        "3": "#   <response_namespace>/image_raw",
                        "4": "#   <response_namespace>/camera_info",
                        "5": "string response_namespace",
                        "6": "",
                        "7": "# Timeout for attempting to capture data from the device. This does not",
                        "8": "# include latency from ROS communication, post-processing of raw camera",
                        "9": "# data, etc. A zero duration indicates no time limit.",
                        "10": "duration timeout",
                        "11": "",
                        "12": "# Binning settings, if supported by the camera.",
                        "13": "uint32 binning_x",
                        "14": "uint32 binning_y",
                        "15": "",
                        "16": "# Region of interest, if supported by the camera.",
                        "17": "sensor_msgs/RegionOfInterest roi"
                }
        },
        "polled_camera/GetPolledImageResponse": {
                "name": "polled_camera/GetPolledImageResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "stamp": {
                                "name": "stamp",
                                "elementType": "dataType",
                                "storageType": "time",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success          # Could the image be captured?",
                        "2": "string status_message # Error message in case of failure",
                        "3": "time stamp            # Timestamp of the captured image. Can be matched",
                        "4": "                      # against incoming sensor_msgs/Image header."
                }
        },
        "roscpp/EmptyRequest": {
                "name": "roscpp/EmptyRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "roscpp/EmptyResponse": {
                "name": "roscpp/EmptyResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "roscpp/GetLoggersRequest": {
                "name": "roscpp/GetLoggersRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "roscpp/GetLoggersResponse": {
                "name": "roscpp/GetLoggersResponse",
                "elementType": "messageType",
                "fields": {
                        "loggers": {
                                "name": "loggers",
                                "elementType": "messageType",
                                "type": "roscpp/Logger[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "Logger[] loggers"
                }
        },
        "roscpp/SetLoggerLevelRequest": {
                "name": "roscpp/SetLoggerLevelRequest",
                "elementType": "messageType",
                "fields": {
                        "logger": {
                                "name": "logger",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        },
                        "level": {
                                "name": "level",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string logger",
                        "2": "string level"
                }
        },
        "roscpp/SetLoggerLevelResponse": {
                "name": "roscpp/SetLoggerLevelResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "roscpp_tutorials/TwoIntsRequest": {
                "name": "roscpp_tutorials/TwoIntsRequest",
                "elementType": "messageType",
                "fields": {
                        "a": {
                                "name": "a",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        },
                        "b": {
                                "name": "b",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "int64 a",
                        "2": "int64 b"
                }
        },
        "roscpp_tutorials/TwoIntsResponse": {
                "name": "roscpp_tutorials/TwoIntsResponse",
                "elementType": "messageType",
                "fields": {
                        "sum": {
                                "name": "sum",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "int64 sum"
                }
        },
        "rospy_tutorials/AddTwoIntsRequest": {
                "name": "rospy_tutorials/AddTwoIntsRequest",
                "elementType": "messageType",
                "fields": {
                        "a": {
                                "name": "a",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        },
                        "b": {
                                "name": "b",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "int64 a",
                        "2": "int64 b"
                }
        },
        "rospy_tutorials/AddTwoIntsResponse": {
                "name": "rospy_tutorials/AddTwoIntsResponse",
                "elementType": "messageType",
                "fields": {
                        "sum": {
                                "name": "sum",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "int64 sum"
                }
        },
        "rospy_tutorials/BadTwoIntsRequest": {
                "name": "rospy_tutorials/BadTwoIntsRequest",
                "elementType": "messageType",
                "fields": {
                        "a": {
                                "name": "a",
                                "elementType": "dataType",
                                "storageType": "int64",
                                "dmfDataType": "TBD"
                        },
                        "b": {
                                "name": "b",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# Bad version of AddTwoInts for unit testing",
                        "2": "int64 a",
                        "3": "int32 b"
                }
        },
        "rospy_tutorials/BadTwoIntsResponse": {
                "name": "rospy_tutorials/BadTwoIntsResponse",
                "elementType": "messageType",
                "fields": {
                        "sum": {
                                "name": "sum",
                                "elementType": "dataType",
                                "storageType": "int32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "int32 sum"
                }
        },
        "rviz/SendFilePathRequest": {
                "name": "rviz/SendFilePathRequest",
                "elementType": "messageType",
                "fields": {
                        "path": {
                                "name": "path",
                                "elementType": "messageType",
                                "type": "std_msgs/String",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "std_msgs/String path # absolute path to file or directory"
                }
        },
        "rviz/SendFilePathResponse": {
                "name": "rviz/SendFilePathResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success"
                }
        },
        "sensor_msgs/SetCameraInfoRequest": {
                "name": "sensor_msgs/SetCameraInfoRequest",
                "elementType": "messageType",
                "fields": {
                        "camera_info": {
                                "name": "camera_info",
                                "elementType": "messageType",
                                "type": "sensor_msgs/CameraInfo",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "# This service requests that a camera stores the given CameraInfo ",
                        "2": "# as that camera's calibration information.",
                        "3": "#",
                        "4": "# The width and height in the camera_info field should match what the",
                        "5": "# camera is currently outputting on its camera_info topic, and the camera",
                        "6": "# will assume that the region of the imager that is being referred to is",
                        "7": "# the region that the camera is currently capturing.",
                        "8": "",
                        "9": "sensor_msgs/CameraInfo camera_info # The camera_info to store"
                }
        },
        "sensor_msgs/SetCameraInfoResponse": {
                "name": "sensor_msgs/SetCameraInfoResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "status_message": {
                                "name": "status_message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success          # True if the call succeeded",
                        "2": "string status_message # Used to give details about success"
                }
        },
        "std_srvs/EmptyRequest": {
                "name": "std_srvs/EmptyRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "std_srvs/EmptyResponse": {
                "name": "std_srvs/EmptyResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "std_srvs/SetBoolRequest": {
                "name": "std_srvs/SetBoolRequest",
                "elementType": "messageType",
                "fields": {
                        "data": {
                                "name": "data",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool data # e.g. for hardware enabling / disabling"
                }
        },
        "std_srvs/SetBoolResponse": {
                "name": "std_srvs/SetBoolResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "message": {
                                "name": "message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success   # indicate successful run of triggered service",
                        "2": "string message # informational, e.g. for error messages"
                }
        },
        "std_srvs/TriggerRequest": {
                "name": "std_srvs/TriggerRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "std_srvs/TriggerResponse": {
                "name": "std_srvs/TriggerResponse",
                "elementType": "messageType",
                "fields": {
                        "success": {
                                "name": "success",
                                "elementType": "dataType",
                                "storageType": "bool",
                                "dmfDataType": "TBD"
                        },
                        "message": {
                                "name": "message",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "bool success   # indicate successful run of triggered service",
                        "2": "string message # informational, e.g. for error messages"
                }
        },
        "tf/FrameGraphRequest": {
                "name": "tf/FrameGraphRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "tf/FrameGraphResponse": {
                "name": "tf/FrameGraphResponse",
                "elementType": "messageType",
                "fields": {
                        "dot_graph": {
                                "name": "dot_graph",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string dot_graph"
                }
        },
        "tf2_msgs/FrameGraphRequest": {
                "name": "tf2_msgs/FrameGraphRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "tf2_msgs/FrameGraphResponse": {
                "name": "tf2_msgs/FrameGraphResponse",
                "elementType": "messageType",
                "fields": {
                        "frame_yaml": {
                                "name": "frame_yaml",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string frame_yaml"
                }
        },
        "topic_tools/DemuxAddRequest": {
                "name": "topic_tools/DemuxAddRequest",
                "elementType": "messageType",
                "fields": {
                        "topic": {
                                "name": "topic",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string topic"
                }
        },
        "topic_tools/DemuxAddResponse": {
                "name": "topic_tools/DemuxAddResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "topic_tools/DemuxDeleteRequest": {
                "name": "topic_tools/DemuxDeleteRequest",
                "elementType": "messageType",
                "fields": {
                        "topic": {
                                "name": "topic",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string topic"
                }
        },
        "topic_tools/DemuxDeleteResponse": {
                "name": "topic_tools/DemuxDeleteResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "1": ""
                }
        },
        "topic_tools/DemuxListRequest": {
                "name": "topic_tools/DemuxListRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "topic_tools/DemuxListResponse": {
                "name": "topic_tools/DemuxListResponse",
                "elementType": "messageType",
                "fields": {
                        "topics": {
                                "name": "topics",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string[] topics"
                }
        },
        "topic_tools/DemuxSelectRequest": {
                "name": "topic_tools/DemuxSelectRequest",
                "elementType": "messageType",
                "fields": {
                        "topic": {
                                "name": "topic",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string topic"
                }
        },
        "topic_tools/DemuxSelectResponse": {
                "name": "topic_tools/DemuxSelectResponse",
                "elementType": "messageType",
                "fields": {
                        "prev_topic": {
                                "name": "prev_topic",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string prev_topic"
                }
        },
        "topic_tools/MuxAddRequest": {
                "name": "topic_tools/MuxAddRequest",
                "elementType": "messageType",
                "fields": {
                        "topic": {
                                "name": "topic",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string topic"
                }
        },
        "topic_tools/MuxAddResponse": {
                "name": "topic_tools/MuxAddResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "topic_tools/MuxDeleteRequest": {
                "name": "topic_tools/MuxDeleteRequest",
                "elementType": "messageType",
                "fields": {
                        "topic": {
                                "name": "topic",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string topic"
                }
        },
        "topic_tools/MuxDeleteResponse": {
                "name": "topic_tools/MuxDeleteResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {
                        "1": ""
                }
        },
        "topic_tools/MuxListRequest": {
                "name": "topic_tools/MuxListRequest",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "topic_tools/MuxListResponse": {
                "name": "topic_tools/MuxListResponse",
                "elementType": "messageType",
                "fields": {
                        "topics": {
                                "name": "topics",
                                "elementType": "dataType",
                                "storageType": "string[]",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string[] topics"
                }
        },
        "topic_tools/MuxSelectRequest": {
                "name": "topic_tools/MuxSelectRequest",
                "elementType": "messageType",
                "fields": {
                        "topic": {
                                "name": "topic",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string topic"
                }
        },
        "topic_tools/MuxSelectResponse": {
                "name": "topic_tools/MuxSelectResponse",
                "elementType": "messageType",
                "fields": {
                        "prev_topic": {
                                "name": "prev_topic",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string prev_topic"
                }
        },
        "turtlesim/KillRequest": {
                "name": "turtlesim/KillRequest",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string name"
                }
        },
        "turtlesim/KillResponse": {
                "name": "turtlesim/KillResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "turtlesim/SetPenRequest": {
                "name": "turtlesim/SetPenRequest",
                "elementType": "messageType",
                "fields": {
                        "r": {
                                "name": "r",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "g": {
                                "name": "g",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "b": {
                                "name": "b",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "width": {
                                "name": "width",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        },
                        "off": {
                                "name": "off",
                                "elementType": "dataType",
                                "storageType": "uint8",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "uint8 r",
                        "2": "uint8 g",
                        "3": "uint8 b",
                        "4": "uint8 width",
                        "5": "uint8 off"
                }
        },
        "turtlesim/SetPenResponse": {
                "name": "turtlesim/SetPenResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "turtlesim/SpawnRequest": {
                "name": "turtlesim/SpawnRequest",
                "elementType": "messageType",
                "fields": {
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "theta": {
                                "name": "theta",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "float32 x",
                        "2": "float32 y",
                        "3": "float32 theta",
                        "4": "string name # Optional.  A unique name will be created and returned if this is empty"
                }
        },
        "turtlesim/SpawnResponse": {
                "name": "turtlesim/SpawnResponse",
                "elementType": "messageType",
                "fields": {
                        "name": {
                                "name": "name",
                                "elementType": "dataType",
                                "storageType": "string",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "string name"
                }
        },
        "turtlesim/TeleportAbsoluteRequest": {
                "name": "turtlesim/TeleportAbsoluteRequest",
                "elementType": "messageType",
                "fields": {
                        "x": {
                                "name": "x",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "y": {
                                "name": "y",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "theta": {
                                "name": "theta",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "float32 x",
                        "2": "float32 y",
                        "3": "float32 theta"
                }
        },
        "turtlesim/TeleportAbsoluteResponse": {
                "name": "turtlesim/TeleportAbsoluteResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        },
        "turtlesim/TeleportRelativeRequest": {
                "name": "turtlesim/TeleportRelativeRequest",
                "elementType": "messageType",
                "fields": {
                        "linear": {
                                "name": "linear",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        },
                        "angular": {
                                "name": "angular",
                                "elementType": "dataType",
                                "storageType": "float32",
                                "dmfDataType": "TBD"
                        }
                },
                "comments": {
                        "1": "float32 linear",
                        "2": "float32 angular"
                }
        },
        "turtlesim/TeleportRelativeResponse": {
                "name": "turtlesim/TeleportRelativeResponse",
                "elementType": "messageType",
                "fields": {},
                "comments": {}
        }
}